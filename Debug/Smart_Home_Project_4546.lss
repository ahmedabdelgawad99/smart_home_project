
Smart_Home_Project_4546.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003126  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00003126  000031ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  008000a0  008000a0  000031fa  2**0
                  ALLOC
  3 .stab         00003bdc  00000000  00000000  000031fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001b22  00000000  00000000  00006dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000088fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008a3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008baa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a7f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b6de  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c48c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c5ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c879  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d047  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e2       	ldi	r30, 0x26	; 38
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3a       	cpi	r26, 0xA0	; 160
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 ea       	ldi	r26, 0xA0	; 160
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3a       	cpi	r26, 0xA1	; 161
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2d 18 	call	0x305a	; 0x305a <main>
      8a:	0c 94 91 18 	jmp	0x3122	; 0x3122 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5a 18 	jmp	0x30b4	; 0x30b4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e8       	ldi	r26, 0x86	; 134
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 76 18 	jmp	0x30ec	; 0x30ec <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 66 18 	jmp	0x30cc	; 0x30cc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 82 18 	jmp	0x3104	; 0x3104 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 66 18 	jmp	0x30cc	; 0x30cc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 82 18 	jmp	0x3104	; 0x3104 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5a 18 	jmp	0x30b4	; 0x30b4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e8       	ldi	r24, 0x86	; 134
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 76 18 	jmp	0x30ec	; 0x30ec <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 66 18 	jmp	0x30cc	; 0x30cc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 82 18 	jmp	0x3104	; 0x3104 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 66 18 	jmp	0x30cc	; 0x30cc <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 82 18 	jmp	0x3104	; 0x3104 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 66 18 	jmp	0x30cc	; 0x30cc <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 82 18 	jmp	0x3104	; 0x3104 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 6a 18 	jmp	0x30d4	; 0x30d4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 86 18 	jmp	0x310c	; 0x310c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_enuInit>:
#include "AVR_REG.h"
#include "DIO_config.h"


ES_t DIO_enuInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
     b50:	19 82       	std	Y+1, r1	; 0x01

	DDRA=CONC(DIO_u8PA7_DIR,DIO_u8PA6_DIR,DIO_u8PA5_DIR,DIO_u8PA4_DIR,DIO_u8PA3_DIR,DIO_u8PA2_DIR,DIO_u8PA1_DIR,DIO_u8PA0_DIR);
     b52:	ea e3       	ldi	r30, 0x3A	; 58
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	81 eb       	ldi	r24, 0xB1	; 177
     b58:	80 83       	st	Z, r24

	PORTA=CONC(DIO_u8PA7_VALUE,DIO_u8PA6_VALUE,DIO_u8PA5_VALUE,DIO_u8PA4_VALUE,DIO_u8PA3_VALUE,DIO_u8PA2_VALUE,DIO_u8PA1_VALUE,DIO_u8PA0_VALUE);
     b5a:	eb e3       	ldi	r30, 0x3B	; 59
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	86 e1       	ldi	r24, 0x16	; 22
     b60:	80 83       	st	Z, r24

	return Local_enuErrorState;
     b62:	89 81       	ldd	r24, Y+1	; 0x01
}
     b64:	0f 90       	pop	r0
     b66:	cf 91       	pop	r28
     b68:	df 91       	pop	r29
     b6a:	08 95       	ret

00000b6c <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8Direction)
{
     b6c:	df 93       	push	r29
     b6e:	cf 93       	push	r28
     b70:	00 d0       	rcall	.+0      	; 0xb72 <DIO_enuSetPinDirection+0x6>
     b72:	00 d0       	rcall	.+0      	; 0xb74 <DIO_enuSetPinDirection+0x8>
     b74:	00 d0       	rcall	.+0      	; 0xb76 <DIO_enuSetPinDirection+0xa>
     b76:	cd b7       	in	r28, 0x3d	; 61
     b78:	de b7       	in	r29, 0x3e	; 62
     b7a:	8a 83       	std	Y+2, r24	; 0x02
     b7c:	6b 83       	std	Y+3, r22	; 0x03
     b7e:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
     b80:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_u8GROUP_D
     b82:	8a 81       	ldd	r24, Y+2	; 0x02
     b84:	84 30       	cpi	r24, 0x04	; 4
     b86:	08 f0       	brcs	.+2      	; 0xb8a <DIO_enuSetPinDirection+0x1e>
     b88:	d1 c0       	rjmp	.+418    	; 0xd2c <DIO_enuSetPinDirection+0x1c0>
     b8a:	8b 81       	ldd	r24, Y+3	; 0x03
     b8c:	88 30       	cpi	r24, 0x08	; 8
     b8e:	08 f0       	brcs	.+2      	; 0xb92 <DIO_enuSetPinDirection+0x26>
     b90:	cd c0       	rjmp	.+410    	; 0xd2c <DIO_enuSetPinDirection+0x1c0>
     b92:	8c 81       	ldd	r24, Y+4	; 0x04
     b94:	82 30       	cpi	r24, 0x02	; 2
     b96:	08 f0       	brcs	.+2      	; 0xb9a <DIO_enuSetPinDirection+0x2e>
     b98:	c9 c0       	rjmp	.+402    	; 0xd2c <DIO_enuSetPinDirection+0x1c0>
			&& Copy_u8PinID <= DIO_u8PIN7
			&& Copy_u8Direction <= DIO_u8OUTPUT)
	{
		switch (Copy_u8PortID)
     b9a:	8a 81       	ldd	r24, Y+2	; 0x02
     b9c:	28 2f       	mov	r18, r24
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	3e 83       	std	Y+6, r19	; 0x06
     ba2:	2d 83       	std	Y+5, r18	; 0x05
     ba4:	6d 81       	ldd	r22, Y+5	; 0x05
     ba6:	7e 81       	ldd	r23, Y+6	; 0x06
     ba8:	61 30       	cpi	r22, 0x01	; 1
     baa:	71 05       	cpc	r23, r1
     bac:	09 f4       	brne	.+2      	; 0xbb0 <DIO_enuSetPinDirection+0x44>
     bae:	41 c0       	rjmp	.+130    	; 0xc32 <DIO_enuSetPinDirection+0xc6>
     bb0:	8d 81       	ldd	r24, Y+5	; 0x05
     bb2:	9e 81       	ldd	r25, Y+6	; 0x06
     bb4:	82 30       	cpi	r24, 0x02	; 2
     bb6:	91 05       	cpc	r25, r1
     bb8:	34 f4       	brge	.+12     	; 0xbc6 <DIO_enuSetPinDirection+0x5a>
     bba:	2d 81       	ldd	r18, Y+5	; 0x05
     bbc:	3e 81       	ldd	r19, Y+6	; 0x06
     bbe:	21 15       	cp	r18, r1
     bc0:	31 05       	cpc	r19, r1
     bc2:	71 f0       	breq	.+28     	; 0xbe0 <DIO_enuSetPinDirection+0x74>
     bc4:	b0 c0       	rjmp	.+352    	; 0xd26 <DIO_enuSetPinDirection+0x1ba>
     bc6:	6d 81       	ldd	r22, Y+5	; 0x05
     bc8:	7e 81       	ldd	r23, Y+6	; 0x06
     bca:	62 30       	cpi	r22, 0x02	; 2
     bcc:	71 05       	cpc	r23, r1
     bce:	09 f4       	brne	.+2      	; 0xbd2 <DIO_enuSetPinDirection+0x66>
     bd0:	59 c0       	rjmp	.+178    	; 0xc84 <DIO_enuSetPinDirection+0x118>
     bd2:	8d 81       	ldd	r24, Y+5	; 0x05
     bd4:	9e 81       	ldd	r25, Y+6	; 0x06
     bd6:	83 30       	cpi	r24, 0x03	; 3
     bd8:	91 05       	cpc	r25, r1
     bda:	09 f4       	brne	.+2      	; 0xbde <DIO_enuSetPinDirection+0x72>
     bdc:	7c c0       	rjmp	.+248    	; 0xcd6 <DIO_enuSetPinDirection+0x16a>
     bde:	a3 c0       	rjmp	.+326    	; 0xd26 <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_u8GROUP_A:

			DDRA &=~(DIO_MASK_BIT<<Copy_u8PinID);
     be0:	aa e3       	ldi	r26, 0x3A	; 58
     be2:	b0 e0       	ldi	r27, 0x00	; 0
     be4:	ea e3       	ldi	r30, 0x3A	; 58
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	80 81       	ld	r24, Z
     bea:	48 2f       	mov	r20, r24
     bec:	8b 81       	ldd	r24, Y+3	; 0x03
     bee:	28 2f       	mov	r18, r24
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	02 c0       	rjmp	.+4      	; 0xbfc <DIO_enuSetPinDirection+0x90>
     bf8:	88 0f       	add	r24, r24
     bfa:	99 1f       	adc	r25, r25
     bfc:	2a 95       	dec	r18
     bfe:	e2 f7       	brpl	.-8      	; 0xbf8 <DIO_enuSetPinDirection+0x8c>
     c00:	80 95       	com	r24
     c02:	84 23       	and	r24, r20
     c04:	8c 93       	st	X, r24
			DDRA |= (Copy_u8Direction<<Copy_u8PinID);
     c06:	aa e3       	ldi	r26, 0x3A	; 58
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	ea e3       	ldi	r30, 0x3A	; 58
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	48 2f       	mov	r20, r24
     c12:	8c 81       	ldd	r24, Y+4	; 0x04
     c14:	28 2f       	mov	r18, r24
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	8b 81       	ldd	r24, Y+3	; 0x03
     c1a:	88 2f       	mov	r24, r24
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	b9 01       	movw	r22, r18
     c20:	02 c0       	rjmp	.+4      	; 0xc26 <DIO_enuSetPinDirection+0xba>
     c22:	66 0f       	add	r22, r22
     c24:	77 1f       	adc	r23, r23
     c26:	8a 95       	dec	r24
     c28:	e2 f7       	brpl	.-8      	; 0xc22 <DIO_enuSetPinDirection+0xb6>
     c2a:	cb 01       	movw	r24, r22
     c2c:	84 2b       	or	r24, r20
     c2e:	8c 93       	st	X, r24
     c30:	7a c0       	rjmp	.+244    	; 0xd26 <DIO_enuSetPinDirection+0x1ba>

			break;
		case DIO_u8GROUP_B:

			DDRB &=~(DIO_MASK_BIT<<Copy_u8PinID);
     c32:	a7 e3       	ldi	r26, 0x37	; 55
     c34:	b0 e0       	ldi	r27, 0x00	; 0
     c36:	e7 e3       	ldi	r30, 0x37	; 55
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	80 81       	ld	r24, Z
     c3c:	48 2f       	mov	r20, r24
     c3e:	8b 81       	ldd	r24, Y+3	; 0x03
     c40:	28 2f       	mov	r18, r24
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	02 c0       	rjmp	.+4      	; 0xc4e <DIO_enuSetPinDirection+0xe2>
     c4a:	88 0f       	add	r24, r24
     c4c:	99 1f       	adc	r25, r25
     c4e:	2a 95       	dec	r18
     c50:	e2 f7       	brpl	.-8      	; 0xc4a <DIO_enuSetPinDirection+0xde>
     c52:	80 95       	com	r24
     c54:	84 23       	and	r24, r20
     c56:	8c 93       	st	X, r24
			DDRB |= (Copy_u8Direction<<Copy_u8PinID);
     c58:	a7 e3       	ldi	r26, 0x37	; 55
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	e7 e3       	ldi	r30, 0x37	; 55
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	48 2f       	mov	r20, r24
     c64:	8c 81       	ldd	r24, Y+4	; 0x04
     c66:	28 2f       	mov	r18, r24
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	8b 81       	ldd	r24, Y+3	; 0x03
     c6c:	88 2f       	mov	r24, r24
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	b9 01       	movw	r22, r18
     c72:	02 c0       	rjmp	.+4      	; 0xc78 <DIO_enuSetPinDirection+0x10c>
     c74:	66 0f       	add	r22, r22
     c76:	77 1f       	adc	r23, r23
     c78:	8a 95       	dec	r24
     c7a:	e2 f7       	brpl	.-8      	; 0xc74 <DIO_enuSetPinDirection+0x108>
     c7c:	cb 01       	movw	r24, r22
     c7e:	84 2b       	or	r24, r20
     c80:	8c 93       	st	X, r24
     c82:	51 c0       	rjmp	.+162    	; 0xd26 <DIO_enuSetPinDirection+0x1ba>

			break;
		case DIO_u8GROUP_C:

			DDRC &=~(DIO_MASK_BIT<<Copy_u8PinID);
     c84:	a4 e3       	ldi	r26, 0x34	; 52
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	e4 e3       	ldi	r30, 0x34	; 52
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	48 2f       	mov	r20, r24
     c90:	8b 81       	ldd	r24, Y+3	; 0x03
     c92:	28 2f       	mov	r18, r24
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	02 c0       	rjmp	.+4      	; 0xca0 <DIO_enuSetPinDirection+0x134>
     c9c:	88 0f       	add	r24, r24
     c9e:	99 1f       	adc	r25, r25
     ca0:	2a 95       	dec	r18
     ca2:	e2 f7       	brpl	.-8      	; 0xc9c <DIO_enuSetPinDirection+0x130>
     ca4:	80 95       	com	r24
     ca6:	84 23       	and	r24, r20
     ca8:	8c 93       	st	X, r24
			DDRC |= (Copy_u8Direction<<Copy_u8PinID);
     caa:	a4 e3       	ldi	r26, 0x34	; 52
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	e4 e3       	ldi	r30, 0x34	; 52
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	48 2f       	mov	r20, r24
     cb6:	8c 81       	ldd	r24, Y+4	; 0x04
     cb8:	28 2f       	mov	r18, r24
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	8b 81       	ldd	r24, Y+3	; 0x03
     cbe:	88 2f       	mov	r24, r24
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	b9 01       	movw	r22, r18
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <DIO_enuSetPinDirection+0x15e>
     cc6:	66 0f       	add	r22, r22
     cc8:	77 1f       	adc	r23, r23
     cca:	8a 95       	dec	r24
     ccc:	e2 f7       	brpl	.-8      	; 0xcc6 <DIO_enuSetPinDirection+0x15a>
     cce:	cb 01       	movw	r24, r22
     cd0:	84 2b       	or	r24, r20
     cd2:	8c 93       	st	X, r24
     cd4:	28 c0       	rjmp	.+80     	; 0xd26 <DIO_enuSetPinDirection+0x1ba>

			break;
		case DIO_u8GROUP_D:

			DDRD &=~(DIO_MASK_BIT<<Copy_u8PinID);
     cd6:	a1 e3       	ldi	r26, 0x31	; 49
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e1 e3       	ldi	r30, 0x31	; 49
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 81       	ld	r24, Z
     ce0:	48 2f       	mov	r20, r24
     ce2:	8b 81       	ldd	r24, Y+3	; 0x03
     ce4:	28 2f       	mov	r18, r24
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	02 c0       	rjmp	.+4      	; 0xcf2 <DIO_enuSetPinDirection+0x186>
     cee:	88 0f       	add	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	2a 95       	dec	r18
     cf4:	e2 f7       	brpl	.-8      	; 0xcee <DIO_enuSetPinDirection+0x182>
     cf6:	80 95       	com	r24
     cf8:	84 23       	and	r24, r20
     cfa:	8c 93       	st	X, r24
			DDRD |= (Copy_u8Direction<<Copy_u8PinID);
     cfc:	a1 e3       	ldi	r26, 0x31	; 49
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	e1 e3       	ldi	r30, 0x31	; 49
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	48 2f       	mov	r20, r24
     d08:	8c 81       	ldd	r24, Y+4	; 0x04
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	8b 81       	ldd	r24, Y+3	; 0x03
     d10:	88 2f       	mov	r24, r24
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	b9 01       	movw	r22, r18
     d16:	02 c0       	rjmp	.+4      	; 0xd1c <DIO_enuSetPinDirection+0x1b0>
     d18:	66 0f       	add	r22, r22
     d1a:	77 1f       	adc	r23, r23
     d1c:	8a 95       	dec	r24
     d1e:	e2 f7       	brpl	.-8      	; 0xd18 <DIO_enuSetPinDirection+0x1ac>
     d20:	cb 01       	movw	r24, r22
     d22:	84 2b       	or	r24, r20
     d24:	8c 93       	st	X, r24

			break;
		}
		Local_enuErrorState = ES_OK;
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	89 83       	std	Y+1, r24	; 0x01
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
     d2c:	82 e0       	ldi	r24, 0x02	; 2
     d2e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
     d30:	89 81       	ldd	r24, Y+1	; 0x01
}
     d32:	26 96       	adiw	r28, 0x06	; 6
     d34:	0f b6       	in	r0, 0x3f	; 63
     d36:	f8 94       	cli
     d38:	de bf       	out	0x3e, r29	; 62
     d3a:	0f be       	out	0x3f, r0	; 63
     d3c:	cd bf       	out	0x3d, r28	; 61
     d3e:	cf 91       	pop	r28
     d40:	df 91       	pop	r29
     d42:	08 95       	ret

00000d44 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8Value)
{
     d44:	df 93       	push	r29
     d46:	cf 93       	push	r28
     d48:	00 d0       	rcall	.+0      	; 0xd4a <DIO_enuSetPinValue+0x6>
     d4a:	00 d0       	rcall	.+0      	; 0xd4c <DIO_enuSetPinValue+0x8>
     d4c:	00 d0       	rcall	.+0      	; 0xd4e <DIO_enuSetPinValue+0xa>
     d4e:	cd b7       	in	r28, 0x3d	; 61
     d50:	de b7       	in	r29, 0x3e	; 62
     d52:	8a 83       	std	Y+2, r24	; 0x02
     d54:	6b 83       	std	Y+3, r22	; 0x03
     d56:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
     d58:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_u8GROUP_D
     d5a:	8a 81       	ldd	r24, Y+2	; 0x02
     d5c:	84 30       	cpi	r24, 0x04	; 4
     d5e:	08 f0       	brcs	.+2      	; 0xd62 <DIO_enuSetPinValue+0x1e>
     d60:	d4 c0       	rjmp	.+424    	; 0xf0a <DIO_enuSetPinValue+0x1c6>
     d62:	8b 81       	ldd	r24, Y+3	; 0x03
     d64:	88 30       	cpi	r24, 0x08	; 8
     d66:	08 f0       	brcs	.+2      	; 0xd6a <DIO_enuSetPinValue+0x26>
     d68:	d0 c0       	rjmp	.+416    	; 0xf0a <DIO_enuSetPinValue+0x1c6>
     d6a:	8c 81       	ldd	r24, Y+4	; 0x04
     d6c:	82 30       	cpi	r24, 0x02	; 2
     d6e:	20 f0       	brcs	.+8      	; 0xd78 <DIO_enuSetPinValue+0x34>
     d70:	8c 81       	ldd	r24, Y+4	; 0x04
     d72:	82 30       	cpi	r24, 0x02	; 2
     d74:	08 f0       	brcs	.+2      	; 0xd78 <DIO_enuSetPinValue+0x34>
     d76:	c9 c0       	rjmp	.+402    	; 0xf0a <DIO_enuSetPinValue+0x1c6>
			&& Copy_u8PinID <= DIO_u8PIN7
			&& (Copy_u8Value <= DIO_u8HIGH || Copy_u8Value <= DIO_u8PULL_UP ))
	{
		switch (Copy_u8PortID)
     d78:	8a 81       	ldd	r24, Y+2	; 0x02
     d7a:	28 2f       	mov	r18, r24
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	3e 83       	std	Y+6, r19	; 0x06
     d80:	2d 83       	std	Y+5, r18	; 0x05
     d82:	6d 81       	ldd	r22, Y+5	; 0x05
     d84:	7e 81       	ldd	r23, Y+6	; 0x06
     d86:	61 30       	cpi	r22, 0x01	; 1
     d88:	71 05       	cpc	r23, r1
     d8a:	09 f4       	brne	.+2      	; 0xd8e <DIO_enuSetPinValue+0x4a>
     d8c:	41 c0       	rjmp	.+130    	; 0xe10 <DIO_enuSetPinValue+0xcc>
     d8e:	8d 81       	ldd	r24, Y+5	; 0x05
     d90:	9e 81       	ldd	r25, Y+6	; 0x06
     d92:	82 30       	cpi	r24, 0x02	; 2
     d94:	91 05       	cpc	r25, r1
     d96:	34 f4       	brge	.+12     	; 0xda4 <DIO_enuSetPinValue+0x60>
     d98:	2d 81       	ldd	r18, Y+5	; 0x05
     d9a:	3e 81       	ldd	r19, Y+6	; 0x06
     d9c:	21 15       	cp	r18, r1
     d9e:	31 05       	cpc	r19, r1
     da0:	71 f0       	breq	.+28     	; 0xdbe <DIO_enuSetPinValue+0x7a>
     da2:	b0 c0       	rjmp	.+352    	; 0xf04 <DIO_enuSetPinValue+0x1c0>
     da4:	6d 81       	ldd	r22, Y+5	; 0x05
     da6:	7e 81       	ldd	r23, Y+6	; 0x06
     da8:	62 30       	cpi	r22, 0x02	; 2
     daa:	71 05       	cpc	r23, r1
     dac:	09 f4       	brne	.+2      	; 0xdb0 <DIO_enuSetPinValue+0x6c>
     dae:	59 c0       	rjmp	.+178    	; 0xe62 <DIO_enuSetPinValue+0x11e>
     db0:	8d 81       	ldd	r24, Y+5	; 0x05
     db2:	9e 81       	ldd	r25, Y+6	; 0x06
     db4:	83 30       	cpi	r24, 0x03	; 3
     db6:	91 05       	cpc	r25, r1
     db8:	09 f4       	brne	.+2      	; 0xdbc <DIO_enuSetPinValue+0x78>
     dba:	7c c0       	rjmp	.+248    	; 0xeb4 <DIO_enuSetPinValue+0x170>
     dbc:	a3 c0       	rjmp	.+326    	; 0xf04 <DIO_enuSetPinValue+0x1c0>
		{
		case DIO_u8GROUP_A:

			PORTA &=~(DIO_MASK_BIT<<Copy_u8PinID);
     dbe:	ab e3       	ldi	r26, 0x3B	; 59
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	eb e3       	ldi	r30, 0x3B	; 59
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	48 2f       	mov	r20, r24
     dca:	8b 81       	ldd	r24, Y+3	; 0x03
     dcc:	28 2f       	mov	r18, r24
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	02 c0       	rjmp	.+4      	; 0xdda <DIO_enuSetPinValue+0x96>
     dd6:	88 0f       	add	r24, r24
     dd8:	99 1f       	adc	r25, r25
     dda:	2a 95       	dec	r18
     ddc:	e2 f7       	brpl	.-8      	; 0xdd6 <DIO_enuSetPinValue+0x92>
     dde:	80 95       	com	r24
     de0:	84 23       	and	r24, r20
     de2:	8c 93       	st	X, r24
			PORTA |= (Copy_u8Value<<Copy_u8PinID);
     de4:	ab e3       	ldi	r26, 0x3B	; 59
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	eb e3       	ldi	r30, 0x3B	; 59
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	48 2f       	mov	r20, r24
     df0:	8c 81       	ldd	r24, Y+4	; 0x04
     df2:	28 2f       	mov	r18, r24
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	8b 81       	ldd	r24, Y+3	; 0x03
     df8:	88 2f       	mov	r24, r24
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	b9 01       	movw	r22, r18
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <DIO_enuSetPinValue+0xc0>
     e00:	66 0f       	add	r22, r22
     e02:	77 1f       	adc	r23, r23
     e04:	8a 95       	dec	r24
     e06:	e2 f7       	brpl	.-8      	; 0xe00 <DIO_enuSetPinValue+0xbc>
     e08:	cb 01       	movw	r24, r22
     e0a:	84 2b       	or	r24, r20
     e0c:	8c 93       	st	X, r24
     e0e:	7a c0       	rjmp	.+244    	; 0xf04 <DIO_enuSetPinValue+0x1c0>

			break;
		case DIO_u8GROUP_B:

			PORTB &=~(DIO_MASK_BIT<<Copy_u8PinID);
     e10:	a8 e3       	ldi	r26, 0x38	; 56
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	e8 e3       	ldi	r30, 0x38	; 56
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	48 2f       	mov	r20, r24
     e1c:	8b 81       	ldd	r24, Y+3	; 0x03
     e1e:	28 2f       	mov	r18, r24
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <DIO_enuSetPinValue+0xe8>
     e28:	88 0f       	add	r24, r24
     e2a:	99 1f       	adc	r25, r25
     e2c:	2a 95       	dec	r18
     e2e:	e2 f7       	brpl	.-8      	; 0xe28 <DIO_enuSetPinValue+0xe4>
     e30:	80 95       	com	r24
     e32:	84 23       	and	r24, r20
     e34:	8c 93       	st	X, r24
			PORTB |= (Copy_u8Value<<Copy_u8PinID);
     e36:	a8 e3       	ldi	r26, 0x38	; 56
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e8 e3       	ldi	r30, 0x38	; 56
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	48 2f       	mov	r20, r24
     e42:	8c 81       	ldd	r24, Y+4	; 0x04
     e44:	28 2f       	mov	r18, r24
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	8b 81       	ldd	r24, Y+3	; 0x03
     e4a:	88 2f       	mov	r24, r24
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	b9 01       	movw	r22, r18
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <DIO_enuSetPinValue+0x112>
     e52:	66 0f       	add	r22, r22
     e54:	77 1f       	adc	r23, r23
     e56:	8a 95       	dec	r24
     e58:	e2 f7       	brpl	.-8      	; 0xe52 <DIO_enuSetPinValue+0x10e>
     e5a:	cb 01       	movw	r24, r22
     e5c:	84 2b       	or	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	51 c0       	rjmp	.+162    	; 0xf04 <DIO_enuSetPinValue+0x1c0>

			break;
		case DIO_u8GROUP_C:

			PORTC &=~(DIO_MASK_BIT<<Copy_u8PinID);
     e62:	a5 e3       	ldi	r26, 0x35	; 53
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e5 e3       	ldi	r30, 0x35	; 53
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8b 81       	ldd	r24, Y+3	; 0x03
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 c0       	rjmp	.+4      	; 0xe7e <DIO_enuSetPinValue+0x13a>
     e7a:	88 0f       	add	r24, r24
     e7c:	99 1f       	adc	r25, r25
     e7e:	2a 95       	dec	r18
     e80:	e2 f7       	brpl	.-8      	; 0xe7a <DIO_enuSetPinValue+0x136>
     e82:	80 95       	com	r24
     e84:	84 23       	and	r24, r20
     e86:	8c 93       	st	X, r24
			PORTC |= (Copy_u8Value<<Copy_u8PinID);
     e88:	a5 e3       	ldi	r26, 0x35	; 53
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	e5 e3       	ldi	r30, 0x35	; 53
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	48 2f       	mov	r20, r24
     e94:	8c 81       	ldd	r24, Y+4	; 0x04
     e96:	28 2f       	mov	r18, r24
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	8b 81       	ldd	r24, Y+3	; 0x03
     e9c:	88 2f       	mov	r24, r24
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	b9 01       	movw	r22, r18
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <DIO_enuSetPinValue+0x164>
     ea4:	66 0f       	add	r22, r22
     ea6:	77 1f       	adc	r23, r23
     ea8:	8a 95       	dec	r24
     eaa:	e2 f7       	brpl	.-8      	; 0xea4 <DIO_enuSetPinValue+0x160>
     eac:	cb 01       	movw	r24, r22
     eae:	84 2b       	or	r24, r20
     eb0:	8c 93       	st	X, r24
     eb2:	28 c0       	rjmp	.+80     	; 0xf04 <DIO_enuSetPinValue+0x1c0>

			break;
		case DIO_u8GROUP_D:

			PORTD &=~(DIO_MASK_BIT<<Copy_u8PinID);
     eb4:	a2 e3       	ldi	r26, 0x32	; 50
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	e2 e3       	ldi	r30, 0x32	; 50
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	48 2f       	mov	r20, r24
     ec0:	8b 81       	ldd	r24, Y+3	; 0x03
     ec2:	28 2f       	mov	r18, r24
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	02 c0       	rjmp	.+4      	; 0xed0 <DIO_enuSetPinValue+0x18c>
     ecc:	88 0f       	add	r24, r24
     ece:	99 1f       	adc	r25, r25
     ed0:	2a 95       	dec	r18
     ed2:	e2 f7       	brpl	.-8      	; 0xecc <DIO_enuSetPinValue+0x188>
     ed4:	80 95       	com	r24
     ed6:	84 23       	and	r24, r20
     ed8:	8c 93       	st	X, r24
			PORTD |= (Copy_u8Value<<Copy_u8PinID);
     eda:	a2 e3       	ldi	r26, 0x32	; 50
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e2 e3       	ldi	r30, 0x32	; 50
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	48 2f       	mov	r20, r24
     ee6:	8c 81       	ldd	r24, Y+4	; 0x04
     ee8:	28 2f       	mov	r18, r24
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	8b 81       	ldd	r24, Y+3	; 0x03
     eee:	88 2f       	mov	r24, r24
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	b9 01       	movw	r22, r18
     ef4:	02 c0       	rjmp	.+4      	; 0xefa <DIO_enuSetPinValue+0x1b6>
     ef6:	66 0f       	add	r22, r22
     ef8:	77 1f       	adc	r23, r23
     efa:	8a 95       	dec	r24
     efc:	e2 f7       	brpl	.-8      	; 0xef6 <DIO_enuSetPinValue+0x1b2>
     efe:	cb 01       	movw	r24, r22
     f00:	84 2b       	or	r24, r20
     f02:	8c 93       	st	X, r24

			break;
		}
		Local_enuErrorState = ES_OK;
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	89 83       	std	Y+1, r24	; 0x01
     f08:	02 c0       	rjmp	.+4      	; 0xf0e <DIO_enuSetPinValue+0x1ca>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
     f0a:	82 e0       	ldi	r24, 0x02	; 2
     f0c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
     f0e:	89 81       	ldd	r24, Y+1	; 0x01
}
     f10:	26 96       	adiw	r28, 0x06	; 6
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	f8 94       	cli
     f16:	de bf       	out	0x3e, r29	; 62
     f18:	0f be       	out	0x3f, r0	; 63
     f1a:	cd bf       	out	0x3d, r28	; 61
     f1c:	cf 91       	pop	r28
     f1e:	df 91       	pop	r29
     f20:	08 95       	ret

00000f22 <DIO_enuTogPinValue>:

ES_t DIO_enuTogPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID)
{
     f22:	df 93       	push	r29
     f24:	cf 93       	push	r28
     f26:	00 d0       	rcall	.+0      	; 0xf28 <DIO_enuTogPinValue+0x6>
     f28:	00 d0       	rcall	.+0      	; 0xf2a <DIO_enuTogPinValue+0x8>
     f2a:	0f 92       	push	r0
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
     f30:	8a 83       	std	Y+2, r24	; 0x02
     f32:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
     f34:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_u8GROUP_D
     f36:	8a 81       	ldd	r24, Y+2	; 0x02
     f38:	84 30       	cpi	r24, 0x04	; 4
     f3a:	08 f0       	brcs	.+2      	; 0xf3e <DIO_enuTogPinValue+0x1c>
     f3c:	75 c0       	rjmp	.+234    	; 0x1028 <DIO_enuTogPinValue+0x106>
     f3e:	8b 81       	ldd	r24, Y+3	; 0x03
     f40:	88 30       	cpi	r24, 0x08	; 8
     f42:	08 f0       	brcs	.+2      	; 0xf46 <DIO_enuTogPinValue+0x24>
     f44:	71 c0       	rjmp	.+226    	; 0x1028 <DIO_enuTogPinValue+0x106>
			&& Copy_u8PinID <= DIO_u8PIN7)
	{
		switch (Copy_u8PortID)
     f46:	8a 81       	ldd	r24, Y+2	; 0x02
     f48:	28 2f       	mov	r18, r24
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	3d 83       	std	Y+5, r19	; 0x05
     f4e:	2c 83       	std	Y+4, r18	; 0x04
     f50:	8c 81       	ldd	r24, Y+4	; 0x04
     f52:	9d 81       	ldd	r25, Y+5	; 0x05
     f54:	81 30       	cpi	r24, 0x01	; 1
     f56:	91 05       	cpc	r25, r1
     f58:	49 f1       	breq	.+82     	; 0xfac <DIO_enuTogPinValue+0x8a>
     f5a:	2c 81       	ldd	r18, Y+4	; 0x04
     f5c:	3d 81       	ldd	r19, Y+5	; 0x05
     f5e:	22 30       	cpi	r18, 0x02	; 2
     f60:	31 05       	cpc	r19, r1
     f62:	2c f4       	brge	.+10     	; 0xf6e <DIO_enuTogPinValue+0x4c>
     f64:	8c 81       	ldd	r24, Y+4	; 0x04
     f66:	9d 81       	ldd	r25, Y+5	; 0x05
     f68:	00 97       	sbiw	r24, 0x00	; 0
     f6a:	61 f0       	breq	.+24     	; 0xf84 <DIO_enuTogPinValue+0x62>
     f6c:	5a c0       	rjmp	.+180    	; 0x1022 <DIO_enuTogPinValue+0x100>
     f6e:	2c 81       	ldd	r18, Y+4	; 0x04
     f70:	3d 81       	ldd	r19, Y+5	; 0x05
     f72:	22 30       	cpi	r18, 0x02	; 2
     f74:	31 05       	cpc	r19, r1
     f76:	71 f1       	breq	.+92     	; 0xfd4 <DIO_enuTogPinValue+0xb2>
     f78:	8c 81       	ldd	r24, Y+4	; 0x04
     f7a:	9d 81       	ldd	r25, Y+5	; 0x05
     f7c:	83 30       	cpi	r24, 0x03	; 3
     f7e:	91 05       	cpc	r25, r1
     f80:	e9 f1       	breq	.+122    	; 0xffc <DIO_enuTogPinValue+0xda>
     f82:	4f c0       	rjmp	.+158    	; 0x1022 <DIO_enuTogPinValue+0x100>
		{
		case DIO_u8GROUP_A:

			PORTA ^= (DIO_MASK_BIT<<Copy_u8PinID);
     f84:	ab e3       	ldi	r26, 0x3B	; 59
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	eb e3       	ldi	r30, 0x3B	; 59
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	48 2f       	mov	r20, r24
     f90:	8b 81       	ldd	r24, Y+3	; 0x03
     f92:	28 2f       	mov	r18, r24
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	02 2e       	mov	r0, r18
     f9c:	02 c0       	rjmp	.+4      	; 0xfa2 <DIO_enuTogPinValue+0x80>
     f9e:	88 0f       	add	r24, r24
     fa0:	99 1f       	adc	r25, r25
     fa2:	0a 94       	dec	r0
     fa4:	e2 f7       	brpl	.-8      	; 0xf9e <DIO_enuTogPinValue+0x7c>
     fa6:	84 27       	eor	r24, r20
     fa8:	8c 93       	st	X, r24
     faa:	3b c0       	rjmp	.+118    	; 0x1022 <DIO_enuTogPinValue+0x100>

			break;
		case DIO_u8GROUP_B:

			PORTB ^= (DIO_MASK_BIT<<Copy_u8PinID);
     fac:	a8 e3       	ldi	r26, 0x38	; 56
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	e8 e3       	ldi	r30, 0x38	; 56
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	48 2f       	mov	r20, r24
     fb8:	8b 81       	ldd	r24, Y+3	; 0x03
     fba:	28 2f       	mov	r18, r24
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	02 2e       	mov	r0, r18
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <DIO_enuTogPinValue+0xa8>
     fc6:	88 0f       	add	r24, r24
     fc8:	99 1f       	adc	r25, r25
     fca:	0a 94       	dec	r0
     fcc:	e2 f7       	brpl	.-8      	; 0xfc6 <DIO_enuTogPinValue+0xa4>
     fce:	84 27       	eor	r24, r20
     fd0:	8c 93       	st	X, r24
     fd2:	27 c0       	rjmp	.+78     	; 0x1022 <DIO_enuTogPinValue+0x100>

			break;
		case DIO_u8GROUP_C:

			PORTC ^= (DIO_MASK_BIT<<Copy_u8PinID);
     fd4:	a5 e3       	ldi	r26, 0x35	; 53
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	e5 e3       	ldi	r30, 0x35	; 53
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	48 2f       	mov	r20, r24
     fe0:	8b 81       	ldd	r24, Y+3	; 0x03
     fe2:	28 2f       	mov	r18, r24
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	02 2e       	mov	r0, r18
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <DIO_enuTogPinValue+0xd0>
     fee:	88 0f       	add	r24, r24
     ff0:	99 1f       	adc	r25, r25
     ff2:	0a 94       	dec	r0
     ff4:	e2 f7       	brpl	.-8      	; 0xfee <DIO_enuTogPinValue+0xcc>
     ff6:	84 27       	eor	r24, r20
     ff8:	8c 93       	st	X, r24
     ffa:	13 c0       	rjmp	.+38     	; 0x1022 <DIO_enuTogPinValue+0x100>

			break;
		case DIO_u8GROUP_D:

			PORTD ^= (DIO_MASK_BIT<<Copy_u8PinID);
     ffc:	a2 e3       	ldi	r26, 0x32	; 50
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	e2 e3       	ldi	r30, 0x32	; 50
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	48 2f       	mov	r20, r24
    1008:	8b 81       	ldd	r24, Y+3	; 0x03
    100a:	28 2f       	mov	r18, r24
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	02 2e       	mov	r0, r18
    1014:	02 c0       	rjmp	.+4      	; 0x101a <DIO_enuTogPinValue+0xf8>
    1016:	88 0f       	add	r24, r24
    1018:	99 1f       	adc	r25, r25
    101a:	0a 94       	dec	r0
    101c:	e2 f7       	brpl	.-8      	; 0x1016 <DIO_enuTogPinValue+0xf4>
    101e:	84 27       	eor	r24, r20
    1020:	8c 93       	st	X, r24

			break;
		}
		Local_enuErrorState = ES_OK;
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	89 83       	std	Y+1, r24	; 0x01
    1026:	02 c0       	rjmp	.+4      	; 0x102c <DIO_enuTogPinValue+0x10a>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1028:	82 e0       	ldi	r24, 0x02	; 2
    102a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    102c:	89 81       	ldd	r24, Y+1	; 0x01
}
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
    1034:	0f 90       	pop	r0
    1036:	0f 90       	pop	r0
    1038:	cf 91       	pop	r28
    103a:	df 91       	pop	r29
    103c:	08 95       	ret

0000103e <DIO_enuGetPinValue>:
ES_t DIO_enuGetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 * Copy_pu8Value)
{
    103e:	df 93       	push	r29
    1040:	cf 93       	push	r28
    1042:	cd b7       	in	r28, 0x3d	; 61
    1044:	de b7       	in	r29, 0x3e	; 62
    1046:	27 97       	sbiw	r28, 0x07	; 7
    1048:	0f b6       	in	r0, 0x3f	; 63
    104a:	f8 94       	cli
    104c:	de bf       	out	0x3e, r29	; 62
    104e:	0f be       	out	0x3f, r0	; 63
    1050:	cd bf       	out	0x3d, r28	; 61
    1052:	8a 83       	std	Y+2, r24	; 0x02
    1054:	6b 83       	std	Y+3, r22	; 0x03
    1056:	5d 83       	std	Y+5, r21	; 0x05
    1058:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    105a:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8Value != NULL)
    105c:	8c 81       	ldd	r24, Y+4	; 0x04
    105e:	9d 81       	ldd	r25, Y+5	; 0x05
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	09 f4       	brne	.+2      	; 0x1066 <DIO_enuGetPinValue+0x28>
    1064:	7e c0       	rjmp	.+252    	; 0x1162 <DIO_enuGetPinValue+0x124>
	{
		if(Copy_u8PortID <= DIO_u8GROUP_D
    1066:	8a 81       	ldd	r24, Y+2	; 0x02
    1068:	84 30       	cpi	r24, 0x04	; 4
    106a:	08 f0       	brcs	.+2      	; 0x106e <DIO_enuGetPinValue+0x30>
    106c:	77 c0       	rjmp	.+238    	; 0x115c <DIO_enuGetPinValue+0x11e>
    106e:	8b 81       	ldd	r24, Y+3	; 0x03
    1070:	88 30       	cpi	r24, 0x08	; 8
    1072:	08 f0       	brcs	.+2      	; 0x1076 <DIO_enuGetPinValue+0x38>
    1074:	73 c0       	rjmp	.+230    	; 0x115c <DIO_enuGetPinValue+0x11e>
				&& Copy_u8PinID <= DIO_u8PIN7)
		{
			switch (Copy_u8PortID)
    1076:	8a 81       	ldd	r24, Y+2	; 0x02
    1078:	28 2f       	mov	r18, r24
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	3f 83       	std	Y+7, r19	; 0x07
    107e:	2e 83       	std	Y+6, r18	; 0x06
    1080:	4e 81       	ldd	r20, Y+6	; 0x06
    1082:	5f 81       	ldd	r21, Y+7	; 0x07
    1084:	41 30       	cpi	r20, 0x01	; 1
    1086:	51 05       	cpc	r21, r1
    1088:	59 f1       	breq	.+86     	; 0x10e0 <DIO_enuGetPinValue+0xa2>
    108a:	8e 81       	ldd	r24, Y+6	; 0x06
    108c:	9f 81       	ldd	r25, Y+7	; 0x07
    108e:	82 30       	cpi	r24, 0x02	; 2
    1090:	91 05       	cpc	r25, r1
    1092:	34 f4       	brge	.+12     	; 0x10a0 <DIO_enuGetPinValue+0x62>
    1094:	2e 81       	ldd	r18, Y+6	; 0x06
    1096:	3f 81       	ldd	r19, Y+7	; 0x07
    1098:	21 15       	cp	r18, r1
    109a:	31 05       	cpc	r19, r1
    109c:	69 f0       	breq	.+26     	; 0x10b8 <DIO_enuGetPinValue+0x7a>
    109e:	5b c0       	rjmp	.+182    	; 0x1156 <DIO_enuGetPinValue+0x118>
    10a0:	4e 81       	ldd	r20, Y+6	; 0x06
    10a2:	5f 81       	ldd	r21, Y+7	; 0x07
    10a4:	42 30       	cpi	r20, 0x02	; 2
    10a6:	51 05       	cpc	r21, r1
    10a8:	79 f1       	breq	.+94     	; 0x1108 <DIO_enuGetPinValue+0xca>
    10aa:	8e 81       	ldd	r24, Y+6	; 0x06
    10ac:	9f 81       	ldd	r25, Y+7	; 0x07
    10ae:	83 30       	cpi	r24, 0x03	; 3
    10b0:	91 05       	cpc	r25, r1
    10b2:	09 f4       	brne	.+2      	; 0x10b6 <DIO_enuGetPinValue+0x78>
    10b4:	3d c0       	rjmp	.+122    	; 0x1130 <DIO_enuGetPinValue+0xf2>
    10b6:	4f c0       	rjmp	.+158    	; 0x1156 <DIO_enuGetPinValue+0x118>
			{
			case DIO_u8GROUP_A:

				*Copy_pu8Value = ( (PINA >> Copy_u8PinID ) & DIO_MASK_BIT);
    10b8:	e9 e3       	ldi	r30, 0x39	; 57
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	28 2f       	mov	r18, r24
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	88 2f       	mov	r24, r24
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	a9 01       	movw	r20, r18
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <DIO_enuGetPinValue+0x92>
    10cc:	55 95       	asr	r21
    10ce:	47 95       	ror	r20
    10d0:	8a 95       	dec	r24
    10d2:	e2 f7       	brpl	.-8      	; 0x10cc <DIO_enuGetPinValue+0x8e>
    10d4:	ca 01       	movw	r24, r20
    10d6:	81 70       	andi	r24, 0x01	; 1
    10d8:	ec 81       	ldd	r30, Y+4	; 0x04
    10da:	fd 81       	ldd	r31, Y+5	; 0x05
    10dc:	80 83       	st	Z, r24
    10de:	3b c0       	rjmp	.+118    	; 0x1156 <DIO_enuGetPinValue+0x118>

				break;
			case DIO_u8GROUP_B:

				*Copy_pu8Value = ( (PINB >> Copy_u8PinID ) & DIO_MASK_BIT);
    10e0:	e6 e3       	ldi	r30, 0x36	; 54
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	8b 81       	ldd	r24, Y+3	; 0x03
    10ec:	88 2f       	mov	r24, r24
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	a9 01       	movw	r20, r18
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <DIO_enuGetPinValue+0xba>
    10f4:	55 95       	asr	r21
    10f6:	47 95       	ror	r20
    10f8:	8a 95       	dec	r24
    10fa:	e2 f7       	brpl	.-8      	; 0x10f4 <DIO_enuGetPinValue+0xb6>
    10fc:	ca 01       	movw	r24, r20
    10fe:	81 70       	andi	r24, 0x01	; 1
    1100:	ec 81       	ldd	r30, Y+4	; 0x04
    1102:	fd 81       	ldd	r31, Y+5	; 0x05
    1104:	80 83       	st	Z, r24
    1106:	27 c0       	rjmp	.+78     	; 0x1156 <DIO_enuGetPinValue+0x118>

				break;
			case DIO_u8GROUP_C:

				*Copy_pu8Value = ( (PINC >> Copy_u8PinID ) & DIO_MASK_BIT);
    1108:	e3 e3       	ldi	r30, 0x33	; 51
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	28 2f       	mov	r18, r24
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	8b 81       	ldd	r24, Y+3	; 0x03
    1114:	88 2f       	mov	r24, r24
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	a9 01       	movw	r20, r18
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <DIO_enuGetPinValue+0xe2>
    111c:	55 95       	asr	r21
    111e:	47 95       	ror	r20
    1120:	8a 95       	dec	r24
    1122:	e2 f7       	brpl	.-8      	; 0x111c <DIO_enuGetPinValue+0xde>
    1124:	ca 01       	movw	r24, r20
    1126:	81 70       	andi	r24, 0x01	; 1
    1128:	ec 81       	ldd	r30, Y+4	; 0x04
    112a:	fd 81       	ldd	r31, Y+5	; 0x05
    112c:	80 83       	st	Z, r24
    112e:	13 c0       	rjmp	.+38     	; 0x1156 <DIO_enuGetPinValue+0x118>

				break;
			case DIO_u8GROUP_D:

				*Copy_pu8Value = ( (PIND >> Copy_u8PinID ) & DIO_MASK_BIT);
    1130:	e0 e3       	ldi	r30, 0x30	; 48
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
    113c:	88 2f       	mov	r24, r24
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	a9 01       	movw	r20, r18
    1142:	02 c0       	rjmp	.+4      	; 0x1148 <DIO_enuGetPinValue+0x10a>
    1144:	55 95       	asr	r21
    1146:	47 95       	ror	r20
    1148:	8a 95       	dec	r24
    114a:	e2 f7       	brpl	.-8      	; 0x1144 <DIO_enuGetPinValue+0x106>
    114c:	ca 01       	movw	r24, r20
    114e:	81 70       	andi	r24, 0x01	; 1
    1150:	ec 81       	ldd	r30, Y+4	; 0x04
    1152:	fd 81       	ldd	r31, Y+5	; 0x05
    1154:	80 83       	st	Z, r24

				break;
			}
			Local_enuErrorState = ES_OK;
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	89 83       	std	Y+1, r24	; 0x01
    115a:	05 c0       	rjmp	.+10     	; 0x1166 <DIO_enuGetPinValue+0x128>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    115c:	82 e0       	ldi	r24, 0x02	; 2
    115e:	89 83       	std	Y+1, r24	; 0x01
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <DIO_enuGetPinValue+0x128>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1162:	83 e0       	ldi	r24, 0x03	; 3
    1164:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1166:	89 81       	ldd	r24, Y+1	; 0x01
}
    1168:	27 96       	adiw	r28, 0x07	; 7
    116a:	0f b6       	in	r0, 0x3f	; 63
    116c:	f8 94       	cli
    116e:	de bf       	out	0x3e, r29	; 62
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	cd bf       	out	0x3d, r28	; 61
    1174:	cf 91       	pop	r28
    1176:	df 91       	pop	r29
    1178:	08 95       	ret

0000117a <AD_Init>:
#include "../MCAL/stdTypes.h"
#include "ADC_Private.h"
#include "../MCAL/AVR_REG.h"
#include "ADC_Config.h"
void AD_Init(u8 Vref , u8 Prescaler)
{
    117a:	df 93       	push	r29
    117c:	cf 93       	push	r28
    117e:	00 d0       	rcall	.+0      	; 0x1180 <AD_Init+0x6>
    1180:	00 d0       	rcall	.+0      	; 0x1182 <AD_Init+0x8>
    1182:	00 d0       	rcall	.+0      	; 0x1184 <AD_Init+0xa>
    1184:	cd b7       	in	r28, 0x3d	; 61
    1186:	de b7       	in	r29, 0x3e	; 62
    1188:	89 83       	std	Y+1, r24	; 0x01
    118a:	6a 83       	std	Y+2, r22	; 0x02
switch(Prescaler)
    118c:	8a 81       	ldd	r24, Y+2	; 0x02
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	3e 83       	std	Y+6, r19	; 0x06
    1194:	2d 83       	std	Y+5, r18	; 0x05
    1196:	8d 81       	ldd	r24, Y+5	; 0x05
    1198:	9e 81       	ldd	r25, Y+6	; 0x06
    119a:	80 31       	cpi	r24, 0x10	; 16
    119c:	91 05       	cpc	r25, r1
    119e:	09 f4       	brne	.+2      	; 0x11a2 <AD_Init+0x28>
    11a0:	6b c0       	rjmp	.+214    	; 0x1278 <AD_Init+0xfe>
    11a2:	2d 81       	ldd	r18, Y+5	; 0x05
    11a4:	3e 81       	ldd	r19, Y+6	; 0x06
    11a6:	21 31       	cpi	r18, 0x11	; 17
    11a8:	31 05       	cpc	r19, r1
    11aa:	8c f4       	brge	.+34     	; 0x11ce <AD_Init+0x54>
    11ac:	8d 81       	ldd	r24, Y+5	; 0x05
    11ae:	9e 81       	ldd	r25, Y+6	; 0x06
    11b0:	84 30       	cpi	r24, 0x04	; 4
    11b2:	91 05       	cpc	r25, r1
    11b4:	a9 f1       	breq	.+106    	; 0x1220 <AD_Init+0xa6>
    11b6:	2d 81       	ldd	r18, Y+5	; 0x05
    11b8:	3e 81       	ldd	r19, Y+6	; 0x06
    11ba:	28 30       	cpi	r18, 0x08	; 8
    11bc:	31 05       	cpc	r19, r1
    11be:	09 f4       	brne	.+2      	; 0x11c2 <AD_Init+0x48>
    11c0:	45 c0       	rjmp	.+138    	; 0x124c <AD_Init+0xd2>
    11c2:	8d 81       	ldd	r24, Y+5	; 0x05
    11c4:	9e 81       	ldd	r25, Y+6	; 0x06
    11c6:	82 30       	cpi	r24, 0x02	; 2
    11c8:	91 05       	cpc	r25, r1
    11ca:	a1 f0       	breq	.+40     	; 0x11f4 <AD_Init+0x7a>
    11cc:	ac c0       	rjmp	.+344    	; 0x1326 <AD_Init+0x1ac>
    11ce:	2d 81       	ldd	r18, Y+5	; 0x05
    11d0:	3e 81       	ldd	r19, Y+6	; 0x06
    11d2:	20 34       	cpi	r18, 0x40	; 64
    11d4:	31 05       	cpc	r19, r1
    11d6:	09 f4       	brne	.+2      	; 0x11da <AD_Init+0x60>
    11d8:	7b c0       	rjmp	.+246    	; 0x12d0 <AD_Init+0x156>
    11da:	8d 81       	ldd	r24, Y+5	; 0x05
    11dc:	9e 81       	ldd	r25, Y+6	; 0x06
    11de:	80 38       	cpi	r24, 0x80	; 128
    11e0:	91 05       	cpc	r25, r1
    11e2:	09 f4       	brne	.+2      	; 0x11e6 <AD_Init+0x6c>
    11e4:	8b c0       	rjmp	.+278    	; 0x12fc <AD_Init+0x182>
    11e6:	2d 81       	ldd	r18, Y+5	; 0x05
    11e8:	3e 81       	ldd	r19, Y+6	; 0x06
    11ea:	20 32       	cpi	r18, 0x20	; 32
    11ec:	31 05       	cpc	r19, r1
    11ee:	09 f4       	brne	.+2      	; 0x11f2 <AD_Init+0x78>
    11f0:	59 c0       	rjmp	.+178    	; 0x12a4 <AD_Init+0x12a>
    11f2:	99 c0       	rjmp	.+306    	; 0x1326 <AD_Init+0x1ac>
{
   case 2:
	ADCSRA |= (1<<ADPS0);
    11f4:	a6 e2       	ldi	r26, 0x26	; 38
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	e6 e2       	ldi	r30, 0x26	; 38
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	81 60       	ori	r24, 0x01	; 1
    1200:	8c 93       	st	X, r24
	ADCSRA &=~(1<<ADPS1);
    1202:	a6 e2       	ldi	r26, 0x26	; 38
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	e6 e2       	ldi	r30, 0x26	; 38
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	8d 7f       	andi	r24, 0xFD	; 253
    120e:	8c 93       	st	X, r24
	ADCSRA &=~(1<<ADPS2);
    1210:	a6 e2       	ldi	r26, 0x26	; 38
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	e6 e2       	ldi	r30, 0x26	; 38
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	8b 7f       	andi	r24, 0xFB	; 251
    121c:	8c 93       	st	X, r24
    121e:	83 c0       	rjmp	.+262    	; 0x1326 <AD_Init+0x1ac>
	break;
   case 4:
	ADCSRA &=~(1<<ADPS0);
    1220:	a6 e2       	ldi	r26, 0x26	; 38
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	e6 e2       	ldi	r30, 0x26	; 38
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	8e 7f       	andi	r24, 0xFE	; 254
    122c:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADPS1);
    122e:	a6 e2       	ldi	r26, 0x26	; 38
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	e6 e2       	ldi	r30, 0x26	; 38
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	82 60       	ori	r24, 0x02	; 2
    123a:	8c 93       	st	X, r24
	ADCSRA &=~(1<<ADPS2);
    123c:	a6 e2       	ldi	r26, 0x26	; 38
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	e6 e2       	ldi	r30, 0x26	; 38
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	8b 7f       	andi	r24, 0xFB	; 251
    1248:	8c 93       	st	X, r24
    124a:	6d c0       	rjmp	.+218    	; 0x1326 <AD_Init+0x1ac>
	break;
   case 8:
	ADCSRA |= (1<<ADPS0);
    124c:	a6 e2       	ldi	r26, 0x26	; 38
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	e6 e2       	ldi	r30, 0x26	; 38
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	81 60       	ori	r24, 0x01	; 1
    1258:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADPS1);
    125a:	a6 e2       	ldi	r26, 0x26	; 38
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	e6 e2       	ldi	r30, 0x26	; 38
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	82 60       	ori	r24, 0x02	; 2
    1266:	8c 93       	st	X, r24
	ADCSRA &=~(1<<ADPS2);
    1268:	a6 e2       	ldi	r26, 0x26	; 38
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	e6 e2       	ldi	r30, 0x26	; 38
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	8b 7f       	andi	r24, 0xFB	; 251
    1274:	8c 93       	st	X, r24
    1276:	57 c0       	rjmp	.+174    	; 0x1326 <AD_Init+0x1ac>
	break;
   case 16:
	ADCSRA &=~(1<<ADPS0);
    1278:	a6 e2       	ldi	r26, 0x26	; 38
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e6 e2       	ldi	r30, 0x26	; 38
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	8e 7f       	andi	r24, 0xFE	; 254
    1284:	8c 93       	st	X, r24
	ADCSRA &=~(1<<ADPS1);
    1286:	a6 e2       	ldi	r26, 0x26	; 38
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	e6 e2       	ldi	r30, 0x26	; 38
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	8d 7f       	andi	r24, 0xFD	; 253
    1292:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADPS2);
    1294:	a6 e2       	ldi	r26, 0x26	; 38
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	e6 e2       	ldi	r30, 0x26	; 38
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	84 60       	ori	r24, 0x04	; 4
    12a0:	8c 93       	st	X, r24
    12a2:	41 c0       	rjmp	.+130    	; 0x1326 <AD_Init+0x1ac>
	break;
   case 32:
	ADCSRA |= (1<<ADPS0);
    12a4:	a6 e2       	ldi	r26, 0x26	; 38
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	e6 e2       	ldi	r30, 0x26	; 38
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	81 60       	ori	r24, 0x01	; 1
    12b0:	8c 93       	st	X, r24
	ADCSRA &=~(1<<ADPS1);
    12b2:	a6 e2       	ldi	r26, 0x26	; 38
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	e6 e2       	ldi	r30, 0x26	; 38
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	8d 7f       	andi	r24, 0xFD	; 253
    12be:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADPS2);
    12c0:	a6 e2       	ldi	r26, 0x26	; 38
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	e6 e2       	ldi	r30, 0x26	; 38
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	84 60       	ori	r24, 0x04	; 4
    12cc:	8c 93       	st	X, r24
    12ce:	2b c0       	rjmp	.+86     	; 0x1326 <AD_Init+0x1ac>
	break;
   case 64:
	ADCSRA &=~(1<<ADPS0);
    12d0:	a6 e2       	ldi	r26, 0x26	; 38
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	e6 e2       	ldi	r30, 0x26	; 38
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	8e 7f       	andi	r24, 0xFE	; 254
    12dc:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADPS1);
    12de:	a6 e2       	ldi	r26, 0x26	; 38
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	e6 e2       	ldi	r30, 0x26	; 38
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	82 60       	ori	r24, 0x02	; 2
    12ea:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADPS2);
    12ec:	a6 e2       	ldi	r26, 0x26	; 38
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	e6 e2       	ldi	r30, 0x26	; 38
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	84 60       	ori	r24, 0x04	; 4
    12f8:	8c 93       	st	X, r24
    12fa:	15 c0       	rjmp	.+42     	; 0x1326 <AD_Init+0x1ac>
	break;
   case 128:
	ADCSRA |= (1<<ADPS0);
    12fc:	a6 e2       	ldi	r26, 0x26	; 38
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	e6 e2       	ldi	r30, 0x26	; 38
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	81 60       	ori	r24, 0x01	; 1
    1308:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADPS1);
    130a:	a6 e2       	ldi	r26, 0x26	; 38
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	e6 e2       	ldi	r30, 0x26	; 38
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	82 60       	ori	r24, 0x02	; 2
    1316:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADPS2);
    1318:	a6 e2       	ldi	r26, 0x26	; 38
    131a:	b0 e0       	ldi	r27, 0x00	; 0
    131c:	e6 e2       	ldi	r30, 0x26	; 38
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	84 60       	ori	r24, 0x04	; 4
    1324:	8c 93       	st	X, r24
	break;
}
switch(Vref)
    1326:	89 81       	ldd	r24, Y+1	; 0x01
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	3c 83       	std	Y+4, r19	; 0x04
    132e:	2b 83       	std	Y+3, r18	; 0x03
    1330:	8b 81       	ldd	r24, Y+3	; 0x03
    1332:	9c 81       	ldd	r25, Y+4	; 0x04
    1334:	81 30       	cpi	r24, 0x01	; 1
    1336:	91 05       	cpc	r25, r1
    1338:	51 f0       	breq	.+20     	; 0x134e <AD_Init+0x1d4>
    133a:	2b 81       	ldd	r18, Y+3	; 0x03
    133c:	3c 81       	ldd	r19, Y+4	; 0x04
    133e:	22 30       	cpi	r18, 0x02	; 2
    1340:	31 05       	cpc	r19, r1
    1342:	19 f1       	breq	.+70     	; 0x138a <AD_Init+0x210>
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
    1346:	9c 81       	ldd	r25, Y+4	; 0x04
    1348:	00 97       	sbiw	r24, 0x00	; 0
    134a:	81 f0       	breq	.+32     	; 0x136c <AD_Init+0x1f2>
    134c:	2c c0       	rjmp	.+88     	; 0x13a6 <AD_Init+0x22c>
{
   case VREF :
	   ADMUX &=~(1<<REFS0);
    134e:	a7 e2       	ldi	r26, 0x27	; 39
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	e7 e2       	ldi	r30, 0x27	; 39
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	8f 7b       	andi	r24, 0xBF	; 191
    135a:	8c 93       	st	X, r24
	   ADMUX &=~(1<<REFS1);
    135c:	a7 e2       	ldi	r26, 0x27	; 39
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	e7 e2       	ldi	r30, 0x27	; 39
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	8f 77       	andi	r24, 0x7F	; 127
    1368:	8c 93       	st	X, r24
    136a:	1d c0       	rjmp	.+58     	; 0x13a6 <AD_Init+0x22c>
	   break;
   case AVCC :
 	   ADMUX |= (1<<REFS0);
    136c:	a7 e2       	ldi	r26, 0x27	; 39
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	e7 e2       	ldi	r30, 0x27	; 39
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	80 64       	ori	r24, 0x40	; 64
    1378:	8c 93       	st	X, r24
 	   ADMUX &=~(1<<REFS1);
    137a:	a7 e2       	ldi	r26, 0x27	; 39
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	e7 e2       	ldi	r30, 0x27	; 39
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	8f 77       	andi	r24, 0x7F	; 127
    1386:	8c 93       	st	X, r24
    1388:	0e c0       	rjmp	.+28     	; 0x13a6 <AD_Init+0x22c>
 	   break;
   case INTV :
	   ADMUX |= (1<<REFS0);
    138a:	a7 e2       	ldi	r26, 0x27	; 39
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	e7 e2       	ldi	r30, 0x27	; 39
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	80 64       	ori	r24, 0x40	; 64
    1396:	8c 93       	st	X, r24
	   ADMUX |= (1<<REFS1);
    1398:	a7 e2       	ldi	r26, 0x27	; 39
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	e7 e2       	ldi	r30, 0x27	; 39
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	80 68       	ori	r24, 0x80	; 128
    13a4:	8c 93       	st	X, r24
 	   break;
}

   ADCSRA |= (1<<ADEN);
    13a6:	a6 e2       	ldi	r26, 0x26	; 38
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	e6 e2       	ldi	r30, 0x26	; 38
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	80 68       	ori	r24, 0x80	; 128
    13b2:	8c 93       	st	X, r24
}
    13b4:	26 96       	adiw	r28, 0x06	; 6
    13b6:	0f b6       	in	r0, 0x3f	; 63
    13b8:	f8 94       	cli
    13ba:	de bf       	out	0x3e, r29	; 62
    13bc:	0f be       	out	0x3f, r0	; 63
    13be:	cd bf       	out	0x3d, r28	; 61
    13c0:	cf 91       	pop	r28
    13c2:	df 91       	pop	r29
    13c4:	08 95       	ret

000013c6 <AD_Start_Conversion>:
void AD_Start_Conversion()
{
    13c6:	df 93       	push	r29
    13c8:	cf 93       	push	r28
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
	ADCSRA |= (1<<ADSC);
    13ce:	a6 e2       	ldi	r26, 0x26	; 38
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	e6 e2       	ldi	r30, 0x26	; 38
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	80 64       	ori	r24, 0x40	; 64
    13da:	8c 93       	st	X, r24
}
    13dc:	cf 91       	pop	r28
    13de:	df 91       	pop	r29
    13e0:	08 95       	ret

000013e2 <Auto_Trigger_Enable>:
void Auto_Trigger_Enable(u8 Mode)
{
    13e2:	df 93       	push	r29
    13e4:	cf 93       	push	r28
    13e6:	0f 92       	push	r0
    13e8:	cd b7       	in	r28, 0x3d	; 61
    13ea:	de b7       	in	r29, 0x3e	; 62
    13ec:	89 83       	std	Y+1, r24	; 0x01
	if(Mode<=7)
    13ee:	89 81       	ldd	r24, Y+1	; 0x01
    13f0:	88 30       	cpi	r24, 0x08	; 8
    13f2:	d0 f4       	brcc	.+52     	; 0x1428 <Auto_Trigger_Enable+0x46>
	{
	SFIOR &= 0x1F;
    13f4:	a0 e5       	ldi	r26, 0x50	; 80
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	e0 e5       	ldi	r30, 0x50	; 80
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	8f 71       	andi	r24, 0x1F	; 31
    1400:	8c 93       	st	X, r24
	SFIOR |= (Mode<<5);
    1402:	a0 e5       	ldi	r26, 0x50	; 80
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	e0 e5       	ldi	r30, 0x50	; 80
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	28 2f       	mov	r18, r24
    140e:	89 81       	ldd	r24, Y+1	; 0x01
    1410:	88 2f       	mov	r24, r24
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	88 0f       	add	r24, r24
    1416:	99 1f       	adc	r25, r25
    1418:	82 95       	swap	r24
    141a:	92 95       	swap	r25
    141c:	90 7f       	andi	r25, 0xF0	; 240
    141e:	98 27       	eor	r25, r24
    1420:	80 7f       	andi	r24, 0xF0	; 240
    1422:	98 27       	eor	r25, r24
    1424:	82 2b       	or	r24, r18
    1426:	8c 93       	st	X, r24
	}
	ADCSRA |= (1<<ADATE);
    1428:	a6 e2       	ldi	r26, 0x26	; 38
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	e6 e2       	ldi	r30, 0x26	; 38
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	80 62       	ori	r24, 0x20	; 32
    1434:	8c 93       	st	X, r24
}
    1436:	0f 90       	pop	r0
    1438:	cf 91       	pop	r28
    143a:	df 91       	pop	r29
    143c:	08 95       	ret

0000143e <Analog_Select_Channel>:
void Analog_Select_Channel(u8 Channel)
{
    143e:	df 93       	push	r29
    1440:	cf 93       	push	r28
    1442:	0f 92       	push	r0
    1444:	cd b7       	in	r28, 0x3d	; 61
    1446:	de b7       	in	r29, 0x3e	; 62
    1448:	89 83       	std	Y+1, r24	; 0x01
	if (Channel<=31)
    144a:	89 81       	ldd	r24, Y+1	; 0x01
    144c:	80 32       	cpi	r24, 0x20	; 32
    144e:	78 f4       	brcc	.+30     	; 0x146e <Analog_Select_Channel+0x30>
	{
		ADMUX &= ~0x1F;
    1450:	a7 e2       	ldi	r26, 0x27	; 39
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	e7 e2       	ldi	r30, 0x27	; 39
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	80 7e       	andi	r24, 0xE0	; 224
    145c:	8c 93       	st	X, r24
		ADMUX |= Channel;
    145e:	a7 e2       	ldi	r26, 0x27	; 39
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	e7 e2       	ldi	r30, 0x27	; 39
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	90 81       	ld	r25, Z
    1468:	89 81       	ldd	r24, Y+1	; 0x01
    146a:	89 2b       	or	r24, r25
    146c:	8c 93       	st	X, r24
	}

}
    146e:	0f 90       	pop	r0
    1470:	cf 91       	pop	r28
    1472:	df 91       	pop	r29
    1474:	08 95       	ret

00001476 <AD_Read_High>:
u8 AD_Read_High(u8 Direction)
{
    1476:	df 93       	push	r29
    1478:	cf 93       	push	r28
    147a:	00 d0       	rcall	.+0      	; 0x147c <AD_Read_High+0x6>
    147c:	00 d0       	rcall	.+0      	; 0x147e <AD_Read_High+0x8>
    147e:	cd b7       	in	r28, 0x3d	; 61
    1480:	de b7       	in	r29, 0x3e	; 62
    1482:	8a 83       	std	Y+2, r24	; 0x02
	u8 Reading;
 switch(Direction)
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	28 2f       	mov	r18, r24
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	3c 83       	std	Y+4, r19	; 0x04
    148c:	2b 83       	std	Y+3, r18	; 0x03
    148e:	8b 81       	ldd	r24, Y+3	; 0x03
    1490:	9c 81       	ldd	r25, Y+4	; 0x04
    1492:	00 97       	sbiw	r24, 0x00	; 0
    1494:	f1 f0       	breq	.+60     	; 0x14d2 <AD_Read_High+0x5c>
    1496:	2b 81       	ldd	r18, Y+3	; 0x03
    1498:	3c 81       	ldd	r19, Y+4	; 0x04
    149a:	21 30       	cpi	r18, 0x01	; 1
    149c:	31 05       	cpc	r19, r1
    149e:	21 f5       	brne	.+72     	; 0x14e8 <AD_Read_High+0x72>
   {
 case RIGHT_READING:
	 Reading =(ADCL>>2);
    14a0:	e4 e2       	ldi	r30, 0x24	; 36
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	86 95       	lsr	r24
    14a8:	86 95       	lsr	r24
    14aa:	89 83       	std	Y+1, r24	; 0x01
	 Reading|=(ADCH<<6);
    14ac:	e5 e2       	ldi	r30, 0x25	; 37
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	88 2f       	mov	r24, r24
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	00 24       	eor	r0, r0
    14b8:	96 95       	lsr	r25
    14ba:	87 95       	ror	r24
    14bc:	07 94       	ror	r0
    14be:	96 95       	lsr	r25
    14c0:	87 95       	ror	r24
    14c2:	07 94       	ror	r0
    14c4:	98 2f       	mov	r25, r24
    14c6:	80 2d       	mov	r24, r0
    14c8:	98 2f       	mov	r25, r24
    14ca:	89 81       	ldd	r24, Y+1	; 0x01
    14cc:	89 2b       	or	r24, r25
    14ce:	89 83       	std	Y+1, r24	; 0x01
    14d0:	0b c0       	rjmp	.+22     	; 0x14e8 <AD_Read_High+0x72>
	 break;
 case LEFT_READING:
	 ADMUX |=(1<<ADLAR);
    14d2:	a7 e2       	ldi	r26, 0x27	; 39
    14d4:	b0 e0       	ldi	r27, 0x00	; 0
    14d6:	e7 e2       	ldi	r30, 0x27	; 39
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	80 62       	ori	r24, 0x20	; 32
    14de:	8c 93       	st	X, r24
	 Reading=ADCH;
    14e0:	e5 e2       	ldi	r30, 0x25	; 37
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	89 83       	std	Y+1, r24	; 0x01
	 break;
 default:
	  break;
   }
 return Reading;
    14e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    14ea:	0f 90       	pop	r0
    14ec:	0f 90       	pop	r0
    14ee:	0f 90       	pop	r0
    14f0:	0f 90       	pop	r0
    14f2:	cf 91       	pop	r28
    14f4:	df 91       	pop	r29
    14f6:	08 95       	ret

000014f8 <ADC_Polling>:
void ADC_Polling()
{
    14f8:	df 93       	push	r29
    14fa:	cf 93       	push	r28
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
	while (!(ADCSRA<<4)&1);
    1500:	e6 e2       	ldi	r30, 0x26	; 38
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	80 81       	ld	r24, Z
    1506:	88 2f       	mov	r24, r24
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	82 95       	swap	r24
    150c:	92 95       	swap	r25
    150e:	90 7f       	andi	r25, 0xF0	; 240
    1510:	98 27       	eor	r25, r24
    1512:	80 7f       	andi	r24, 0xF0	; 240
    1514:	98 27       	eor	r25, r24
    1516:	00 97       	sbiw	r24, 0x00	; 0
    1518:	99 f3       	breq	.-26     	; 0x1500 <ADC_Polling+0x8>
		  ADCSRA |=(1<<4);
    151a:	a6 e2       	ldi	r26, 0x26	; 38
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	e6 e2       	ldi	r30, 0x26	; 38
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	80 61       	ori	r24, 0x10	; 16
    1526:	8c 93       	st	X, r24
}
    1528:	cf 91       	pop	r28
    152a:	df 91       	pop	r29
    152c:	08 95       	ret

0000152e <Keypad_enuInit>:

		}

}*/
ES_t Keypad_enuInit(void)
{
    152e:	df 93       	push	r29
    1530:	cf 93       	push	r28
    1532:	0f 92       	push	r0
    1534:	cd b7       	in	r28, 0x3d	; 61
    1536:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1538:	19 82       	std	Y+1, r1	; 0x01

	DIO_enuSetPinDirection(C1_PORT , C1_PIN , DIO_u8OUTPUT);
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	64 e0       	ldi	r22, 0x04	; 4
    153e:	41 e0       	ldi	r20, 0x01	; 1
    1540:	0e 94 b6 05 	call	0xb6c	; 0xb6c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(C2_PORT , C2_PIN , DIO_u8OUTPUT);
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	65 e0       	ldi	r22, 0x05	; 5
    1548:	41 e0       	ldi	r20, 0x01	; 1
    154a:	0e 94 b6 05 	call	0xb6c	; 0xb6c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(C3_PORT , C3_PIN , DIO_u8OUTPUT);
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	66 e0       	ldi	r22, 0x06	; 6
    1552:	41 e0       	ldi	r20, 0x01	; 1
    1554:	0e 94 b6 05 	call	0xb6c	; 0xb6c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(C4_PORT , C4_PIN , DIO_u8OUTPUT);
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	67 e0       	ldi	r22, 0x07	; 7
    155c:	41 e0       	ldi	r20, 0x01	; 1
    155e:	0e 94 b6 05 	call	0xb6c	; 0xb6c <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(R1_PORT , R1_PIN , DIO_u8INPUT);
    1562:	82 e0       	ldi	r24, 0x02	; 2
    1564:	63 e0       	ldi	r22, 0x03	; 3
    1566:	40 e0       	ldi	r20, 0x00	; 0
    1568:	0e 94 b6 05 	call	0xb6c	; 0xb6c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(R2_PORT , R2_PIN , DIO_u8INPUT);
    156c:	82 e0       	ldi	r24, 0x02	; 2
    156e:	64 e0       	ldi	r22, 0x04	; 4
    1570:	40 e0       	ldi	r20, 0x00	; 0
    1572:	0e 94 b6 05 	call	0xb6c	; 0xb6c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(R3_PORT , R3_PIN , DIO_u8INPUT);
    1576:	82 e0       	ldi	r24, 0x02	; 2
    1578:	65 e0       	ldi	r22, 0x05	; 5
    157a:	40 e0       	ldi	r20, 0x00	; 0
    157c:	0e 94 b6 05 	call	0xb6c	; 0xb6c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(R4_PORT , R4_PIN , DIO_u8INPUT);
    1580:	82 e0       	ldi	r24, 0x02	; 2
    1582:	66 e0       	ldi	r22, 0x06	; 6
    1584:	40 e0       	ldi	r20, 0x00	; 0
    1586:	0e 94 b6 05 	call	0xb6c	; 0xb6c <DIO_enuSetPinDirection>

	DIO_enuSetPinValue(C1_PORT , C1_PIN , DIO_u8HIGH);
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	64 e0       	ldi	r22, 0x04	; 4
    158e:	41 e0       	ldi	r20, 0x01	; 1
    1590:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C2_PORT , C2_PIN , DIO_u8HIGH);
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	65 e0       	ldi	r22, 0x05	; 5
    1598:	41 e0       	ldi	r20, 0x01	; 1
    159a:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C3_PORT , C3_PIN , DIO_u8HIGH);
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	66 e0       	ldi	r22, 0x06	; 6
    15a2:	41 e0       	ldi	r20, 0x01	; 1
    15a4:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C4_PORT , C4_PIN , DIO_u8HIGH);
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	67 e0       	ldi	r22, 0x07	; 7
    15ac:	41 e0       	ldi	r20, 0x01	; 1
    15ae:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(R1_PORT , R1_PIN , DIO_u8PULL_UP);
    15b2:	82 e0       	ldi	r24, 0x02	; 2
    15b4:	63 e0       	ldi	r22, 0x03	; 3
    15b6:	41 e0       	ldi	r20, 0x01	; 1
    15b8:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R2_PORT , R2_PIN , DIO_u8PULL_UP);
    15bc:	82 e0       	ldi	r24, 0x02	; 2
    15be:	64 e0       	ldi	r22, 0x04	; 4
    15c0:	41 e0       	ldi	r20, 0x01	; 1
    15c2:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R3_PORT , R3_PIN , DIO_u8PULL_UP);
    15c6:	82 e0       	ldi	r24, 0x02	; 2
    15c8:	65 e0       	ldi	r22, 0x05	; 5
    15ca:	41 e0       	ldi	r20, 0x01	; 1
    15cc:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R4_PORT , R4_PIN , DIO_u8PULL_UP);
    15d0:	82 e0       	ldi	r24, 0x02	; 2
    15d2:	66 e0       	ldi	r22, 0x06	; 6
    15d4:	41 e0       	ldi	r20, 0x01	; 1
    15d6:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_enuSetPinValue>

	return Local_enuErrorState;
    15da:	89 81       	ldd	r24, Y+1	; 0x01
}
    15dc:	0f 90       	pop	r0
    15de:	cf 91       	pop	r28
    15e0:	df 91       	pop	r29
    15e2:	08 95       	ret

000015e4 <Keypad_enuGetPressedKey>:

ES_t Keypad_enuGetPressedKey(u8 * Copy_pu8KeyValue)
{
    15e4:	df 93       	push	r29
    15e6:	cf 93       	push	r28
    15e8:	cd b7       	in	r28, 0x3d	; 61
    15ea:	de b7       	in	r29, 0x3e	; 62
    15ec:	ea 97       	sbiw	r28, 0x3a	; 58
    15ee:	0f b6       	in	r0, 0x3f	; 63
    15f0:	f8 94       	cli
    15f2:	de bf       	out	0x3e, r29	; 62
    15f4:	0f be       	out	0x3f, r0	; 63
    15f6:	cd bf       	out	0x3d, r28	; 61
    15f8:	9c ab       	std	Y+52, r25	; 0x34
    15fa:	8b ab       	std	Y+51, r24	; 0x33
	ES_t Local_enuErrorState = ES_NOK;
    15fc:	19 8a       	std	Y+17, r1	; 0x11

	u8 Local_Au8ColPorts [COL_NUM] = {C1_PORT,C2_PORT,C3_PORT,C4_PORT};
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	8a 8b       	std	Y+18, r24	; 0x12
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	8b 8b       	std	Y+19, r24	; 0x13
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	8c 8b       	std	Y+20, r24	; 0x14
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	8d 8b       	std	Y+21, r24	; 0x15
	u8 Local_Au8ColPins  [COL_NUM] = {C1_PIN, C2_PIN, C3_PIN, C4_PIN};
    160e:	84 e0       	ldi	r24, 0x04	; 4
    1610:	8e 8b       	std	Y+22, r24	; 0x16
    1612:	85 e0       	ldi	r24, 0x05	; 5
    1614:	8f 8b       	std	Y+23, r24	; 0x17
    1616:	86 e0       	ldi	r24, 0x06	; 6
    1618:	88 8f       	std	Y+24, r24	; 0x18
    161a:	87 e0       	ldi	r24, 0x07	; 7
    161c:	89 8f       	std	Y+25, r24	; 0x19

	u8 Local_Au8RowPorts [ROW_NUM] = {R1_PORT,R2_PORT,R3_PORT,R4_PORT};
    161e:	82 e0       	ldi	r24, 0x02	; 2
    1620:	8a 8f       	std	Y+26, r24	; 0x1a
    1622:	82 e0       	ldi	r24, 0x02	; 2
    1624:	8b 8f       	std	Y+27, r24	; 0x1b
    1626:	82 e0       	ldi	r24, 0x02	; 2
    1628:	8c 8f       	std	Y+28, r24	; 0x1c
    162a:	82 e0       	ldi	r24, 0x02	; 2
    162c:	8d 8f       	std	Y+29, r24	; 0x1d
	u8 Local_Au8RowPins  [ROW_NUM] = {R1_PIN, R2_PIN, R3_PIN, R4_PIN};
    162e:	83 e0       	ldi	r24, 0x03	; 3
    1630:	8e 8f       	std	Y+30, r24	; 0x1e
    1632:	84 e0       	ldi	r24, 0x04	; 4
    1634:	8f 8f       	std	Y+31, r24	; 0x1f
    1636:	85 e0       	ldi	r24, 0x05	; 5
    1638:	88 a3       	std	Y+32, r24	; 0x20
    163a:	86 e0       	ldi	r24, 0x06	; 6
    163c:	89 a3       	std	Y+33, r24	; 0x21

	u8 Local_u8ColIter , Local_u8RowIter , Local_u8PinValue;

	for (Local_u8ColIter=0; Local_u8ColIter < COL_NUM ; Local_u8ColIter++ )
    163e:	18 8a       	std	Y+16, r1	; 0x10
    1640:	3f c1       	rjmp	.+638    	; 0x18c0 <Keypad_enuGetPressedKey+0x2dc>
	{
		DIO_enuSetPinValue(Local_Au8ColPorts[Local_u8ColIter], Local_Au8ColPins[Local_u8ColIter], DIO_u8LOW);
    1642:	88 89       	ldd	r24, Y+16	; 0x10
    1644:	28 2f       	mov	r18, r24
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	ce 01       	movw	r24, r28
    164a:	42 96       	adiw	r24, 0x12	; 18
    164c:	fc 01       	movw	r30, r24
    164e:	e2 0f       	add	r30, r18
    1650:	f3 1f       	adc	r31, r19
    1652:	40 81       	ld	r20, Z
    1654:	88 89       	ldd	r24, Y+16	; 0x10
    1656:	28 2f       	mov	r18, r24
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	ce 01       	movw	r24, r28
    165c:	46 96       	adiw	r24, 0x16	; 22
    165e:	fc 01       	movw	r30, r24
    1660:	e2 0f       	add	r30, r18
    1662:	f3 1f       	adc	r31, r19
    1664:	90 81       	ld	r25, Z
    1666:	84 2f       	mov	r24, r20
    1668:	69 2f       	mov	r22, r25
    166a:	40 e0       	ldi	r20, 0x00	; 0
    166c:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_enuSetPinValue>
		for (Local_u8RowIter=0; Local_u8RowIter < ROW_NUM ; Local_u8RowIter++)
    1670:	1f 86       	std	Y+15, r1	; 0x0f
    1672:	08 c1       	rjmp	.+528    	; 0x1884 <Keypad_enuGetPressedKey+0x2a0>
		{
			DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);
    1674:	8f 85       	ldd	r24, Y+15	; 0x0f
    1676:	28 2f       	mov	r18, r24
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	ce 01       	movw	r24, r28
    167c:	4a 96       	adiw	r24, 0x1a	; 26
    167e:	fc 01       	movw	r30, r24
    1680:	e2 0f       	add	r30, r18
    1682:	f3 1f       	adc	r31, r19
    1684:	40 81       	ld	r20, Z
    1686:	8f 85       	ldd	r24, Y+15	; 0x0f
    1688:	28 2f       	mov	r18, r24
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	ce 01       	movw	r24, r28
    168e:	4e 96       	adiw	r24, 0x1e	; 30
    1690:	fc 01       	movw	r30, r24
    1692:	e2 0f       	add	r30, r18
    1694:	f3 1f       	adc	r31, r19
    1696:	90 81       	ld	r25, Z
    1698:	9e 01       	movw	r18, r28
    169a:	2e 5d       	subi	r18, 0xDE	; 222
    169c:	3f 4f       	sbci	r19, 0xFF	; 255
    169e:	84 2f       	mov	r24, r20
    16a0:	69 2f       	mov	r22, r25
    16a2:	a9 01       	movw	r20, r18
    16a4:	0e 94 1f 08 	call	0x103e	; 0x103e <DIO_enuGetPinValue>
			if (! Local_u8PinValue)
    16a8:	8a a1       	ldd	r24, Y+34	; 0x22
    16aa:	88 23       	and	r24, r24
    16ac:	09 f0       	breq	.+2      	; 0x16b0 <Keypad_enuGetPressedKey+0xcc>
    16ae:	e7 c0       	rjmp	.+462    	; 0x187e <Keypad_enuGetPressedKey+0x29a>
    16b0:	80 e0       	ldi	r24, 0x00	; 0
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	a0 e2       	ldi	r26, 0x20	; 32
    16b6:	b1 e4       	ldi	r27, 0x41	; 65
    16b8:	8b 87       	std	Y+11, r24	; 0x0b
    16ba:	9c 87       	std	Y+12, r25	; 0x0c
    16bc:	ad 87       	std	Y+13, r26	; 0x0d
    16be:	be 87       	std	Y+14, r27	; 0x0e
    16c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    16c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    16c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    16c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	4a e7       	ldi	r20, 0x7A	; 122
    16ce:	55 e4       	ldi	r21, 0x45	; 69
    16d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16d4:	dc 01       	movw	r26, r24
    16d6:	cb 01       	movw	r24, r22
    16d8:	8f 83       	std	Y+7, r24	; 0x07
    16da:	98 87       	std	Y+8, r25	; 0x08
    16dc:	a9 87       	std	Y+9, r26	; 0x09
    16de:	ba 87       	std	Y+10, r27	; 0x0a
    16e0:	6f 81       	ldd	r22, Y+7	; 0x07
    16e2:	78 85       	ldd	r23, Y+8	; 0x08
    16e4:	89 85       	ldd	r24, Y+9	; 0x09
    16e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	40 e8       	ldi	r20, 0x80	; 128
    16ee:	5f e3       	ldi	r21, 0x3F	; 63
    16f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16f4:	88 23       	and	r24, r24
    16f6:	2c f4       	brge	.+10     	; 0x1702 <Keypad_enuGetPressedKey+0x11e>
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	9e 83       	std	Y+6, r25	; 0x06
    16fe:	8d 83       	std	Y+5, r24	; 0x05
    1700:	3f c0       	rjmp	.+126    	; 0x1780 <Keypad_enuGetPressedKey+0x19c>
    1702:	6f 81       	ldd	r22, Y+7	; 0x07
    1704:	78 85       	ldd	r23, Y+8	; 0x08
    1706:	89 85       	ldd	r24, Y+9	; 0x09
    1708:	9a 85       	ldd	r25, Y+10	; 0x0a
    170a:	20 e0       	ldi	r18, 0x00	; 0
    170c:	3f ef       	ldi	r19, 0xFF	; 255
    170e:	4f e7       	ldi	r20, 0x7F	; 127
    1710:	57 e4       	ldi	r21, 0x47	; 71
    1712:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1716:	18 16       	cp	r1, r24
    1718:	4c f5       	brge	.+82     	; 0x176c <Keypad_enuGetPressedKey+0x188>
    171a:	6b 85       	ldd	r22, Y+11	; 0x0b
    171c:	7c 85       	ldd	r23, Y+12	; 0x0c
    171e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1720:	9e 85       	ldd	r25, Y+14	; 0x0e
    1722:	20 e0       	ldi	r18, 0x00	; 0
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	40 e2       	ldi	r20, 0x20	; 32
    1728:	51 e4       	ldi	r21, 0x41	; 65
    172a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    172e:	dc 01       	movw	r26, r24
    1730:	cb 01       	movw	r24, r22
    1732:	bc 01       	movw	r22, r24
    1734:	cd 01       	movw	r24, r26
    1736:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    173a:	dc 01       	movw	r26, r24
    173c:	cb 01       	movw	r24, r22
    173e:	9e 83       	std	Y+6, r25	; 0x06
    1740:	8d 83       	std	Y+5, r24	; 0x05
    1742:	0f c0       	rjmp	.+30     	; 0x1762 <Keypad_enuGetPressedKey+0x17e>
    1744:	80 e9       	ldi	r24, 0x90	; 144
    1746:	91 e0       	ldi	r25, 0x01	; 1
    1748:	9c 83       	std	Y+4, r25	; 0x04
    174a:	8b 83       	std	Y+3, r24	; 0x03
    174c:	8b 81       	ldd	r24, Y+3	; 0x03
    174e:	9c 81       	ldd	r25, Y+4	; 0x04
    1750:	01 97       	sbiw	r24, 0x01	; 1
    1752:	f1 f7       	brne	.-4      	; 0x1750 <Keypad_enuGetPressedKey+0x16c>
    1754:	9c 83       	std	Y+4, r25	; 0x04
    1756:	8b 83       	std	Y+3, r24	; 0x03
    1758:	8d 81       	ldd	r24, Y+5	; 0x05
    175a:	9e 81       	ldd	r25, Y+6	; 0x06
    175c:	01 97       	sbiw	r24, 0x01	; 1
    175e:	9e 83       	std	Y+6, r25	; 0x06
    1760:	8d 83       	std	Y+5, r24	; 0x05
    1762:	8d 81       	ldd	r24, Y+5	; 0x05
    1764:	9e 81       	ldd	r25, Y+6	; 0x06
    1766:	00 97       	sbiw	r24, 0x00	; 0
    1768:	69 f7       	brne	.-38     	; 0x1744 <Keypad_enuGetPressedKey+0x160>
    176a:	14 c0       	rjmp	.+40     	; 0x1794 <Keypad_enuGetPressedKey+0x1b0>
    176c:	6f 81       	ldd	r22, Y+7	; 0x07
    176e:	78 85       	ldd	r23, Y+8	; 0x08
    1770:	89 85       	ldd	r24, Y+9	; 0x09
    1772:	9a 85       	ldd	r25, Y+10	; 0x0a
    1774:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1778:	dc 01       	movw	r26, r24
    177a:	cb 01       	movw	r24, r22
    177c:	9e 83       	std	Y+6, r25	; 0x06
    177e:	8d 83       	std	Y+5, r24	; 0x05
    1780:	8d 81       	ldd	r24, Y+5	; 0x05
    1782:	9e 81       	ldd	r25, Y+6	; 0x06
    1784:	9a 83       	std	Y+2, r25	; 0x02
    1786:	89 83       	std	Y+1, r24	; 0x01
    1788:	89 81       	ldd	r24, Y+1	; 0x01
    178a:	9a 81       	ldd	r25, Y+2	; 0x02
    178c:	01 97       	sbiw	r24, 0x01	; 1
    178e:	f1 f7       	brne	.-4      	; 0x178c <Keypad_enuGetPressedKey+0x1a8>
    1790:	9a 83       	std	Y+2, r25	; 0x02
    1792:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(10);
				DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);
    1794:	8f 85       	ldd	r24, Y+15	; 0x0f
    1796:	28 2f       	mov	r18, r24
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	ce 01       	movw	r24, r28
    179c:	4a 96       	adiw	r24, 0x1a	; 26
    179e:	fc 01       	movw	r30, r24
    17a0:	e2 0f       	add	r30, r18
    17a2:	f3 1f       	adc	r31, r19
    17a4:	40 81       	ld	r20, Z
    17a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    17a8:	28 2f       	mov	r18, r24
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	ce 01       	movw	r24, r28
    17ae:	4e 96       	adiw	r24, 0x1e	; 30
    17b0:	fc 01       	movw	r30, r24
    17b2:	e2 0f       	add	r30, r18
    17b4:	f3 1f       	adc	r31, r19
    17b6:	90 81       	ld	r25, Z
    17b8:	9e 01       	movw	r18, r28
    17ba:	2e 5d       	subi	r18, 0xDE	; 222
    17bc:	3f 4f       	sbci	r19, 0xFF	; 255
    17be:	84 2f       	mov	r24, r20
    17c0:	69 2f       	mov	r22, r25
    17c2:	a9 01       	movw	r20, r18
    17c4:	0e 94 1f 08 	call	0x103e	; 0x103e <DIO_enuGetPinValue>
				if (! Local_u8PinValue)
    17c8:	8a a1       	ldd	r24, Y+34	; 0x22
    17ca:	88 23       	and	r24, r24
    17cc:	09 f0       	breq	.+2      	; 0x17d0 <Keypad_enuGetPressedKey+0x1ec>
    17ce:	57 c0       	rjmp	.+174    	; 0x187e <Keypad_enuGetPressedKey+0x29a>
    17d0:	1a c0       	rjmp	.+52     	; 0x1806 <Keypad_enuGetPressedKey+0x222>
				{
					while (! Local_u8PinValue)
						DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);
    17d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    17d4:	28 2f       	mov	r18, r24
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	ce 01       	movw	r24, r28
    17da:	4a 96       	adiw	r24, 0x1a	; 26
    17dc:	fc 01       	movw	r30, r24
    17de:	e2 0f       	add	r30, r18
    17e0:	f3 1f       	adc	r31, r19
    17e2:	40 81       	ld	r20, Z
    17e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    17e6:	28 2f       	mov	r18, r24
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	ce 01       	movw	r24, r28
    17ec:	4e 96       	adiw	r24, 0x1e	; 30
    17ee:	fc 01       	movw	r30, r24
    17f0:	e2 0f       	add	r30, r18
    17f2:	f3 1f       	adc	r31, r19
    17f4:	90 81       	ld	r25, Z
    17f6:	9e 01       	movw	r18, r28
    17f8:	2e 5d       	subi	r18, 0xDE	; 222
    17fa:	3f 4f       	sbci	r19, 0xFF	; 255
    17fc:	84 2f       	mov	r24, r20
    17fe:	69 2f       	mov	r22, r25
    1800:	a9 01       	movw	r20, r18
    1802:	0e 94 1f 08 	call	0x103e	; 0x103e <DIO_enuGetPinValue>
			{
				_delay_ms(10);
				DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);
				if (! Local_u8PinValue)
				{
					while (! Local_u8PinValue)
    1806:	8a a1       	ldd	r24, Y+34	; 0x22
    1808:	88 23       	and	r24, r24
    180a:	19 f3       	breq	.-58     	; 0x17d2 <Keypad_enuGetPressedKey+0x1ee>
						DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);

					u8 Local_Au8Values[ROW_NUM][COL_NUM] = KEYPAD_VALUES;
    180c:	ce 01       	movw	r24, r28
    180e:	83 96       	adiw	r24, 0x23	; 35
    1810:	9f ab       	std	Y+55, r25	; 0x37
    1812:	8e ab       	std	Y+54, r24	; 0x36
    1814:	ef e8       	ldi	r30, 0x8F	; 143
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	f9 af       	std	Y+57, r31	; 0x39
    181a:	e8 af       	std	Y+56, r30	; 0x38
    181c:	f0 e1       	ldi	r31, 0x10	; 16
    181e:	fa af       	std	Y+58, r31	; 0x3a
    1820:	e8 ad       	ldd	r30, Y+56	; 0x38
    1822:	f9 ad       	ldd	r31, Y+57	; 0x39
    1824:	00 80       	ld	r0, Z
    1826:	88 ad       	ldd	r24, Y+56	; 0x38
    1828:	99 ad       	ldd	r25, Y+57	; 0x39
    182a:	01 96       	adiw	r24, 0x01	; 1
    182c:	99 af       	std	Y+57, r25	; 0x39
    182e:	88 af       	std	Y+56, r24	; 0x38
    1830:	ee a9       	ldd	r30, Y+54	; 0x36
    1832:	ff a9       	ldd	r31, Y+55	; 0x37
    1834:	00 82       	st	Z, r0
    1836:	8e a9       	ldd	r24, Y+54	; 0x36
    1838:	9f a9       	ldd	r25, Y+55	; 0x37
    183a:	01 96       	adiw	r24, 0x01	; 1
    183c:	9f ab       	std	Y+55, r25	; 0x37
    183e:	8e ab       	std	Y+54, r24	; 0x36
    1840:	9a ad       	ldd	r25, Y+58	; 0x3a
    1842:	91 50       	subi	r25, 0x01	; 1
    1844:	9a af       	std	Y+58, r25	; 0x3a
    1846:	ea ad       	ldd	r30, Y+58	; 0x3a
    1848:	ee 23       	and	r30, r30
    184a:	51 f7       	brne	.-44     	; 0x1820 <Keypad_enuGetPressedKey+0x23c>

					*Copy_pu8KeyValue = Local_Au8Values[Local_u8RowIter][Local_u8ColIter];
    184c:	8f 85       	ldd	r24, Y+15	; 0x0f
    184e:	28 2f       	mov	r18, r24
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	88 89       	ldd	r24, Y+16	; 0x10
    1854:	48 2f       	mov	r20, r24
    1856:	50 e0       	ldi	r21, 0x00	; 0
    1858:	22 0f       	add	r18, r18
    185a:	33 1f       	adc	r19, r19
    185c:	22 0f       	add	r18, r18
    185e:	33 1f       	adc	r19, r19
    1860:	ce 01       	movw	r24, r28
    1862:	01 96       	adiw	r24, 0x01	; 1
    1864:	82 0f       	add	r24, r18
    1866:	93 1f       	adc	r25, r19
    1868:	84 0f       	add	r24, r20
    186a:	95 1f       	adc	r25, r21
    186c:	fc 01       	movw	r30, r24
    186e:	b2 96       	adiw	r30, 0x22	; 34
    1870:	80 81       	ld	r24, Z
    1872:	eb a9       	ldd	r30, Y+51	; 0x33
    1874:	fc a9       	ldd	r31, Y+52	; 0x34
    1876:	80 83       	st	Z, r24
					return ES_OK;
    1878:	f1 e0       	ldi	r31, 0x01	; 1
    187a:	fd ab       	std	Y+53, r31	; 0x35
    187c:	2b c0       	rjmp	.+86     	; 0x18d4 <Keypad_enuGetPressedKey+0x2f0>
	u8 Local_u8ColIter , Local_u8RowIter , Local_u8PinValue;

	for (Local_u8ColIter=0; Local_u8ColIter < COL_NUM ; Local_u8ColIter++ )
	{
		DIO_enuSetPinValue(Local_Au8ColPorts[Local_u8ColIter], Local_Au8ColPins[Local_u8ColIter], DIO_u8LOW);
		for (Local_u8RowIter=0; Local_u8RowIter < ROW_NUM ; Local_u8RowIter++)
    187e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1880:	8f 5f       	subi	r24, 0xFF	; 255
    1882:	8f 87       	std	Y+15, r24	; 0x0f
    1884:	8f 85       	ldd	r24, Y+15	; 0x0f
    1886:	84 30       	cpi	r24, 0x04	; 4
    1888:	08 f4       	brcc	.+2      	; 0x188c <Keypad_enuGetPressedKey+0x2a8>
    188a:	f4 ce       	rjmp	.-536    	; 0x1674 <Keypad_enuGetPressedKey+0x90>
					*Copy_pu8KeyValue = Local_Au8Values[Local_u8RowIter][Local_u8ColIter];
					return ES_OK;
				}
			}
		}
		DIO_enuSetPinValue(Local_Au8ColPorts[Local_u8ColIter], Local_Au8ColPins[Local_u8ColIter], DIO_u8HIGH);
    188c:	88 89       	ldd	r24, Y+16	; 0x10
    188e:	28 2f       	mov	r18, r24
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	ce 01       	movw	r24, r28
    1894:	42 96       	adiw	r24, 0x12	; 18
    1896:	fc 01       	movw	r30, r24
    1898:	e2 0f       	add	r30, r18
    189a:	f3 1f       	adc	r31, r19
    189c:	40 81       	ld	r20, Z
    189e:	88 89       	ldd	r24, Y+16	; 0x10
    18a0:	28 2f       	mov	r18, r24
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	ce 01       	movw	r24, r28
    18a6:	46 96       	adiw	r24, 0x16	; 22
    18a8:	fc 01       	movw	r30, r24
    18aa:	e2 0f       	add	r30, r18
    18ac:	f3 1f       	adc	r31, r19
    18ae:	90 81       	ld	r25, Z
    18b0:	84 2f       	mov	r24, r20
    18b2:	69 2f       	mov	r22, r25
    18b4:	41 e0       	ldi	r20, 0x01	; 1
    18b6:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_enuSetPinValue>
	u8 Local_Au8RowPorts [ROW_NUM] = {R1_PORT,R2_PORT,R3_PORT,R4_PORT};
	u8 Local_Au8RowPins  [ROW_NUM] = {R1_PIN, R2_PIN, R3_PIN, R4_PIN};

	u8 Local_u8ColIter , Local_u8RowIter , Local_u8PinValue;

	for (Local_u8ColIter=0; Local_u8ColIter < COL_NUM ; Local_u8ColIter++ )
    18ba:	88 89       	ldd	r24, Y+16	; 0x10
    18bc:	8f 5f       	subi	r24, 0xFF	; 255
    18be:	88 8b       	std	Y+16, r24	; 0x10
    18c0:	88 89       	ldd	r24, Y+16	; 0x10
    18c2:	84 30       	cpi	r24, 0x04	; 4
    18c4:	08 f4       	brcc	.+2      	; 0x18c8 <Keypad_enuGetPressedKey+0x2e4>
    18c6:	bd ce       	rjmp	.-646    	; 0x1642 <Keypad_enuGetPressedKey+0x5e>
				}
			}
		}
		DIO_enuSetPinValue(Local_Au8ColPorts[Local_u8ColIter], Local_Au8ColPins[Local_u8ColIter], DIO_u8HIGH);
	}
	*Copy_pu8KeyValue = KEYPAD_NOT_PRESSED;
    18c8:	eb a9       	ldd	r30, Y+51	; 0x33
    18ca:	fc a9       	ldd	r31, Y+52	; 0x34
    18cc:	8f ef       	ldi	r24, 0xFF	; 255
    18ce:	80 83       	st	Z, r24
	return Local_enuErrorState;
    18d0:	89 89       	ldd	r24, Y+17	; 0x11
    18d2:	8d ab       	std	Y+53, r24	; 0x35
    18d4:	8d a9       	ldd	r24, Y+53	; 0x35
}
    18d6:	ea 96       	adiw	r28, 0x3a	; 58
    18d8:	0f b6       	in	r0, 0x3f	; 63
    18da:	f8 94       	cli
    18dc:	de bf       	out	0x3e, r29	; 62
    18de:	0f be       	out	0x3f, r0	; 63
    18e0:	cd bf       	out	0x3d, r28	; 61
    18e2:	cf 91       	pop	r28
    18e4:	df 91       	pop	r29
    18e6:	08 95       	ret

000018e8 <KeyPad_Press_Check>:

u8 KeyPad_Press_Check(void)
{
    18e8:	df 93       	push	r29
    18ea:	cf 93       	push	r28
    18ec:	00 d0       	rcall	.+0      	; 0x18ee <KeyPad_Press_Check+0x6>
    18ee:	cd b7       	in	r28, 0x3d	; 61
    18f0:	de b7       	in	r29, 0x3e	; 62
	u8 key;
	Keypad_enuGetPressedKey(&key);
    18f2:	ce 01       	movw	r24, r28
    18f4:	01 96       	adiw	r24, 0x01	; 1
    18f6:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <Keypad_enuGetPressedKey>
	if (key != KEYPAD_NOT_PRESSED)
    18fa:	89 81       	ldd	r24, Y+1	; 0x01
    18fc:	8f 3f       	cpi	r24, 0xFF	; 255
    18fe:	19 f0       	breq	.+6      	; 0x1906 <KeyPad_Press_Check+0x1e>
	{
		return 1;
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	8a 83       	std	Y+2, r24	; 0x02
    1904:	02 c0       	rjmp	.+4      	; 0x190a <KeyPad_Press_Check+0x22>
	}
	else
	{
		return KEYPAD_NOT_PRESSED;
    1906:	8f ef       	ldi	r24, 0xFF	; 255
    1908:	8a 83       	std	Y+2, r24	; 0x02
    190a:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    190c:	0f 90       	pop	r0
    190e:	0f 90       	pop	r0
    1910:	cf 91       	pop	r28
    1912:	df 91       	pop	r29
    1914:	08 95       	ret

00001916 <LCD_enuInit>:
{
	DIO_enuSetPinValue(RS_PORT,RS_PIN,DIO_u8LOW);
	LCD_enuWriteNLatch(0x01);
}*/
ES_t LCD_enuInit(void)
{
    1916:	df 93       	push	r29
    1918:	cf 93       	push	r28
    191a:	cd b7       	in	r28, 0x3d	; 61
    191c:	de b7       	in	r29, 0x3e	; 62
    191e:	e9 97       	sbiw	r28, 0x39	; 57
    1920:	0f b6       	in	r0, 0x3f	; 63
    1922:	f8 94       	cli
    1924:	de bf       	out	0x3e, r29	; 62
    1926:	0f be       	out	0x3f, r0	; 63
    1928:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_u8ErrorState = ES_NOK;
    192a:	19 ae       	std	Y+57, r1	; 0x39

	DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	61 e0       	ldi	r22, 0x01	; 1
    1930:	41 e0       	ldi	r20, 0x01	; 1
    1932:	0e 94 b6 05 	call	0xb6c	; 0xb6c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RW_PORT, RW_PIN, DIO_u8OUTPUT);
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	62 e0       	ldi	r22, 0x02	; 2
    193a:	41 e0       	ldi	r20, 0x01	; 1
    193c:	0e 94 b6 05 	call	0xb6c	; 0xb6c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(EN_PORT, EN_PIN, DIO_u8OUTPUT);
    1940:	80 e0       	ldi	r24, 0x00	; 0
    1942:	61 e0       	ldi	r22, 0x01	; 1
    1944:	41 e0       	ldi	r20, 0x01	; 1
    1946:	0e 94 b6 05 	call	0xb6c	; 0xb6c <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(D7_PORT, D7_PIN, DIO_u8OUTPUT);
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	67 e0       	ldi	r22, 0x07	; 7
    194e:	41 e0       	ldi	r20, 0x01	; 1
    1950:	0e 94 b6 05 	call	0xb6c	; 0xb6c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D6_PORT, D6_PIN, DIO_u8OUTPUT);
    1954:	80 e0       	ldi	r24, 0x00	; 0
    1956:	66 e0       	ldi	r22, 0x06	; 6
    1958:	41 e0       	ldi	r20, 0x01	; 1
    195a:	0e 94 b6 05 	call	0xb6c	; 0xb6c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D5_PORT, D5_PIN, DIO_u8OUTPUT);
    195e:	80 e0       	ldi	r24, 0x00	; 0
    1960:	65 e0       	ldi	r22, 0x05	; 5
    1962:	41 e0       	ldi	r20, 0x01	; 1
    1964:	0e 94 b6 05 	call	0xb6c	; 0xb6c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D4_PORT, D4_PIN, DIO_u8OUTPUT);
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	64 e0       	ldi	r22, 0x04	; 4
    196c:	41 e0       	ldi	r20, 0x01	; 1
    196e:	0e 94 b6 05 	call	0xb6c	; 0xb6c <DIO_enuSetPinDirection>
    1972:	80 e0       	ldi	r24, 0x00	; 0
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	ac e0       	ldi	r26, 0x0C	; 12
    1978:	b2 e4       	ldi	r27, 0x42	; 66
    197a:	8d ab       	std	Y+53, r24	; 0x35
    197c:	9e ab       	std	Y+54, r25	; 0x36
    197e:	af ab       	std	Y+55, r26	; 0x37
    1980:	b8 af       	std	Y+56, r27	; 0x38
    1982:	6d a9       	ldd	r22, Y+53	; 0x35
    1984:	7e a9       	ldd	r23, Y+54	; 0x36
    1986:	8f a9       	ldd	r24, Y+55	; 0x37
    1988:	98 ad       	ldd	r25, Y+56	; 0x38
    198a:	20 e0       	ldi	r18, 0x00	; 0
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	4a e7       	ldi	r20, 0x7A	; 122
    1990:	55 e4       	ldi	r21, 0x45	; 69
    1992:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1996:	dc 01       	movw	r26, r24
    1998:	cb 01       	movw	r24, r22
    199a:	89 ab       	std	Y+49, r24	; 0x31
    199c:	9a ab       	std	Y+50, r25	; 0x32
    199e:	ab ab       	std	Y+51, r26	; 0x33
    19a0:	bc ab       	std	Y+52, r27	; 0x34
    19a2:	69 a9       	ldd	r22, Y+49	; 0x31
    19a4:	7a a9       	ldd	r23, Y+50	; 0x32
    19a6:	8b a9       	ldd	r24, Y+51	; 0x33
    19a8:	9c a9       	ldd	r25, Y+52	; 0x34
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	40 e8       	ldi	r20, 0x80	; 128
    19b0:	5f e3       	ldi	r21, 0x3F	; 63
    19b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19b6:	88 23       	and	r24, r24
    19b8:	2c f4       	brge	.+10     	; 0x19c4 <LCD_enuInit+0xae>
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	98 ab       	std	Y+48, r25	; 0x30
    19c0:	8f a7       	std	Y+47, r24	; 0x2f
    19c2:	3f c0       	rjmp	.+126    	; 0x1a42 <LCD_enuInit+0x12c>
    19c4:	69 a9       	ldd	r22, Y+49	; 0x31
    19c6:	7a a9       	ldd	r23, Y+50	; 0x32
    19c8:	8b a9       	ldd	r24, Y+51	; 0x33
    19ca:	9c a9       	ldd	r25, Y+52	; 0x34
    19cc:	20 e0       	ldi	r18, 0x00	; 0
    19ce:	3f ef       	ldi	r19, 0xFF	; 255
    19d0:	4f e7       	ldi	r20, 0x7F	; 127
    19d2:	57 e4       	ldi	r21, 0x47	; 71
    19d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19d8:	18 16       	cp	r1, r24
    19da:	4c f5       	brge	.+82     	; 0x1a2e <LCD_enuInit+0x118>
    19dc:	6d a9       	ldd	r22, Y+53	; 0x35
    19de:	7e a9       	ldd	r23, Y+54	; 0x36
    19e0:	8f a9       	ldd	r24, Y+55	; 0x37
    19e2:	98 ad       	ldd	r25, Y+56	; 0x38
    19e4:	20 e0       	ldi	r18, 0x00	; 0
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	40 e2       	ldi	r20, 0x20	; 32
    19ea:	51 e4       	ldi	r21, 0x41	; 65
    19ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f0:	dc 01       	movw	r26, r24
    19f2:	cb 01       	movw	r24, r22
    19f4:	bc 01       	movw	r22, r24
    19f6:	cd 01       	movw	r24, r26
    19f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19fc:	dc 01       	movw	r26, r24
    19fe:	cb 01       	movw	r24, r22
    1a00:	98 ab       	std	Y+48, r25	; 0x30
    1a02:	8f a7       	std	Y+47, r24	; 0x2f
    1a04:	0f c0       	rjmp	.+30     	; 0x1a24 <LCD_enuInit+0x10e>
    1a06:	80 e9       	ldi	r24, 0x90	; 144
    1a08:	91 e0       	ldi	r25, 0x01	; 1
    1a0a:	9e a7       	std	Y+46, r25	; 0x2e
    1a0c:	8d a7       	std	Y+45, r24	; 0x2d
    1a0e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a10:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a12:	01 97       	sbiw	r24, 0x01	; 1
    1a14:	f1 f7       	brne	.-4      	; 0x1a12 <LCD_enuInit+0xfc>
    1a16:	9e a7       	std	Y+46, r25	; 0x2e
    1a18:	8d a7       	std	Y+45, r24	; 0x2d
    1a1a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a1c:	98 a9       	ldd	r25, Y+48	; 0x30
    1a1e:	01 97       	sbiw	r24, 0x01	; 1
    1a20:	98 ab       	std	Y+48, r25	; 0x30
    1a22:	8f a7       	std	Y+47, r24	; 0x2f
    1a24:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a26:	98 a9       	ldd	r25, Y+48	; 0x30
    1a28:	00 97       	sbiw	r24, 0x00	; 0
    1a2a:	69 f7       	brne	.-38     	; 0x1a06 <LCD_enuInit+0xf0>
    1a2c:	14 c0       	rjmp	.+40     	; 0x1a56 <LCD_enuInit+0x140>
    1a2e:	69 a9       	ldd	r22, Y+49	; 0x31
    1a30:	7a a9       	ldd	r23, Y+50	; 0x32
    1a32:	8b a9       	ldd	r24, Y+51	; 0x33
    1a34:	9c a9       	ldd	r25, Y+52	; 0x34
    1a36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	98 ab       	std	Y+48, r25	; 0x30
    1a40:	8f a7       	std	Y+47, r24	; 0x2f
    1a42:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a44:	98 a9       	ldd	r25, Y+48	; 0x30
    1a46:	9c a7       	std	Y+44, r25	; 0x2c
    1a48:	8b a7       	std	Y+43, r24	; 0x2b
    1a4a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a4c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a4e:	01 97       	sbiw	r24, 0x01	; 1
    1a50:	f1 f7       	brne	.-4      	; 0x1a4e <LCD_enuInit+0x138>
    1a52:	9c a7       	std	Y+44, r25	; 0x2c
    1a54:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(35);
#if LCD_MODE == FOUR_BIT

	DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8LOW);
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	61 e0       	ldi	r22, 0x01	; 1
    1a5a:	40 e0       	ldi	r20, 0x00	; 0
    1a5c:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch(0x28);
    1a60:	88 e2       	ldi	r24, 0x28	; 40
    1a62:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <LCD_enuWriteNLatch>
    1a66:	80 e0       	ldi	r24, 0x00	; 0
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	a0 e8       	ldi	r26, 0x80	; 128
    1a6c:	bf e3       	ldi	r27, 0x3F	; 63
    1a6e:	8f a3       	std	Y+39, r24	; 0x27
    1a70:	98 a7       	std	Y+40, r25	; 0x28
    1a72:	a9 a7       	std	Y+41, r26	; 0x29
    1a74:	ba a7       	std	Y+42, r27	; 0x2a
    1a76:	6f a1       	ldd	r22, Y+39	; 0x27
    1a78:	78 a5       	ldd	r23, Y+40	; 0x28
    1a7a:	89 a5       	ldd	r24, Y+41	; 0x29
    1a7c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	4a e7       	ldi	r20, 0x7A	; 122
    1a84:	55 e4       	ldi	r21, 0x45	; 69
    1a86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	8b a3       	std	Y+35, r24	; 0x23
    1a90:	9c a3       	std	Y+36, r25	; 0x24
    1a92:	ad a3       	std	Y+37, r26	; 0x25
    1a94:	be a3       	std	Y+38, r27	; 0x26
    1a96:	6b a1       	ldd	r22, Y+35	; 0x23
    1a98:	7c a1       	ldd	r23, Y+36	; 0x24
    1a9a:	8d a1       	ldd	r24, Y+37	; 0x25
    1a9c:	9e a1       	ldd	r25, Y+38	; 0x26
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	40 e8       	ldi	r20, 0x80	; 128
    1aa4:	5f e3       	ldi	r21, 0x3F	; 63
    1aa6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aaa:	88 23       	and	r24, r24
    1aac:	2c f4       	brge	.+10     	; 0x1ab8 <LCD_enuInit+0x1a2>
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	9a a3       	std	Y+34, r25	; 0x22
    1ab4:	89 a3       	std	Y+33, r24	; 0x21
    1ab6:	3f c0       	rjmp	.+126    	; 0x1b36 <LCD_enuInit+0x220>
    1ab8:	6b a1       	ldd	r22, Y+35	; 0x23
    1aba:	7c a1       	ldd	r23, Y+36	; 0x24
    1abc:	8d a1       	ldd	r24, Y+37	; 0x25
    1abe:	9e a1       	ldd	r25, Y+38	; 0x26
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	3f ef       	ldi	r19, 0xFF	; 255
    1ac4:	4f e7       	ldi	r20, 0x7F	; 127
    1ac6:	57 e4       	ldi	r21, 0x47	; 71
    1ac8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1acc:	18 16       	cp	r1, r24
    1ace:	4c f5       	brge	.+82     	; 0x1b22 <LCD_enuInit+0x20c>
    1ad0:	6f a1       	ldd	r22, Y+39	; 0x27
    1ad2:	78 a5       	ldd	r23, Y+40	; 0x28
    1ad4:	89 a5       	ldd	r24, Y+41	; 0x29
    1ad6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	40 e2       	ldi	r20, 0x20	; 32
    1ade:	51 e4       	ldi	r21, 0x41	; 65
    1ae0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	cb 01       	movw	r24, r22
    1ae8:	bc 01       	movw	r22, r24
    1aea:	cd 01       	movw	r24, r26
    1aec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	9a a3       	std	Y+34, r25	; 0x22
    1af6:	89 a3       	std	Y+33, r24	; 0x21
    1af8:	0f c0       	rjmp	.+30     	; 0x1b18 <LCD_enuInit+0x202>
    1afa:	80 e9       	ldi	r24, 0x90	; 144
    1afc:	91 e0       	ldi	r25, 0x01	; 1
    1afe:	98 a3       	std	Y+32, r25	; 0x20
    1b00:	8f 8f       	std	Y+31, r24	; 0x1f
    1b02:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b04:	98 a1       	ldd	r25, Y+32	; 0x20
    1b06:	01 97       	sbiw	r24, 0x01	; 1
    1b08:	f1 f7       	brne	.-4      	; 0x1b06 <LCD_enuInit+0x1f0>
    1b0a:	98 a3       	std	Y+32, r25	; 0x20
    1b0c:	8f 8f       	std	Y+31, r24	; 0x1f
    1b0e:	89 a1       	ldd	r24, Y+33	; 0x21
    1b10:	9a a1       	ldd	r25, Y+34	; 0x22
    1b12:	01 97       	sbiw	r24, 0x01	; 1
    1b14:	9a a3       	std	Y+34, r25	; 0x22
    1b16:	89 a3       	std	Y+33, r24	; 0x21
    1b18:	89 a1       	ldd	r24, Y+33	; 0x21
    1b1a:	9a a1       	ldd	r25, Y+34	; 0x22
    1b1c:	00 97       	sbiw	r24, 0x00	; 0
    1b1e:	69 f7       	brne	.-38     	; 0x1afa <LCD_enuInit+0x1e4>
    1b20:	14 c0       	rjmp	.+40     	; 0x1b4a <LCD_enuInit+0x234>
    1b22:	6b a1       	ldd	r22, Y+35	; 0x23
    1b24:	7c a1       	ldd	r23, Y+36	; 0x24
    1b26:	8d a1       	ldd	r24, Y+37	; 0x25
    1b28:	9e a1       	ldd	r25, Y+38	; 0x26
    1b2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	9a a3       	std	Y+34, r25	; 0x22
    1b34:	89 a3       	std	Y+33, r24	; 0x21
    1b36:	89 a1       	ldd	r24, Y+33	; 0x21
    1b38:	9a a1       	ldd	r25, Y+34	; 0x22
    1b3a:	9e 8f       	std	Y+30, r25	; 0x1e
    1b3c:	8d 8f       	std	Y+29, r24	; 0x1d
    1b3e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b40:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b42:	01 97       	sbiw	r24, 0x01	; 1
    1b44:	f1 f7       	brne	.-4      	; 0x1b42 <LCD_enuInit+0x22c>
    1b46:	9e 8f       	std	Y+30, r25	; 0x1e
    1b48:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD_enuWriteNLatch(0x38);

#endif

	_delay_ms(1);
	DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8LOW);
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	61 e0       	ldi	r22, 0x01	; 1
    1b4e:	40 e0       	ldi	r20, 0x00	; 0
    1b50:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch(0x0f);
    1b54:	8f e0       	ldi	r24, 0x0F	; 15
    1b56:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <LCD_enuWriteNLatch>
    1b5a:	80 e0       	ldi	r24, 0x00	; 0
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	a0 e8       	ldi	r26, 0x80	; 128
    1b60:	bf e3       	ldi	r27, 0x3F	; 63
    1b62:	89 8f       	std	Y+25, r24	; 0x19
    1b64:	9a 8f       	std	Y+26, r25	; 0x1a
    1b66:	ab 8f       	std	Y+27, r26	; 0x1b
    1b68:	bc 8f       	std	Y+28, r27	; 0x1c
    1b6a:	69 8d       	ldd	r22, Y+25	; 0x19
    1b6c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b70:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b72:	20 e0       	ldi	r18, 0x00	; 0
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	4a e7       	ldi	r20, 0x7A	; 122
    1b78:	55 e4       	ldi	r21, 0x45	; 69
    1b7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b7e:	dc 01       	movw	r26, r24
    1b80:	cb 01       	movw	r24, r22
    1b82:	8d 8b       	std	Y+21, r24	; 0x15
    1b84:	9e 8b       	std	Y+22, r25	; 0x16
    1b86:	af 8b       	std	Y+23, r26	; 0x17
    1b88:	b8 8f       	std	Y+24, r27	; 0x18
    1b8a:	6d 89       	ldd	r22, Y+21	; 0x15
    1b8c:	7e 89       	ldd	r23, Y+22	; 0x16
    1b8e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b90:	98 8d       	ldd	r25, Y+24	; 0x18
    1b92:	20 e0       	ldi	r18, 0x00	; 0
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	40 e8       	ldi	r20, 0x80	; 128
    1b98:	5f e3       	ldi	r21, 0x3F	; 63
    1b9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b9e:	88 23       	and	r24, r24
    1ba0:	2c f4       	brge	.+10     	; 0x1bac <LCD_enuInit+0x296>
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	9c 8b       	std	Y+20, r25	; 0x14
    1ba8:	8b 8b       	std	Y+19, r24	; 0x13
    1baa:	3f c0       	rjmp	.+126    	; 0x1c2a <LCD_enuInit+0x314>
    1bac:	6d 89       	ldd	r22, Y+21	; 0x15
    1bae:	7e 89       	ldd	r23, Y+22	; 0x16
    1bb0:	8f 89       	ldd	r24, Y+23	; 0x17
    1bb2:	98 8d       	ldd	r25, Y+24	; 0x18
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	3f ef       	ldi	r19, 0xFF	; 255
    1bb8:	4f e7       	ldi	r20, 0x7F	; 127
    1bba:	57 e4       	ldi	r21, 0x47	; 71
    1bbc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bc0:	18 16       	cp	r1, r24
    1bc2:	4c f5       	brge	.+82     	; 0x1c16 <LCD_enuInit+0x300>
    1bc4:	69 8d       	ldd	r22, Y+25	; 0x19
    1bc6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bc8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bcc:	20 e0       	ldi	r18, 0x00	; 0
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	40 e2       	ldi	r20, 0x20	; 32
    1bd2:	51 e4       	ldi	r21, 0x41	; 65
    1bd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	bc 01       	movw	r22, r24
    1bde:	cd 01       	movw	r24, r26
    1be0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be4:	dc 01       	movw	r26, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	9c 8b       	std	Y+20, r25	; 0x14
    1bea:	8b 8b       	std	Y+19, r24	; 0x13
    1bec:	0f c0       	rjmp	.+30     	; 0x1c0c <LCD_enuInit+0x2f6>
    1bee:	80 e9       	ldi	r24, 0x90	; 144
    1bf0:	91 e0       	ldi	r25, 0x01	; 1
    1bf2:	9a 8b       	std	Y+18, r25	; 0x12
    1bf4:	89 8b       	std	Y+17, r24	; 0x11
    1bf6:	89 89       	ldd	r24, Y+17	; 0x11
    1bf8:	9a 89       	ldd	r25, Y+18	; 0x12
    1bfa:	01 97       	sbiw	r24, 0x01	; 1
    1bfc:	f1 f7       	brne	.-4      	; 0x1bfa <LCD_enuInit+0x2e4>
    1bfe:	9a 8b       	std	Y+18, r25	; 0x12
    1c00:	89 8b       	std	Y+17, r24	; 0x11
    1c02:	8b 89       	ldd	r24, Y+19	; 0x13
    1c04:	9c 89       	ldd	r25, Y+20	; 0x14
    1c06:	01 97       	sbiw	r24, 0x01	; 1
    1c08:	9c 8b       	std	Y+20, r25	; 0x14
    1c0a:	8b 8b       	std	Y+19, r24	; 0x13
    1c0c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c0e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c10:	00 97       	sbiw	r24, 0x00	; 0
    1c12:	69 f7       	brne	.-38     	; 0x1bee <LCD_enuInit+0x2d8>
    1c14:	14 c0       	rjmp	.+40     	; 0x1c3e <LCD_enuInit+0x328>
    1c16:	6d 89       	ldd	r22, Y+21	; 0x15
    1c18:	7e 89       	ldd	r23, Y+22	; 0x16
    1c1a:	8f 89       	ldd	r24, Y+23	; 0x17
    1c1c:	98 8d       	ldd	r25, Y+24	; 0x18
    1c1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c22:	dc 01       	movw	r26, r24
    1c24:	cb 01       	movw	r24, r22
    1c26:	9c 8b       	std	Y+20, r25	; 0x14
    1c28:	8b 8b       	std	Y+19, r24	; 0x13
    1c2a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c2c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c2e:	98 8b       	std	Y+16, r25	; 0x10
    1c30:	8f 87       	std	Y+15, r24	; 0x0f
    1c32:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c34:	98 89       	ldd	r25, Y+16	; 0x10
    1c36:	01 97       	sbiw	r24, 0x01	; 1
    1c38:	f1 f7       	brne	.-4      	; 0x1c36 <LCD_enuInit+0x320>
    1c3a:	98 8b       	std	Y+16, r25	; 0x10
    1c3c:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);
	DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8LOW);
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	61 e0       	ldi	r22, 0x01	; 1
    1c42:	40 e0       	ldi	r20, 0x00	; 0
    1c44:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch(0x01);
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <LCD_enuWriteNLatch>
    1c4e:	80 e0       	ldi	r24, 0x00	; 0
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	a0 e0       	ldi	r26, 0x00	; 0
    1c54:	b0 e4       	ldi	r27, 0x40	; 64
    1c56:	8b 87       	std	Y+11, r24	; 0x0b
    1c58:	9c 87       	std	Y+12, r25	; 0x0c
    1c5a:	ad 87       	std	Y+13, r26	; 0x0d
    1c5c:	be 87       	std	Y+14, r27	; 0x0e
    1c5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c60:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c62:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c64:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c66:	20 e0       	ldi	r18, 0x00	; 0
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	4a e7       	ldi	r20, 0x7A	; 122
    1c6c:	55 e4       	ldi	r21, 0x45	; 69
    1c6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c72:	dc 01       	movw	r26, r24
    1c74:	cb 01       	movw	r24, r22
    1c76:	8f 83       	std	Y+7, r24	; 0x07
    1c78:	98 87       	std	Y+8, r25	; 0x08
    1c7a:	a9 87       	std	Y+9, r26	; 0x09
    1c7c:	ba 87       	std	Y+10, r27	; 0x0a
    1c7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c80:	78 85       	ldd	r23, Y+8	; 0x08
    1c82:	89 85       	ldd	r24, Y+9	; 0x09
    1c84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	40 e8       	ldi	r20, 0x80	; 128
    1c8c:	5f e3       	ldi	r21, 0x3F	; 63
    1c8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c92:	88 23       	and	r24, r24
    1c94:	2c f4       	brge	.+10     	; 0x1ca0 <LCD_enuInit+0x38a>
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	9e 83       	std	Y+6, r25	; 0x06
    1c9c:	8d 83       	std	Y+5, r24	; 0x05
    1c9e:	3f c0       	rjmp	.+126    	; 0x1d1e <LCD_enuInit+0x408>
    1ca0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ca2:	78 85       	ldd	r23, Y+8	; 0x08
    1ca4:	89 85       	ldd	r24, Y+9	; 0x09
    1ca6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca8:	20 e0       	ldi	r18, 0x00	; 0
    1caa:	3f ef       	ldi	r19, 0xFF	; 255
    1cac:	4f e7       	ldi	r20, 0x7F	; 127
    1cae:	57 e4       	ldi	r21, 0x47	; 71
    1cb0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cb4:	18 16       	cp	r1, r24
    1cb6:	4c f5       	brge	.+82     	; 0x1d0a <LCD_enuInit+0x3f4>
    1cb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cba:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cc0:	20 e0       	ldi	r18, 0x00	; 0
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	40 e2       	ldi	r20, 0x20	; 32
    1cc6:	51 e4       	ldi	r21, 0x41	; 65
    1cc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ccc:	dc 01       	movw	r26, r24
    1cce:	cb 01       	movw	r24, r22
    1cd0:	bc 01       	movw	r22, r24
    1cd2:	cd 01       	movw	r24, r26
    1cd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd8:	dc 01       	movw	r26, r24
    1cda:	cb 01       	movw	r24, r22
    1cdc:	9e 83       	std	Y+6, r25	; 0x06
    1cde:	8d 83       	std	Y+5, r24	; 0x05
    1ce0:	0f c0       	rjmp	.+30     	; 0x1d00 <LCD_enuInit+0x3ea>
    1ce2:	80 e9       	ldi	r24, 0x90	; 144
    1ce4:	91 e0       	ldi	r25, 0x01	; 1
    1ce6:	9c 83       	std	Y+4, r25	; 0x04
    1ce8:	8b 83       	std	Y+3, r24	; 0x03
    1cea:	8b 81       	ldd	r24, Y+3	; 0x03
    1cec:	9c 81       	ldd	r25, Y+4	; 0x04
    1cee:	01 97       	sbiw	r24, 0x01	; 1
    1cf0:	f1 f7       	brne	.-4      	; 0x1cee <LCD_enuInit+0x3d8>
    1cf2:	9c 83       	std	Y+4, r25	; 0x04
    1cf4:	8b 83       	std	Y+3, r24	; 0x03
    1cf6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cfa:	01 97       	sbiw	r24, 0x01	; 1
    1cfc:	9e 83       	std	Y+6, r25	; 0x06
    1cfe:	8d 83       	std	Y+5, r24	; 0x05
    1d00:	8d 81       	ldd	r24, Y+5	; 0x05
    1d02:	9e 81       	ldd	r25, Y+6	; 0x06
    1d04:	00 97       	sbiw	r24, 0x00	; 0
    1d06:	69 f7       	brne	.-38     	; 0x1ce2 <LCD_enuInit+0x3cc>
    1d08:	14 c0       	rjmp	.+40     	; 0x1d32 <LCD_enuInit+0x41c>
    1d0a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d0c:	78 85       	ldd	r23, Y+8	; 0x08
    1d0e:	89 85       	ldd	r24, Y+9	; 0x09
    1d10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d16:	dc 01       	movw	r26, r24
    1d18:	cb 01       	movw	r24, r22
    1d1a:	9e 83       	std	Y+6, r25	; 0x06
    1d1c:	8d 83       	std	Y+5, r24	; 0x05
    1d1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d20:	9e 81       	ldd	r25, Y+6	; 0x06
    1d22:	9a 83       	std	Y+2, r25	; 0x02
    1d24:	89 83       	std	Y+1, r24	; 0x01
    1d26:	89 81       	ldd	r24, Y+1	; 0x01
    1d28:	9a 81       	ldd	r25, Y+2	; 0x02
    1d2a:	01 97       	sbiw	r24, 0x01	; 1
    1d2c:	f1 f7       	brne	.-4      	; 0x1d2a <LCD_enuInit+0x414>
    1d2e:	9a 83       	std	Y+2, r25	; 0x02
    1d30:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);
	DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8LOW);
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	61 e0       	ldi	r22, 0x01	; 1
    1d36:	40 e0       	ldi	r20, 0x00	; 0
    1d38:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch(0x06);
    1d3c:	86 e0       	ldi	r24, 0x06	; 6
    1d3e:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <LCD_enuWriteNLatch>

	return Local_u8ErrorState;
    1d42:	89 ad       	ldd	r24, Y+57	; 0x39
}
    1d44:	e9 96       	adiw	r28, 0x39	; 57
    1d46:	0f b6       	in	r0, 0x3f	; 63
    1d48:	f8 94       	cli
    1d4a:	de bf       	out	0x3e, r29	; 62
    1d4c:	0f be       	out	0x3f, r0	; 63
    1d4e:	cd bf       	out	0x3d, r28	; 61
    1d50:	cf 91       	pop	r28
    1d52:	df 91       	pop	r29
    1d54:	08 95       	ret

00001d56 <LCD_enuSendData>:

ES_t LCD_enuSendData(u8 Copy_u8Data)
{
    1d56:	df 93       	push	r29
    1d58:	cf 93       	push	r28
    1d5a:	00 d0       	rcall	.+0      	; 0x1d5c <LCD_enuSendData+0x6>
    1d5c:	cd b7       	in	r28, 0x3d	; 61
    1d5e:	de b7       	in	r29, 0x3e	; 62
    1d60:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_u8ErrorState = ES_NOK;
    1d62:	19 82       	std	Y+1, r1	; 0x01

	DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8HIGH);
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	61 e0       	ldi	r22, 0x01	; 1
    1d68:	41 e0       	ldi	r20, 0x01	; 1
    1d6a:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch(Copy_u8Data);
    1d6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d70:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <LCD_enuWriteNLatch>


	return Local_u8ErrorState;
    1d74:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d76:	0f 90       	pop	r0
    1d78:	0f 90       	pop	r0
    1d7a:	cf 91       	pop	r28
    1d7c:	df 91       	pop	r29
    1d7e:	08 95       	ret

00001d80 <LCD_enuSendCommand>:

ES_t LCD_enuSendCommand(u8 Copy_u8Command)
{
    1d80:	df 93       	push	r29
    1d82:	cf 93       	push	r28
    1d84:	00 d0       	rcall	.+0      	; 0x1d86 <LCD_enuSendCommand+0x6>
    1d86:	cd b7       	in	r28, 0x3d	; 61
    1d88:	de b7       	in	r29, 0x3e	; 62
    1d8a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_u8ErrorState = ES_NOK;
    1d8c:	19 82       	std	Y+1, r1	; 0x01

	DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8LOW);
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	61 e0       	ldi	r22, 0x01	; 1
    1d92:	40 e0       	ldi	r20, 0x00	; 0
    1d94:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch(Copy_u8Command);
    1d98:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9a:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <LCD_enuWriteNLatch>

	return Local_u8ErrorState;
    1d9e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1da0:	0f 90       	pop	r0
    1da2:	0f 90       	pop	r0
    1da4:	cf 91       	pop	r28
    1da6:	df 91       	pop	r29
    1da8:	08 95       	ret

00001daa <LCD_enuSendString>:


ES_t LCD_enuSendString(const char * Copy_pcString)
{
    1daa:	df 93       	push	r29
    1dac:	cf 93       	push	r28
    1dae:	00 d0       	rcall	.+0      	; 0x1db0 <LCD_enuSendString+0x6>
    1db0:	0f 92       	push	r0
    1db2:	cd b7       	in	r28, 0x3d	; 61
    1db4:	de b7       	in	r29, 0x3e	; 62
    1db6:	9b 83       	std	Y+3, r25	; 0x03
    1db8:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_u8ErrorState = ES_NOK;
    1dba:	19 82       	std	Y+1, r1	; 0x01
    1dbc:	10 c0       	rjmp	.+32     	; 0x1dde <LCD_enuSendString+0x34>

	while (*Copy_pcString)//'\0' ,'0'
	{
		DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8HIGH);
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	61 e0       	ldi	r22, 0x01	; 1
    1dc2:	41 e0       	ldi	r20, 0x01	; 1
    1dc4:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_enuSetPinValue>
		LCD_enuWriteNLatch(*Copy_pcString++);
    1dc8:	ea 81       	ldd	r30, Y+2	; 0x02
    1dca:	fb 81       	ldd	r31, Y+3	; 0x03
    1dcc:	20 81       	ld	r18, Z
    1dce:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd0:	9b 81       	ldd	r25, Y+3	; 0x03
    1dd2:	01 96       	adiw	r24, 0x01	; 1
    1dd4:	9b 83       	std	Y+3, r25	; 0x03
    1dd6:	8a 83       	std	Y+2, r24	; 0x02
    1dd8:	82 2f       	mov	r24, r18
    1dda:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <LCD_enuWriteNLatch>

ES_t LCD_enuSendString(const char * Copy_pcString)
{
	ES_t Local_u8ErrorState = ES_NOK;

	while (*Copy_pcString)//'\0' ,'0'
    1dde:	ea 81       	ldd	r30, Y+2	; 0x02
    1de0:	fb 81       	ldd	r31, Y+3	; 0x03
    1de2:	80 81       	ld	r24, Z
    1de4:	88 23       	and	r24, r24
    1de6:	59 f7       	brne	.-42     	; 0x1dbe <LCD_enuSendString+0x14>
	{
		DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8HIGH);
		LCD_enuWriteNLatch(*Copy_pcString++);
	}

	return Local_u8ErrorState;
    1de8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dea:	0f 90       	pop	r0
    1dec:	0f 90       	pop	r0
    1dee:	0f 90       	pop	r0
    1df0:	cf 91       	pop	r28
    1df2:	df 91       	pop	r29
    1df4:	08 95       	ret

00001df6 <LCD_enuWriteNLatch>:


static ES_t LCD_enuWriteNLatch(u8 Copy_u8Data)
{
    1df6:	0f 93       	push	r16
    1df8:	1f 93       	push	r17
    1dfa:	df 93       	push	r29
    1dfc:	cf 93       	push	r28
    1dfe:	cd b7       	in	r28, 0x3d	; 61
    1e00:	de b7       	in	r29, 0x3e	; 62
    1e02:	c6 55       	subi	r28, 0x56	; 86
    1e04:	d0 40       	sbci	r29, 0x00	; 0
    1e06:	0f b6       	in	r0, 0x3f	; 63
    1e08:	f8 94       	cli
    1e0a:	de bf       	out	0x3e, r29	; 62
    1e0c:	0f be       	out	0x3f, r0	; 63
    1e0e:	cd bf       	out	0x3d, r28	; 61
    1e10:	fe 01       	movw	r30, r28
    1e12:	ea 5a       	subi	r30, 0xAA	; 170
    1e14:	ff 4f       	sbci	r31, 0xFF	; 255
    1e16:	80 83       	st	Z, r24
	ES_t Local_u8ErrorState = ES_NOK;
    1e18:	fe 01       	movw	r30, r28
    1e1a:	eb 5a       	subi	r30, 0xAB	; 171
    1e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1e:	10 82       	st	Z, r1

	DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
    1e20:	80 e0       	ldi	r24, 0x00	; 0
    1e22:	61 e0       	ldi	r22, 0x01	; 1
    1e24:	40 e0       	ldi	r20, 0x00	; 0
    1e26:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_u8LOW);
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	62 e0       	ldi	r22, 0x02	; 2
    1e2e:	40 e0       	ldi	r20, 0x00	; 0
    1e30:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_enuSetPinValue>

	if (Copy_u8Data == 0x28)//'('
    1e34:	fe 01       	movw	r30, r28
    1e36:	ea 5a       	subi	r30, 0xAA	; 170
    1e38:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3a:	80 81       	ld	r24, Z
    1e3c:	88 32       	cpi	r24, 0x28	; 40
    1e3e:	09 f0       	breq	.+2      	; 0x1e42 <LCD_enuWriteNLatch+0x4c>
    1e40:	79 c1       	rjmp	.+754    	; 0x2134 <LCD_enuWriteNLatch+0x33e>
		//u8 Local_u8RS_Val;
		//DIO_enuGetPinValue(RS_PORT, RS_PIN, &Local_u8RS_Val);

		//if (Local_u8RS_Val == DIO_u8LOW)
		{
			DIO_enuSetPinValue(D7_PORT, D7_PIN , ((Copy_u8Data>>7)&1));
    1e42:	fe 01       	movw	r30, r28
    1e44:	ea 5a       	subi	r30, 0xAA	; 170
    1e46:	ff 4f       	sbci	r31, 0xFF	; 255
    1e48:	80 81       	ld	r24, Z
    1e4a:	98 2f       	mov	r25, r24
    1e4c:	99 1f       	adc	r25, r25
    1e4e:	99 27       	eor	r25, r25
    1e50:	99 1f       	adc	r25, r25
    1e52:	80 e0       	ldi	r24, 0x00	; 0
    1e54:	67 e0       	ldi	r22, 0x07	; 7
    1e56:	49 2f       	mov	r20, r25
    1e58:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(D6_PORT, D6_PIN , ((Copy_u8Data>>6)&1));
    1e5c:	fe 01       	movw	r30, r28
    1e5e:	ea 5a       	subi	r30, 0xAA	; 170
    1e60:	ff 4f       	sbci	r31, 0xFF	; 255
    1e62:	80 81       	ld	r24, Z
    1e64:	82 95       	swap	r24
    1e66:	86 95       	lsr	r24
    1e68:	86 95       	lsr	r24
    1e6a:	83 70       	andi	r24, 0x03	; 3
    1e6c:	98 2f       	mov	r25, r24
    1e6e:	91 70       	andi	r25, 0x01	; 1
    1e70:	80 e0       	ldi	r24, 0x00	; 0
    1e72:	66 e0       	ldi	r22, 0x06	; 6
    1e74:	49 2f       	mov	r20, r25
    1e76:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(D5_PORT, D5_PIN , ((Copy_u8Data>>5)&1));
    1e7a:	fe 01       	movw	r30, r28
    1e7c:	ea 5a       	subi	r30, 0xAA	; 170
    1e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e80:	80 81       	ld	r24, Z
    1e82:	82 95       	swap	r24
    1e84:	86 95       	lsr	r24
    1e86:	87 70       	andi	r24, 0x07	; 7
    1e88:	98 2f       	mov	r25, r24
    1e8a:	91 70       	andi	r25, 0x01	; 1
    1e8c:	80 e0       	ldi	r24, 0x00	; 0
    1e8e:	65 e0       	ldi	r22, 0x05	; 5
    1e90:	49 2f       	mov	r20, r25
    1e92:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(D4_PORT, D4_PIN , ((Copy_u8Data>>4)&1));
    1e96:	fe 01       	movw	r30, r28
    1e98:	ea 5a       	subi	r30, 0xAA	; 170
    1e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9c:	80 81       	ld	r24, Z
    1e9e:	82 95       	swap	r24
    1ea0:	8f 70       	andi	r24, 0x0F	; 15
    1ea2:	98 2f       	mov	r25, r24
    1ea4:	91 70       	andi	r25, 0x01	; 1
    1ea6:	80 e0       	ldi	r24, 0x00	; 0
    1ea8:	64 e0       	ldi	r22, 0x04	; 4
    1eaa:	49 2f       	mov	r20, r25
    1eac:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_enuSetPinValue>

			DIO_enuSetPinValue(EN_PORT, EN_PIN , DIO_u8HIGH);
    1eb0:	80 e0       	ldi	r24, 0x00	; 0
    1eb2:	61 e0       	ldi	r22, 0x01	; 1
    1eb4:	41 e0       	ldi	r20, 0x01	; 1
    1eb6:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_enuSetPinValue>
    1eba:	fe 01       	movw	r30, r28
    1ebc:	ef 5a       	subi	r30, 0xAF	; 175
    1ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec0:	80 e0       	ldi	r24, 0x00	; 0
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	a0 ea       	ldi	r26, 0xA0	; 160
    1ec6:	b0 e4       	ldi	r27, 0x40	; 64
    1ec8:	80 83       	st	Z, r24
    1eca:	91 83       	std	Z+1, r25	; 0x01
    1ecc:	a2 83       	std	Z+2, r26	; 0x02
    1ece:	b3 83       	std	Z+3, r27	; 0x03
    1ed0:	8e 01       	movw	r16, r28
    1ed2:	03 5b       	subi	r16, 0xB3	; 179
    1ed4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ed6:	fe 01       	movw	r30, r28
    1ed8:	ef 5a       	subi	r30, 0xAF	; 175
    1eda:	ff 4f       	sbci	r31, 0xFF	; 255
    1edc:	60 81       	ld	r22, Z
    1ede:	71 81       	ldd	r23, Z+1	; 0x01
    1ee0:	82 81       	ldd	r24, Z+2	; 0x02
    1ee2:	93 81       	ldd	r25, Z+3	; 0x03
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	4a e7       	ldi	r20, 0x7A	; 122
    1eea:	55 e4       	ldi	r21, 0x45	; 69
    1eec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	f8 01       	movw	r30, r16
    1ef6:	80 83       	st	Z, r24
    1ef8:	91 83       	std	Z+1, r25	; 0x01
    1efa:	a2 83       	std	Z+2, r26	; 0x02
    1efc:	b3 83       	std	Z+3, r27	; 0x03
    1efe:	fe 01       	movw	r30, r28
    1f00:	e3 5b       	subi	r30, 0xB3	; 179
    1f02:	ff 4f       	sbci	r31, 0xFF	; 255
    1f04:	60 81       	ld	r22, Z
    1f06:	71 81       	ldd	r23, Z+1	; 0x01
    1f08:	82 81       	ldd	r24, Z+2	; 0x02
    1f0a:	93 81       	ldd	r25, Z+3	; 0x03
    1f0c:	20 e0       	ldi	r18, 0x00	; 0
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	40 e8       	ldi	r20, 0x80	; 128
    1f12:	5f e3       	ldi	r21, 0x3F	; 63
    1f14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f18:	88 23       	and	r24, r24
    1f1a:	44 f4       	brge	.+16     	; 0x1f2c <LCD_enuWriteNLatch+0x136>
    1f1c:	fe 01       	movw	r30, r28
    1f1e:	e5 5b       	subi	r30, 0xB5	; 181
    1f20:	ff 4f       	sbci	r31, 0xFF	; 255
    1f22:	81 e0       	ldi	r24, 0x01	; 1
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	91 83       	std	Z+1, r25	; 0x01
    1f28:	80 83       	st	Z, r24
    1f2a:	64 c0       	rjmp	.+200    	; 0x1ff4 <LCD_enuWriteNLatch+0x1fe>
    1f2c:	fe 01       	movw	r30, r28
    1f2e:	e3 5b       	subi	r30, 0xB3	; 179
    1f30:	ff 4f       	sbci	r31, 0xFF	; 255
    1f32:	60 81       	ld	r22, Z
    1f34:	71 81       	ldd	r23, Z+1	; 0x01
    1f36:	82 81       	ldd	r24, Z+2	; 0x02
    1f38:	93 81       	ldd	r25, Z+3	; 0x03
    1f3a:	20 e0       	ldi	r18, 0x00	; 0
    1f3c:	3f ef       	ldi	r19, 0xFF	; 255
    1f3e:	4f e7       	ldi	r20, 0x7F	; 127
    1f40:	57 e4       	ldi	r21, 0x47	; 71
    1f42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f46:	18 16       	cp	r1, r24
    1f48:	0c f0       	brlt	.+2      	; 0x1f4c <LCD_enuWriteNLatch+0x156>
    1f4a:	43 c0       	rjmp	.+134    	; 0x1fd2 <LCD_enuWriteNLatch+0x1dc>
    1f4c:	fe 01       	movw	r30, r28
    1f4e:	ef 5a       	subi	r30, 0xAF	; 175
    1f50:	ff 4f       	sbci	r31, 0xFF	; 255
    1f52:	60 81       	ld	r22, Z
    1f54:	71 81       	ldd	r23, Z+1	; 0x01
    1f56:	82 81       	ldd	r24, Z+2	; 0x02
    1f58:	93 81       	ldd	r25, Z+3	; 0x03
    1f5a:	20 e0       	ldi	r18, 0x00	; 0
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	40 e2       	ldi	r20, 0x20	; 32
    1f60:	51 e4       	ldi	r21, 0x41	; 65
    1f62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f66:	dc 01       	movw	r26, r24
    1f68:	cb 01       	movw	r24, r22
    1f6a:	8e 01       	movw	r16, r28
    1f6c:	05 5b       	subi	r16, 0xB5	; 181
    1f6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f70:	bc 01       	movw	r22, r24
    1f72:	cd 01       	movw	r24, r26
    1f74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f78:	dc 01       	movw	r26, r24
    1f7a:	cb 01       	movw	r24, r22
    1f7c:	f8 01       	movw	r30, r16
    1f7e:	91 83       	std	Z+1, r25	; 0x01
    1f80:	80 83       	st	Z, r24
    1f82:	1f c0       	rjmp	.+62     	; 0x1fc2 <LCD_enuWriteNLatch+0x1cc>
    1f84:	fe 01       	movw	r30, r28
    1f86:	e7 5b       	subi	r30, 0xB7	; 183
    1f88:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8a:	80 e9       	ldi	r24, 0x90	; 144
    1f8c:	91 e0       	ldi	r25, 0x01	; 1
    1f8e:	91 83       	std	Z+1, r25	; 0x01
    1f90:	80 83       	st	Z, r24
    1f92:	fe 01       	movw	r30, r28
    1f94:	e7 5b       	subi	r30, 0xB7	; 183
    1f96:	ff 4f       	sbci	r31, 0xFF	; 255
    1f98:	80 81       	ld	r24, Z
    1f9a:	91 81       	ldd	r25, Z+1	; 0x01
    1f9c:	01 97       	sbiw	r24, 0x01	; 1
    1f9e:	f1 f7       	brne	.-4      	; 0x1f9c <LCD_enuWriteNLatch+0x1a6>
    1fa0:	fe 01       	movw	r30, r28
    1fa2:	e7 5b       	subi	r30, 0xB7	; 183
    1fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa6:	91 83       	std	Z+1, r25	; 0x01
    1fa8:	80 83       	st	Z, r24
    1faa:	de 01       	movw	r26, r28
    1fac:	a5 5b       	subi	r26, 0xB5	; 181
    1fae:	bf 4f       	sbci	r27, 0xFF	; 255
    1fb0:	fe 01       	movw	r30, r28
    1fb2:	e5 5b       	subi	r30, 0xB5	; 181
    1fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb6:	80 81       	ld	r24, Z
    1fb8:	91 81       	ldd	r25, Z+1	; 0x01
    1fba:	01 97       	sbiw	r24, 0x01	; 1
    1fbc:	11 96       	adiw	r26, 0x01	; 1
    1fbe:	9c 93       	st	X, r25
    1fc0:	8e 93       	st	-X, r24
    1fc2:	fe 01       	movw	r30, r28
    1fc4:	e5 5b       	subi	r30, 0xB5	; 181
    1fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc8:	80 81       	ld	r24, Z
    1fca:	91 81       	ldd	r25, Z+1	; 0x01
    1fcc:	00 97       	sbiw	r24, 0x00	; 0
    1fce:	d1 f6       	brne	.-76     	; 0x1f84 <LCD_enuWriteNLatch+0x18e>
    1fd0:	27 c0       	rjmp	.+78     	; 0x2020 <LCD_enuWriteNLatch+0x22a>
    1fd2:	8e 01       	movw	r16, r28
    1fd4:	05 5b       	subi	r16, 0xB5	; 181
    1fd6:	1f 4f       	sbci	r17, 0xFF	; 255
    1fd8:	fe 01       	movw	r30, r28
    1fda:	e3 5b       	subi	r30, 0xB3	; 179
    1fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fde:	60 81       	ld	r22, Z
    1fe0:	71 81       	ldd	r23, Z+1	; 0x01
    1fe2:	82 81       	ldd	r24, Z+2	; 0x02
    1fe4:	93 81       	ldd	r25, Z+3	; 0x03
    1fe6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fea:	dc 01       	movw	r26, r24
    1fec:	cb 01       	movw	r24, r22
    1fee:	f8 01       	movw	r30, r16
    1ff0:	91 83       	std	Z+1, r25	; 0x01
    1ff2:	80 83       	st	Z, r24
    1ff4:	de 01       	movw	r26, r28
    1ff6:	a9 5b       	subi	r26, 0xB9	; 185
    1ff8:	bf 4f       	sbci	r27, 0xFF	; 255
    1ffa:	fe 01       	movw	r30, r28
    1ffc:	e5 5b       	subi	r30, 0xB5	; 181
    1ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    2000:	80 81       	ld	r24, Z
    2002:	91 81       	ldd	r25, Z+1	; 0x01
    2004:	8d 93       	st	X+, r24
    2006:	9c 93       	st	X, r25
    2008:	fe 01       	movw	r30, r28
    200a:	e9 5b       	subi	r30, 0xB9	; 185
    200c:	ff 4f       	sbci	r31, 0xFF	; 255
    200e:	80 81       	ld	r24, Z
    2010:	91 81       	ldd	r25, Z+1	; 0x01
    2012:	01 97       	sbiw	r24, 0x01	; 1
    2014:	f1 f7       	brne	.-4      	; 0x2012 <LCD_enuWriteNLatch+0x21c>
    2016:	fe 01       	movw	r30, r28
    2018:	e9 5b       	subi	r30, 0xB9	; 185
    201a:	ff 4f       	sbci	r31, 0xFF	; 255
    201c:	91 83       	std	Z+1, r25	; 0x01
    201e:	80 83       	st	Z, r24
			_delay_ms(5);
			DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
    2020:	80 e0       	ldi	r24, 0x00	; 0
    2022:	61 e0       	ldi	r22, 0x01	; 1
    2024:	40 e0       	ldi	r20, 0x00	; 0
    2026:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_enuSetPinValue>
    202a:	fe 01       	movw	r30, r28
    202c:	ed 5b       	subi	r30, 0xBD	; 189
    202e:	ff 4f       	sbci	r31, 0xFF	; 255
    2030:	80 e0       	ldi	r24, 0x00	; 0
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	a0 ea       	ldi	r26, 0xA0	; 160
    2036:	b0 e4       	ldi	r27, 0x40	; 64
    2038:	80 83       	st	Z, r24
    203a:	91 83       	std	Z+1, r25	; 0x01
    203c:	a2 83       	std	Z+2, r26	; 0x02
    203e:	b3 83       	std	Z+3, r27	; 0x03
    2040:	8e 01       	movw	r16, r28
    2042:	01 5c       	subi	r16, 0xC1	; 193
    2044:	1f 4f       	sbci	r17, 0xFF	; 255
    2046:	fe 01       	movw	r30, r28
    2048:	ed 5b       	subi	r30, 0xBD	; 189
    204a:	ff 4f       	sbci	r31, 0xFF	; 255
    204c:	60 81       	ld	r22, Z
    204e:	71 81       	ldd	r23, Z+1	; 0x01
    2050:	82 81       	ldd	r24, Z+2	; 0x02
    2052:	93 81       	ldd	r25, Z+3	; 0x03
    2054:	20 e0       	ldi	r18, 0x00	; 0
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	4a e7       	ldi	r20, 0x7A	; 122
    205a:	55 e4       	ldi	r21, 0x45	; 69
    205c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2060:	dc 01       	movw	r26, r24
    2062:	cb 01       	movw	r24, r22
    2064:	f8 01       	movw	r30, r16
    2066:	80 83       	st	Z, r24
    2068:	91 83       	std	Z+1, r25	; 0x01
    206a:	a2 83       	std	Z+2, r26	; 0x02
    206c:	b3 83       	std	Z+3, r27	; 0x03
    206e:	fe 01       	movw	r30, r28
    2070:	ff 96       	adiw	r30, 0x3f	; 63
    2072:	60 81       	ld	r22, Z
    2074:	71 81       	ldd	r23, Z+1	; 0x01
    2076:	82 81       	ldd	r24, Z+2	; 0x02
    2078:	93 81       	ldd	r25, Z+3	; 0x03
    207a:	20 e0       	ldi	r18, 0x00	; 0
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	40 e8       	ldi	r20, 0x80	; 128
    2080:	5f e3       	ldi	r21, 0x3F	; 63
    2082:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2086:	88 23       	and	r24, r24
    2088:	2c f4       	brge	.+10     	; 0x2094 <LCD_enuWriteNLatch+0x29e>
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	9e af       	std	Y+62, r25	; 0x3e
    2090:	8d af       	std	Y+61, r24	; 0x3d
    2092:	46 c0       	rjmp	.+140    	; 0x2120 <LCD_enuWriteNLatch+0x32a>
    2094:	fe 01       	movw	r30, r28
    2096:	ff 96       	adiw	r30, 0x3f	; 63
    2098:	60 81       	ld	r22, Z
    209a:	71 81       	ldd	r23, Z+1	; 0x01
    209c:	82 81       	ldd	r24, Z+2	; 0x02
    209e:	93 81       	ldd	r25, Z+3	; 0x03
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	3f ef       	ldi	r19, 0xFF	; 255
    20a4:	4f e7       	ldi	r20, 0x7F	; 127
    20a6:	57 e4       	ldi	r21, 0x47	; 71
    20a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20ac:	18 16       	cp	r1, r24
    20ae:	64 f5       	brge	.+88     	; 0x2108 <LCD_enuWriteNLatch+0x312>
    20b0:	fe 01       	movw	r30, r28
    20b2:	ed 5b       	subi	r30, 0xBD	; 189
    20b4:	ff 4f       	sbci	r31, 0xFF	; 255
    20b6:	60 81       	ld	r22, Z
    20b8:	71 81       	ldd	r23, Z+1	; 0x01
    20ba:	82 81       	ldd	r24, Z+2	; 0x02
    20bc:	93 81       	ldd	r25, Z+3	; 0x03
    20be:	20 e0       	ldi	r18, 0x00	; 0
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	40 e2       	ldi	r20, 0x20	; 32
    20c4:	51 e4       	ldi	r21, 0x41	; 65
    20c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ca:	dc 01       	movw	r26, r24
    20cc:	cb 01       	movw	r24, r22
    20ce:	bc 01       	movw	r22, r24
    20d0:	cd 01       	movw	r24, r26
    20d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d6:	dc 01       	movw	r26, r24
    20d8:	cb 01       	movw	r24, r22
    20da:	9e af       	std	Y+62, r25	; 0x3e
    20dc:	8d af       	std	Y+61, r24	; 0x3d
    20de:	0f c0       	rjmp	.+30     	; 0x20fe <LCD_enuWriteNLatch+0x308>
    20e0:	80 e9       	ldi	r24, 0x90	; 144
    20e2:	91 e0       	ldi	r25, 0x01	; 1
    20e4:	9c af       	std	Y+60, r25	; 0x3c
    20e6:	8b af       	std	Y+59, r24	; 0x3b
    20e8:	8b ad       	ldd	r24, Y+59	; 0x3b
    20ea:	9c ad       	ldd	r25, Y+60	; 0x3c
    20ec:	01 97       	sbiw	r24, 0x01	; 1
    20ee:	f1 f7       	brne	.-4      	; 0x20ec <LCD_enuWriteNLatch+0x2f6>
    20f0:	9c af       	std	Y+60, r25	; 0x3c
    20f2:	8b af       	std	Y+59, r24	; 0x3b
    20f4:	8d ad       	ldd	r24, Y+61	; 0x3d
    20f6:	9e ad       	ldd	r25, Y+62	; 0x3e
    20f8:	01 97       	sbiw	r24, 0x01	; 1
    20fa:	9e af       	std	Y+62, r25	; 0x3e
    20fc:	8d af       	std	Y+61, r24	; 0x3d
    20fe:	8d ad       	ldd	r24, Y+61	; 0x3d
    2100:	9e ad       	ldd	r25, Y+62	; 0x3e
    2102:	00 97       	sbiw	r24, 0x00	; 0
    2104:	69 f7       	brne	.-38     	; 0x20e0 <LCD_enuWriteNLatch+0x2ea>
    2106:	16 c0       	rjmp	.+44     	; 0x2134 <LCD_enuWriteNLatch+0x33e>
    2108:	fe 01       	movw	r30, r28
    210a:	ff 96       	adiw	r30, 0x3f	; 63
    210c:	60 81       	ld	r22, Z
    210e:	71 81       	ldd	r23, Z+1	; 0x01
    2110:	82 81       	ldd	r24, Z+2	; 0x02
    2112:	93 81       	ldd	r25, Z+3	; 0x03
    2114:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	9e af       	std	Y+62, r25	; 0x3e
    211e:	8d af       	std	Y+61, r24	; 0x3d
    2120:	8d ad       	ldd	r24, Y+61	; 0x3d
    2122:	9e ad       	ldd	r25, Y+62	; 0x3e
    2124:	9a af       	std	Y+58, r25	; 0x3a
    2126:	89 af       	std	Y+57, r24	; 0x39
    2128:	89 ad       	ldd	r24, Y+57	; 0x39
    212a:	9a ad       	ldd	r25, Y+58	; 0x3a
    212c:	01 97       	sbiw	r24, 0x01	; 1
    212e:	f1 f7       	brne	.-4      	; 0x212c <LCD_enuWriteNLatch+0x336>
    2130:	9a af       	std	Y+58, r25	; 0x3a
    2132:	89 af       	std	Y+57, r24	; 0x39
		}
	}

#if LCD_MODE == FOUR_BIT //'A' =65=0b 0100  0001

	DIO_enuSetPinValue(D7_PORT, D7_PIN , ((Copy_u8Data>>7)&1));
    2134:	fe 01       	movw	r30, r28
    2136:	ea 5a       	subi	r30, 0xAA	; 170
    2138:	ff 4f       	sbci	r31, 0xFF	; 255
    213a:	80 81       	ld	r24, Z
    213c:	98 2f       	mov	r25, r24
    213e:	99 1f       	adc	r25, r25
    2140:	99 27       	eor	r25, r25
    2142:	99 1f       	adc	r25, r25
    2144:	80 e0       	ldi	r24, 0x00	; 0
    2146:	67 e0       	ldi	r22, 0x07	; 7
    2148:	49 2f       	mov	r20, r25
    214a:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT, D6_PIN , ((Copy_u8Data>>6)&1));
    214e:	fe 01       	movw	r30, r28
    2150:	ea 5a       	subi	r30, 0xAA	; 170
    2152:	ff 4f       	sbci	r31, 0xFF	; 255
    2154:	80 81       	ld	r24, Z
    2156:	82 95       	swap	r24
    2158:	86 95       	lsr	r24
    215a:	86 95       	lsr	r24
    215c:	83 70       	andi	r24, 0x03	; 3
    215e:	98 2f       	mov	r25, r24
    2160:	91 70       	andi	r25, 0x01	; 1
    2162:	80 e0       	ldi	r24, 0x00	; 0
    2164:	66 e0       	ldi	r22, 0x06	; 6
    2166:	49 2f       	mov	r20, r25
    2168:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT, D5_PIN , ((Copy_u8Data>>5)&1));
    216c:	fe 01       	movw	r30, r28
    216e:	ea 5a       	subi	r30, 0xAA	; 170
    2170:	ff 4f       	sbci	r31, 0xFF	; 255
    2172:	80 81       	ld	r24, Z
    2174:	82 95       	swap	r24
    2176:	86 95       	lsr	r24
    2178:	87 70       	andi	r24, 0x07	; 7
    217a:	98 2f       	mov	r25, r24
    217c:	91 70       	andi	r25, 0x01	; 1
    217e:	80 e0       	ldi	r24, 0x00	; 0
    2180:	65 e0       	ldi	r22, 0x05	; 5
    2182:	49 2f       	mov	r20, r25
    2184:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT, D4_PIN , ((Copy_u8Data>>4)&1));
    2188:	fe 01       	movw	r30, r28
    218a:	ea 5a       	subi	r30, 0xAA	; 170
    218c:	ff 4f       	sbci	r31, 0xFF	; 255
    218e:	80 81       	ld	r24, Z
    2190:	82 95       	swap	r24
    2192:	8f 70       	andi	r24, 0x0F	; 15
    2194:	98 2f       	mov	r25, r24
    2196:	91 70       	andi	r25, 0x01	; 1
    2198:	80 e0       	ldi	r24, 0x00	; 0
    219a:	64 e0       	ldi	r22, 0x04	; 4
    219c:	49 2f       	mov	r20, r25
    219e:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(EN_PORT, EN_PIN , DIO_u8HIGH);
    21a2:	80 e0       	ldi	r24, 0x00	; 0
    21a4:	61 e0       	ldi	r22, 0x01	; 1
    21a6:	41 e0       	ldi	r20, 0x01	; 1
    21a8:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_enuSetPinValue>
    21ac:	80 e0       	ldi	r24, 0x00	; 0
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	a0 ea       	ldi	r26, 0xA0	; 160
    21b2:	b0 e4       	ldi	r27, 0x40	; 64
    21b4:	8d ab       	std	Y+53, r24	; 0x35
    21b6:	9e ab       	std	Y+54, r25	; 0x36
    21b8:	af ab       	std	Y+55, r26	; 0x37
    21ba:	b8 af       	std	Y+56, r27	; 0x38
    21bc:	6d a9       	ldd	r22, Y+53	; 0x35
    21be:	7e a9       	ldd	r23, Y+54	; 0x36
    21c0:	8f a9       	ldd	r24, Y+55	; 0x37
    21c2:	98 ad       	ldd	r25, Y+56	; 0x38
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	4a e7       	ldi	r20, 0x7A	; 122
    21ca:	55 e4       	ldi	r21, 0x45	; 69
    21cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d0:	dc 01       	movw	r26, r24
    21d2:	cb 01       	movw	r24, r22
    21d4:	89 ab       	std	Y+49, r24	; 0x31
    21d6:	9a ab       	std	Y+50, r25	; 0x32
    21d8:	ab ab       	std	Y+51, r26	; 0x33
    21da:	bc ab       	std	Y+52, r27	; 0x34
    21dc:	69 a9       	ldd	r22, Y+49	; 0x31
    21de:	7a a9       	ldd	r23, Y+50	; 0x32
    21e0:	8b a9       	ldd	r24, Y+51	; 0x33
    21e2:	9c a9       	ldd	r25, Y+52	; 0x34
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	40 e8       	ldi	r20, 0x80	; 128
    21ea:	5f e3       	ldi	r21, 0x3F	; 63
    21ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21f0:	88 23       	and	r24, r24
    21f2:	2c f4       	brge	.+10     	; 0x21fe <LCD_enuWriteNLatch+0x408>
    21f4:	81 e0       	ldi	r24, 0x01	; 1
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	98 ab       	std	Y+48, r25	; 0x30
    21fa:	8f a7       	std	Y+47, r24	; 0x2f
    21fc:	3f c0       	rjmp	.+126    	; 0x227c <LCD_enuWriteNLatch+0x486>
    21fe:	69 a9       	ldd	r22, Y+49	; 0x31
    2200:	7a a9       	ldd	r23, Y+50	; 0x32
    2202:	8b a9       	ldd	r24, Y+51	; 0x33
    2204:	9c a9       	ldd	r25, Y+52	; 0x34
    2206:	20 e0       	ldi	r18, 0x00	; 0
    2208:	3f ef       	ldi	r19, 0xFF	; 255
    220a:	4f e7       	ldi	r20, 0x7F	; 127
    220c:	57 e4       	ldi	r21, 0x47	; 71
    220e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2212:	18 16       	cp	r1, r24
    2214:	4c f5       	brge	.+82     	; 0x2268 <LCD_enuWriteNLatch+0x472>
    2216:	6d a9       	ldd	r22, Y+53	; 0x35
    2218:	7e a9       	ldd	r23, Y+54	; 0x36
    221a:	8f a9       	ldd	r24, Y+55	; 0x37
    221c:	98 ad       	ldd	r25, Y+56	; 0x38
    221e:	20 e0       	ldi	r18, 0x00	; 0
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	40 e2       	ldi	r20, 0x20	; 32
    2224:	51 e4       	ldi	r21, 0x41	; 65
    2226:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    222a:	dc 01       	movw	r26, r24
    222c:	cb 01       	movw	r24, r22
    222e:	bc 01       	movw	r22, r24
    2230:	cd 01       	movw	r24, r26
    2232:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	98 ab       	std	Y+48, r25	; 0x30
    223c:	8f a7       	std	Y+47, r24	; 0x2f
    223e:	0f c0       	rjmp	.+30     	; 0x225e <LCD_enuWriteNLatch+0x468>
    2240:	80 e9       	ldi	r24, 0x90	; 144
    2242:	91 e0       	ldi	r25, 0x01	; 1
    2244:	9e a7       	std	Y+46, r25	; 0x2e
    2246:	8d a7       	std	Y+45, r24	; 0x2d
    2248:	8d a5       	ldd	r24, Y+45	; 0x2d
    224a:	9e a5       	ldd	r25, Y+46	; 0x2e
    224c:	01 97       	sbiw	r24, 0x01	; 1
    224e:	f1 f7       	brne	.-4      	; 0x224c <LCD_enuWriteNLatch+0x456>
    2250:	9e a7       	std	Y+46, r25	; 0x2e
    2252:	8d a7       	std	Y+45, r24	; 0x2d
    2254:	8f a5       	ldd	r24, Y+47	; 0x2f
    2256:	98 a9       	ldd	r25, Y+48	; 0x30
    2258:	01 97       	sbiw	r24, 0x01	; 1
    225a:	98 ab       	std	Y+48, r25	; 0x30
    225c:	8f a7       	std	Y+47, r24	; 0x2f
    225e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2260:	98 a9       	ldd	r25, Y+48	; 0x30
    2262:	00 97       	sbiw	r24, 0x00	; 0
    2264:	69 f7       	brne	.-38     	; 0x2240 <LCD_enuWriteNLatch+0x44a>
    2266:	14 c0       	rjmp	.+40     	; 0x2290 <LCD_enuWriteNLatch+0x49a>
    2268:	69 a9       	ldd	r22, Y+49	; 0x31
    226a:	7a a9       	ldd	r23, Y+50	; 0x32
    226c:	8b a9       	ldd	r24, Y+51	; 0x33
    226e:	9c a9       	ldd	r25, Y+52	; 0x34
    2270:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2274:	dc 01       	movw	r26, r24
    2276:	cb 01       	movw	r24, r22
    2278:	98 ab       	std	Y+48, r25	; 0x30
    227a:	8f a7       	std	Y+47, r24	; 0x2f
    227c:	8f a5       	ldd	r24, Y+47	; 0x2f
    227e:	98 a9       	ldd	r25, Y+48	; 0x30
    2280:	9c a7       	std	Y+44, r25	; 0x2c
    2282:	8b a7       	std	Y+43, r24	; 0x2b
    2284:	8b a5       	ldd	r24, Y+43	; 0x2b
    2286:	9c a5       	ldd	r25, Y+44	; 0x2c
    2288:	01 97       	sbiw	r24, 0x01	; 1
    228a:	f1 f7       	brne	.-4      	; 0x2288 <LCD_enuWriteNLatch+0x492>
    228c:	9c a7       	std	Y+44, r25	; 0x2c
    228e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5);
	DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
    2290:	80 e0       	ldi	r24, 0x00	; 0
    2292:	61 e0       	ldi	r22, 0x01	; 1
    2294:	40 e0       	ldi	r20, 0x00	; 0
    2296:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_enuSetPinValue>
    229a:	80 e0       	ldi	r24, 0x00	; 0
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	a0 ea       	ldi	r26, 0xA0	; 160
    22a0:	b0 e4       	ldi	r27, 0x40	; 64
    22a2:	8f a3       	std	Y+39, r24	; 0x27
    22a4:	98 a7       	std	Y+40, r25	; 0x28
    22a6:	a9 a7       	std	Y+41, r26	; 0x29
    22a8:	ba a7       	std	Y+42, r27	; 0x2a
    22aa:	6f a1       	ldd	r22, Y+39	; 0x27
    22ac:	78 a5       	ldd	r23, Y+40	; 0x28
    22ae:	89 a5       	ldd	r24, Y+41	; 0x29
    22b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    22b2:	20 e0       	ldi	r18, 0x00	; 0
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	4a e7       	ldi	r20, 0x7A	; 122
    22b8:	55 e4       	ldi	r21, 0x45	; 69
    22ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22be:	dc 01       	movw	r26, r24
    22c0:	cb 01       	movw	r24, r22
    22c2:	8b a3       	std	Y+35, r24	; 0x23
    22c4:	9c a3       	std	Y+36, r25	; 0x24
    22c6:	ad a3       	std	Y+37, r26	; 0x25
    22c8:	be a3       	std	Y+38, r27	; 0x26
    22ca:	6b a1       	ldd	r22, Y+35	; 0x23
    22cc:	7c a1       	ldd	r23, Y+36	; 0x24
    22ce:	8d a1       	ldd	r24, Y+37	; 0x25
    22d0:	9e a1       	ldd	r25, Y+38	; 0x26
    22d2:	20 e0       	ldi	r18, 0x00	; 0
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	40 e8       	ldi	r20, 0x80	; 128
    22d8:	5f e3       	ldi	r21, 0x3F	; 63
    22da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22de:	88 23       	and	r24, r24
    22e0:	2c f4       	brge	.+10     	; 0x22ec <LCD_enuWriteNLatch+0x4f6>
    22e2:	81 e0       	ldi	r24, 0x01	; 1
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	9a a3       	std	Y+34, r25	; 0x22
    22e8:	89 a3       	std	Y+33, r24	; 0x21
    22ea:	3f c0       	rjmp	.+126    	; 0x236a <LCD_enuWriteNLatch+0x574>
    22ec:	6b a1       	ldd	r22, Y+35	; 0x23
    22ee:	7c a1       	ldd	r23, Y+36	; 0x24
    22f0:	8d a1       	ldd	r24, Y+37	; 0x25
    22f2:	9e a1       	ldd	r25, Y+38	; 0x26
    22f4:	20 e0       	ldi	r18, 0x00	; 0
    22f6:	3f ef       	ldi	r19, 0xFF	; 255
    22f8:	4f e7       	ldi	r20, 0x7F	; 127
    22fa:	57 e4       	ldi	r21, 0x47	; 71
    22fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2300:	18 16       	cp	r1, r24
    2302:	4c f5       	brge	.+82     	; 0x2356 <LCD_enuWriteNLatch+0x560>
    2304:	6f a1       	ldd	r22, Y+39	; 0x27
    2306:	78 a5       	ldd	r23, Y+40	; 0x28
    2308:	89 a5       	ldd	r24, Y+41	; 0x29
    230a:	9a a5       	ldd	r25, Y+42	; 0x2a
    230c:	20 e0       	ldi	r18, 0x00	; 0
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	40 e2       	ldi	r20, 0x20	; 32
    2312:	51 e4       	ldi	r21, 0x41	; 65
    2314:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2318:	dc 01       	movw	r26, r24
    231a:	cb 01       	movw	r24, r22
    231c:	bc 01       	movw	r22, r24
    231e:	cd 01       	movw	r24, r26
    2320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	9a a3       	std	Y+34, r25	; 0x22
    232a:	89 a3       	std	Y+33, r24	; 0x21
    232c:	0f c0       	rjmp	.+30     	; 0x234c <LCD_enuWriteNLatch+0x556>
    232e:	80 e9       	ldi	r24, 0x90	; 144
    2330:	91 e0       	ldi	r25, 0x01	; 1
    2332:	98 a3       	std	Y+32, r25	; 0x20
    2334:	8f 8f       	std	Y+31, r24	; 0x1f
    2336:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2338:	98 a1       	ldd	r25, Y+32	; 0x20
    233a:	01 97       	sbiw	r24, 0x01	; 1
    233c:	f1 f7       	brne	.-4      	; 0x233a <LCD_enuWriteNLatch+0x544>
    233e:	98 a3       	std	Y+32, r25	; 0x20
    2340:	8f 8f       	std	Y+31, r24	; 0x1f
    2342:	89 a1       	ldd	r24, Y+33	; 0x21
    2344:	9a a1       	ldd	r25, Y+34	; 0x22
    2346:	01 97       	sbiw	r24, 0x01	; 1
    2348:	9a a3       	std	Y+34, r25	; 0x22
    234a:	89 a3       	std	Y+33, r24	; 0x21
    234c:	89 a1       	ldd	r24, Y+33	; 0x21
    234e:	9a a1       	ldd	r25, Y+34	; 0x22
    2350:	00 97       	sbiw	r24, 0x00	; 0
    2352:	69 f7       	brne	.-38     	; 0x232e <LCD_enuWriteNLatch+0x538>
    2354:	14 c0       	rjmp	.+40     	; 0x237e <LCD_enuWriteNLatch+0x588>
    2356:	6b a1       	ldd	r22, Y+35	; 0x23
    2358:	7c a1       	ldd	r23, Y+36	; 0x24
    235a:	8d a1       	ldd	r24, Y+37	; 0x25
    235c:	9e a1       	ldd	r25, Y+38	; 0x26
    235e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2362:	dc 01       	movw	r26, r24
    2364:	cb 01       	movw	r24, r22
    2366:	9a a3       	std	Y+34, r25	; 0x22
    2368:	89 a3       	std	Y+33, r24	; 0x21
    236a:	89 a1       	ldd	r24, Y+33	; 0x21
    236c:	9a a1       	ldd	r25, Y+34	; 0x22
    236e:	9e 8f       	std	Y+30, r25	; 0x1e
    2370:	8d 8f       	std	Y+29, r24	; 0x1d
    2372:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2374:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2376:	01 97       	sbiw	r24, 0x01	; 1
    2378:	f1 f7       	brne	.-4      	; 0x2376 <LCD_enuWriteNLatch+0x580>
    237a:	9e 8f       	std	Y+30, r25	; 0x1e
    237c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);


	DIO_enuSetPinValue(D7_PORT, D7_PIN , ((Copy_u8Data>>3)&1));
    237e:	fe 01       	movw	r30, r28
    2380:	ea 5a       	subi	r30, 0xAA	; 170
    2382:	ff 4f       	sbci	r31, 0xFF	; 255
    2384:	80 81       	ld	r24, Z
    2386:	86 95       	lsr	r24
    2388:	86 95       	lsr	r24
    238a:	86 95       	lsr	r24
    238c:	98 2f       	mov	r25, r24
    238e:	91 70       	andi	r25, 0x01	; 1
    2390:	80 e0       	ldi	r24, 0x00	; 0
    2392:	67 e0       	ldi	r22, 0x07	; 7
    2394:	49 2f       	mov	r20, r25
    2396:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT, D6_PIN , ((Copy_u8Data>>2)&1));
    239a:	fe 01       	movw	r30, r28
    239c:	ea 5a       	subi	r30, 0xAA	; 170
    239e:	ff 4f       	sbci	r31, 0xFF	; 255
    23a0:	80 81       	ld	r24, Z
    23a2:	86 95       	lsr	r24
    23a4:	86 95       	lsr	r24
    23a6:	98 2f       	mov	r25, r24
    23a8:	91 70       	andi	r25, 0x01	; 1
    23aa:	80 e0       	ldi	r24, 0x00	; 0
    23ac:	66 e0       	ldi	r22, 0x06	; 6
    23ae:	49 2f       	mov	r20, r25
    23b0:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT, D5_PIN , ((Copy_u8Data>>1)&1));
    23b4:	fe 01       	movw	r30, r28
    23b6:	ea 5a       	subi	r30, 0xAA	; 170
    23b8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ba:	80 81       	ld	r24, Z
    23bc:	86 95       	lsr	r24
    23be:	98 2f       	mov	r25, r24
    23c0:	91 70       	andi	r25, 0x01	; 1
    23c2:	80 e0       	ldi	r24, 0x00	; 0
    23c4:	65 e0       	ldi	r22, 0x05	; 5
    23c6:	49 2f       	mov	r20, r25
    23c8:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT, D4_PIN , ((Copy_u8Data>>0)&1));
    23cc:	fe 01       	movw	r30, r28
    23ce:	ea 5a       	subi	r30, 0xAA	; 170
    23d0:	ff 4f       	sbci	r31, 0xFF	; 255
    23d2:	80 81       	ld	r24, Z
    23d4:	98 2f       	mov	r25, r24
    23d6:	91 70       	andi	r25, 0x01	; 1
    23d8:	80 e0       	ldi	r24, 0x00	; 0
    23da:	64 e0       	ldi	r22, 0x04	; 4
    23dc:	49 2f       	mov	r20, r25
    23de:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(EN_PORT, EN_PIN , DIO_u8HIGH);
    23e2:	80 e0       	ldi	r24, 0x00	; 0
    23e4:	61 e0       	ldi	r22, 0x01	; 1
    23e6:	41 e0       	ldi	r20, 0x01	; 1
    23e8:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_enuSetPinValue>
    23ec:	80 e0       	ldi	r24, 0x00	; 0
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	a0 ea       	ldi	r26, 0xA0	; 160
    23f2:	b0 e4       	ldi	r27, 0x40	; 64
    23f4:	89 8f       	std	Y+25, r24	; 0x19
    23f6:	9a 8f       	std	Y+26, r25	; 0x1a
    23f8:	ab 8f       	std	Y+27, r26	; 0x1b
    23fa:	bc 8f       	std	Y+28, r27	; 0x1c
    23fc:	69 8d       	ldd	r22, Y+25	; 0x19
    23fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2400:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2402:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2404:	20 e0       	ldi	r18, 0x00	; 0
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	4a e7       	ldi	r20, 0x7A	; 122
    240a:	55 e4       	ldi	r21, 0x45	; 69
    240c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2410:	dc 01       	movw	r26, r24
    2412:	cb 01       	movw	r24, r22
    2414:	8d 8b       	std	Y+21, r24	; 0x15
    2416:	9e 8b       	std	Y+22, r25	; 0x16
    2418:	af 8b       	std	Y+23, r26	; 0x17
    241a:	b8 8f       	std	Y+24, r27	; 0x18
    241c:	6d 89       	ldd	r22, Y+21	; 0x15
    241e:	7e 89       	ldd	r23, Y+22	; 0x16
    2420:	8f 89       	ldd	r24, Y+23	; 0x17
    2422:	98 8d       	ldd	r25, Y+24	; 0x18
    2424:	20 e0       	ldi	r18, 0x00	; 0
    2426:	30 e0       	ldi	r19, 0x00	; 0
    2428:	40 e8       	ldi	r20, 0x80	; 128
    242a:	5f e3       	ldi	r21, 0x3F	; 63
    242c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2430:	88 23       	and	r24, r24
    2432:	2c f4       	brge	.+10     	; 0x243e <LCD_enuWriteNLatch+0x648>
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	9c 8b       	std	Y+20, r25	; 0x14
    243a:	8b 8b       	std	Y+19, r24	; 0x13
    243c:	3f c0       	rjmp	.+126    	; 0x24bc <LCD_enuWriteNLatch+0x6c6>
    243e:	6d 89       	ldd	r22, Y+21	; 0x15
    2440:	7e 89       	ldd	r23, Y+22	; 0x16
    2442:	8f 89       	ldd	r24, Y+23	; 0x17
    2444:	98 8d       	ldd	r25, Y+24	; 0x18
    2446:	20 e0       	ldi	r18, 0x00	; 0
    2448:	3f ef       	ldi	r19, 0xFF	; 255
    244a:	4f e7       	ldi	r20, 0x7F	; 127
    244c:	57 e4       	ldi	r21, 0x47	; 71
    244e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2452:	18 16       	cp	r1, r24
    2454:	4c f5       	brge	.+82     	; 0x24a8 <LCD_enuWriteNLatch+0x6b2>
    2456:	69 8d       	ldd	r22, Y+25	; 0x19
    2458:	7a 8d       	ldd	r23, Y+26	; 0x1a
    245a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    245c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    245e:	20 e0       	ldi	r18, 0x00	; 0
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	40 e2       	ldi	r20, 0x20	; 32
    2464:	51 e4       	ldi	r21, 0x41	; 65
    2466:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    246a:	dc 01       	movw	r26, r24
    246c:	cb 01       	movw	r24, r22
    246e:	bc 01       	movw	r22, r24
    2470:	cd 01       	movw	r24, r26
    2472:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2476:	dc 01       	movw	r26, r24
    2478:	cb 01       	movw	r24, r22
    247a:	9c 8b       	std	Y+20, r25	; 0x14
    247c:	8b 8b       	std	Y+19, r24	; 0x13
    247e:	0f c0       	rjmp	.+30     	; 0x249e <LCD_enuWriteNLatch+0x6a8>
    2480:	80 e9       	ldi	r24, 0x90	; 144
    2482:	91 e0       	ldi	r25, 0x01	; 1
    2484:	9a 8b       	std	Y+18, r25	; 0x12
    2486:	89 8b       	std	Y+17, r24	; 0x11
    2488:	89 89       	ldd	r24, Y+17	; 0x11
    248a:	9a 89       	ldd	r25, Y+18	; 0x12
    248c:	01 97       	sbiw	r24, 0x01	; 1
    248e:	f1 f7       	brne	.-4      	; 0x248c <LCD_enuWriteNLatch+0x696>
    2490:	9a 8b       	std	Y+18, r25	; 0x12
    2492:	89 8b       	std	Y+17, r24	; 0x11
    2494:	8b 89       	ldd	r24, Y+19	; 0x13
    2496:	9c 89       	ldd	r25, Y+20	; 0x14
    2498:	01 97       	sbiw	r24, 0x01	; 1
    249a:	9c 8b       	std	Y+20, r25	; 0x14
    249c:	8b 8b       	std	Y+19, r24	; 0x13
    249e:	8b 89       	ldd	r24, Y+19	; 0x13
    24a0:	9c 89       	ldd	r25, Y+20	; 0x14
    24a2:	00 97       	sbiw	r24, 0x00	; 0
    24a4:	69 f7       	brne	.-38     	; 0x2480 <LCD_enuWriteNLatch+0x68a>
    24a6:	14 c0       	rjmp	.+40     	; 0x24d0 <LCD_enuWriteNLatch+0x6da>
    24a8:	6d 89       	ldd	r22, Y+21	; 0x15
    24aa:	7e 89       	ldd	r23, Y+22	; 0x16
    24ac:	8f 89       	ldd	r24, Y+23	; 0x17
    24ae:	98 8d       	ldd	r25, Y+24	; 0x18
    24b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	9c 8b       	std	Y+20, r25	; 0x14
    24ba:	8b 8b       	std	Y+19, r24	; 0x13
    24bc:	8b 89       	ldd	r24, Y+19	; 0x13
    24be:	9c 89       	ldd	r25, Y+20	; 0x14
    24c0:	98 8b       	std	Y+16, r25	; 0x10
    24c2:	8f 87       	std	Y+15, r24	; 0x0f
    24c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    24c6:	98 89       	ldd	r25, Y+16	; 0x10
    24c8:	01 97       	sbiw	r24, 0x01	; 1
    24ca:	f1 f7       	brne	.-4      	; 0x24c8 <LCD_enuWriteNLatch+0x6d2>
    24cc:	98 8b       	std	Y+16, r25	; 0x10
    24ce:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
    24d0:	80 e0       	ldi	r24, 0x00	; 0
    24d2:	61 e0       	ldi	r22, 0x01	; 1
    24d4:	40 e0       	ldi	r20, 0x00	; 0
    24d6:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_enuSetPinValue>
    24da:	80 e0       	ldi	r24, 0x00	; 0
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	a0 ea       	ldi	r26, 0xA0	; 160
    24e0:	b0 e4       	ldi	r27, 0x40	; 64
    24e2:	8b 87       	std	Y+11, r24	; 0x0b
    24e4:	9c 87       	std	Y+12, r25	; 0x0c
    24e6:	ad 87       	std	Y+13, r26	; 0x0d
    24e8:	be 87       	std	Y+14, r27	; 0x0e
    24ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    24ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    24f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	4a e7       	ldi	r20, 0x7A	; 122
    24f8:	55 e4       	ldi	r21, 0x45	; 69
    24fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	8f 83       	std	Y+7, r24	; 0x07
    2504:	98 87       	std	Y+8, r25	; 0x08
    2506:	a9 87       	std	Y+9, r26	; 0x09
    2508:	ba 87       	std	Y+10, r27	; 0x0a
    250a:	6f 81       	ldd	r22, Y+7	; 0x07
    250c:	78 85       	ldd	r23, Y+8	; 0x08
    250e:	89 85       	ldd	r24, Y+9	; 0x09
    2510:	9a 85       	ldd	r25, Y+10	; 0x0a
    2512:	20 e0       	ldi	r18, 0x00	; 0
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	40 e8       	ldi	r20, 0x80	; 128
    2518:	5f e3       	ldi	r21, 0x3F	; 63
    251a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    251e:	88 23       	and	r24, r24
    2520:	2c f4       	brge	.+10     	; 0x252c <LCD_enuWriteNLatch+0x736>
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	9e 83       	std	Y+6, r25	; 0x06
    2528:	8d 83       	std	Y+5, r24	; 0x05
    252a:	3f c0       	rjmp	.+126    	; 0x25aa <LCD_enuWriteNLatch+0x7b4>
    252c:	6f 81       	ldd	r22, Y+7	; 0x07
    252e:	78 85       	ldd	r23, Y+8	; 0x08
    2530:	89 85       	ldd	r24, Y+9	; 0x09
    2532:	9a 85       	ldd	r25, Y+10	; 0x0a
    2534:	20 e0       	ldi	r18, 0x00	; 0
    2536:	3f ef       	ldi	r19, 0xFF	; 255
    2538:	4f e7       	ldi	r20, 0x7F	; 127
    253a:	57 e4       	ldi	r21, 0x47	; 71
    253c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2540:	18 16       	cp	r1, r24
    2542:	4c f5       	brge	.+82     	; 0x2596 <LCD_enuWriteNLatch+0x7a0>
    2544:	6b 85       	ldd	r22, Y+11	; 0x0b
    2546:	7c 85       	ldd	r23, Y+12	; 0x0c
    2548:	8d 85       	ldd	r24, Y+13	; 0x0d
    254a:	9e 85       	ldd	r25, Y+14	; 0x0e
    254c:	20 e0       	ldi	r18, 0x00	; 0
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	40 e2       	ldi	r20, 0x20	; 32
    2552:	51 e4       	ldi	r21, 0x41	; 65
    2554:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2558:	dc 01       	movw	r26, r24
    255a:	cb 01       	movw	r24, r22
    255c:	bc 01       	movw	r22, r24
    255e:	cd 01       	movw	r24, r26
    2560:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2564:	dc 01       	movw	r26, r24
    2566:	cb 01       	movw	r24, r22
    2568:	9e 83       	std	Y+6, r25	; 0x06
    256a:	8d 83       	std	Y+5, r24	; 0x05
    256c:	0f c0       	rjmp	.+30     	; 0x258c <LCD_enuWriteNLatch+0x796>
    256e:	80 e9       	ldi	r24, 0x90	; 144
    2570:	91 e0       	ldi	r25, 0x01	; 1
    2572:	9c 83       	std	Y+4, r25	; 0x04
    2574:	8b 83       	std	Y+3, r24	; 0x03
    2576:	8b 81       	ldd	r24, Y+3	; 0x03
    2578:	9c 81       	ldd	r25, Y+4	; 0x04
    257a:	01 97       	sbiw	r24, 0x01	; 1
    257c:	f1 f7       	brne	.-4      	; 0x257a <LCD_enuWriteNLatch+0x784>
    257e:	9c 83       	std	Y+4, r25	; 0x04
    2580:	8b 83       	std	Y+3, r24	; 0x03
    2582:	8d 81       	ldd	r24, Y+5	; 0x05
    2584:	9e 81       	ldd	r25, Y+6	; 0x06
    2586:	01 97       	sbiw	r24, 0x01	; 1
    2588:	9e 83       	std	Y+6, r25	; 0x06
    258a:	8d 83       	std	Y+5, r24	; 0x05
    258c:	8d 81       	ldd	r24, Y+5	; 0x05
    258e:	9e 81       	ldd	r25, Y+6	; 0x06
    2590:	00 97       	sbiw	r24, 0x00	; 0
    2592:	69 f7       	brne	.-38     	; 0x256e <LCD_enuWriteNLatch+0x778>
    2594:	14 c0       	rjmp	.+40     	; 0x25be <LCD_enuWriteNLatch+0x7c8>
    2596:	6f 81       	ldd	r22, Y+7	; 0x07
    2598:	78 85       	ldd	r23, Y+8	; 0x08
    259a:	89 85       	ldd	r24, Y+9	; 0x09
    259c:	9a 85       	ldd	r25, Y+10	; 0x0a
    259e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a2:	dc 01       	movw	r26, r24
    25a4:	cb 01       	movw	r24, r22
    25a6:	9e 83       	std	Y+6, r25	; 0x06
    25a8:	8d 83       	std	Y+5, r24	; 0x05
    25aa:	8d 81       	ldd	r24, Y+5	; 0x05
    25ac:	9e 81       	ldd	r25, Y+6	; 0x06
    25ae:	9a 83       	std	Y+2, r25	; 0x02
    25b0:	89 83       	std	Y+1, r24	; 0x01
    25b2:	89 81       	ldd	r24, Y+1	; 0x01
    25b4:	9a 81       	ldd	r25, Y+2	; 0x02
    25b6:	01 97       	sbiw	r24, 0x01	; 1
    25b8:	f1 f7       	brne	.-4      	; 0x25b6 <LCD_enuWriteNLatch+0x7c0>
    25ba:	9a 83       	std	Y+2, r25	; 0x02
    25bc:	89 83       	std	Y+1, r24	; 0x01
#else
#error"LCD mode is wrong"
#endif


	return Local_u8ErrorState;
    25be:	fe 01       	movw	r30, r28
    25c0:	eb 5a       	subi	r30, 0xAB	; 171
    25c2:	ff 4f       	sbci	r31, 0xFF	; 255
    25c4:	80 81       	ld	r24, Z
}
    25c6:	ca 5a       	subi	r28, 0xAA	; 170
    25c8:	df 4f       	sbci	r29, 0xFF	; 255
    25ca:	0f b6       	in	r0, 0x3f	; 63
    25cc:	f8 94       	cli
    25ce:	de bf       	out	0x3e, r29	; 62
    25d0:	0f be       	out	0x3f, r0	; 63
    25d2:	cd bf       	out	0x3d, r28	; 61
    25d4:	cf 91       	pop	r28
    25d6:	df 91       	pop	r29
    25d8:	1f 91       	pop	r17
    25da:	0f 91       	pop	r16
    25dc:	08 95       	ret

000025de <LCD_DisplayUser>:
void LCD_DisplayUser(void)
{
    25de:	df 93       	push	r29
    25e0:	cf 93       	push	r28
    25e2:	0f 92       	push	r0
    25e4:	cd b7       	in	r28, 0x3d	; 61
    25e6:	de b7       	in	r29, 0x3e	; 62
	u8 key;

	Keypad_enuGetPressedKey(&key);
    25e8:	ce 01       	movw	r24, r28
    25ea:	01 96       	adiw	r24, 0x01	; 1
    25ec:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <Keypad_enuGetPressedKey>

	if (key != KEYPAD_NOT_PRESSED)
    25f0:	89 81       	ldd	r24, Y+1	; 0x01
    25f2:	8f 3f       	cpi	r24, 0xFF	; 255
    25f4:	19 f0       	breq	.+6      	; 0x25fc <LCD_DisplayUser+0x1e>
	{
		LCD_enuSendData(key);
    25f6:	89 81       	ldd	r24, Y+1	; 0x01
    25f8:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <LCD_enuSendData>
	}
}
    25fc:	0f 90       	pop	r0
    25fe:	cf 91       	pop	r28
    2600:	df 91       	pop	r29
    2602:	08 95       	ret

00002604 <LCD_DisplayPassword>:

void LCD_DisplayPassword(void)
{
    2604:	df 93       	push	r29
    2606:	cf 93       	push	r28
    2608:	0f 92       	push	r0
    260a:	cd b7       	in	r28, 0x3d	; 61
    260c:	de b7       	in	r29, 0x3e	; 62
		u8 key;

		Keypad_enuGetPressedKey(&key);
    260e:	ce 01       	movw	r24, r28
    2610:	01 96       	adiw	r24, 0x01	; 1
    2612:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <Keypad_enuGetPressedKey>
		if (key != KEYPAD_NOT_PRESSED)
    2616:	89 81       	ldd	r24, Y+1	; 0x01
    2618:	8f 3f       	cpi	r24, 0xFF	; 255
    261a:	29 f0       	breq	.+10     	; 0x2626 <LCD_DisplayPassword+0x22>
		{
			key = '*';
    261c:	8a e2       	ldi	r24, 0x2A	; 42
    261e:	89 83       	std	Y+1, r24	; 0x01
			LCD_enuSendData(key);
    2620:	89 81       	ldd	r24, Y+1	; 0x01
    2622:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <LCD_enuSendData>
		}

}
    2626:	0f 90       	pop	r0
    2628:	cf 91       	pop	r28
    262a:	df 91       	pop	r29
    262c:	08 95       	ret

0000262e <LCD_ClearDisplay>:
void LCD_ClearDisplay(void)
{
    262e:	df 93       	push	r29
    2630:	cf 93       	push	r28
    2632:	cd b7       	in	r28, 0x3d	; 61
    2634:	de b7       	in	r29, 0x3e	; 62
	DIO_enuSetPinValue(RS_PORT,RS_PIN,DIO_u8LOW);
    2636:	81 e0       	ldi	r24, 0x01	; 1
    2638:	61 e0       	ldi	r22, 0x01	; 1
    263a:	40 e0       	ldi	r20, 0x00	; 0
    263c:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch(0x01);
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <LCD_enuWriteNLatch>
}
    2646:	cf 91       	pop	r28
    2648:	df 91       	pop	r29
    264a:	08 95       	ret

0000264c <leds_vON>:
#include "util/delay.h"


/* choosing led to turn it on*/
void leds_vON(void)
{
    264c:	df 93       	push	r29
    264e:	cf 93       	push	r28
    2650:	cd b7       	in	r28, 0x3d	; 61
    2652:	de b7       	in	r29, 0x3e	; 62
		DIO_enuSetPinDirection(DIO_u8GROUP_A, DIO_u8PIN2, DIO_u8OUTPUT);
    2654:	80 e0       	ldi	r24, 0x00	; 0
    2656:	62 e0       	ldi	r22, 0x02	; 2
    2658:	41 e0       	ldi	r20, 0x01	; 1
    265a:	0e 94 b6 05 	call	0xb6c	; 0xb6c <DIO_enuSetPinDirection>
		DIO_enuSetPinValue(DIO_u8GROUP_A,DIO_u8PIN2,DIO_u8HIGH);
    265e:	80 e0       	ldi	r24, 0x00	; 0
    2660:	62 e0       	ldi	r22, 0x02	; 2
    2662:	41 e0       	ldi	r20, 0x01	; 1
    2664:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_enuSetPinValue>

		DIO_enuSetPinDirection(DIO_u8GROUP_A, DIO_u8PIN3, DIO_u8OUTPUT);
    2668:	80 e0       	ldi	r24, 0x00	; 0
    266a:	63 e0       	ldi	r22, 0x03	; 3
    266c:	41 e0       	ldi	r20, 0x01	; 1
    266e:	0e 94 b6 05 	call	0xb6c	; 0xb6c <DIO_enuSetPinDirection>
		DIO_enuSetPinValue(DIO_u8GROUP_A,DIO_u8PIN3,DIO_u8HIGH);
    2672:	80 e0       	ldi	r24, 0x00	; 0
    2674:	63 e0       	ldi	r22, 0x03	; 3
    2676:	41 e0       	ldi	r20, 0x01	; 1
    2678:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_enuSetPinValue>

		DIO_enuSetPinDirection(DIO_u8GROUP_D, DIO_u8PIN2, DIO_u8OUTPUT);
    267c:	83 e0       	ldi	r24, 0x03	; 3
    267e:	62 e0       	ldi	r22, 0x02	; 2
    2680:	41 e0       	ldi	r20, 0x01	; 1
    2682:	0e 94 b6 05 	call	0xb6c	; 0xb6c <DIO_enuSetPinDirection>
		DIO_enuSetPinValue(DIO_u8GROUP_D,DIO_u8PIN2,DIO_u8HIGH);
    2686:	83 e0       	ldi	r24, 0x03	; 3
    2688:	62 e0       	ldi	r22, 0x02	; 2
    268a:	41 e0       	ldi	r20, 0x01	; 1
    268c:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_enuSetPinValue>

		DIO_enuSetPinDirection(DIO_u8GROUP_C, DIO_u8PIN2, DIO_u8OUTPUT);
    2690:	82 e0       	ldi	r24, 0x02	; 2
    2692:	62 e0       	ldi	r22, 0x02	; 2
    2694:	41 e0       	ldi	r20, 0x01	; 1
    2696:	0e 94 b6 05 	call	0xb6c	; 0xb6c <DIO_enuSetPinDirection>
		DIO_enuSetPinValue(DIO_u8GROUP_C,DIO_u8PIN2,DIO_u8HIGH);
    269a:	82 e0       	ldi	r24, 0x02	; 2
    269c:	62 e0       	ldi	r22, 0x02	; 2
    269e:	41 e0       	ldi	r20, 0x01	; 1
    26a0:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_enuSetPinValue>

		DIO_enuSetPinDirection(DIO_u8GROUP_D, DIO_u8PIN6, DIO_u8OUTPUT);
    26a4:	83 e0       	ldi	r24, 0x03	; 3
    26a6:	66 e0       	ldi	r22, 0x06	; 6
    26a8:	41 e0       	ldi	r20, 0x01	; 1
    26aa:	0e 94 b6 05 	call	0xb6c	; 0xb6c <DIO_enuSetPinDirection>
		DIO_enuSetPinValue(DIO_u8GROUP_D,DIO_u8PIN6,DIO_u8HIGH);
    26ae:	83 e0       	ldi	r24, 0x03	; 3
    26b0:	66 e0       	ldi	r22, 0x06	; 6
    26b2:	41 e0       	ldi	r20, 0x01	; 1
    26b4:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_enuSetPinValue>
}
    26b8:	cf 91       	pop	r28
    26ba:	df 91       	pop	r29
    26bc:	08 95       	ret

000026be <leds_vOFF>:


/* choosing led to turn it off*/
void leds_vOFF(void)
{
    26be:	df 93       	push	r29
    26c0:	cf 93       	push	r28
    26c2:	cd b7       	in	r28, 0x3d	; 61
    26c4:	de b7       	in	r29, 0x3e	; 62
		DIO_enuSetPinDirection(DIO_u8GROUP_A, DIO_u8PIN2, DIO_u8OUTPUT);
    26c6:	80 e0       	ldi	r24, 0x00	; 0
    26c8:	62 e0       	ldi	r22, 0x02	; 2
    26ca:	41 e0       	ldi	r20, 0x01	; 1
    26cc:	0e 94 b6 05 	call	0xb6c	; 0xb6c <DIO_enuSetPinDirection>
		DIO_enuSetPinValue(DIO_u8GROUP_A,DIO_u8PIN2,DIO_u8LOW);
    26d0:	80 e0       	ldi	r24, 0x00	; 0
    26d2:	62 e0       	ldi	r22, 0x02	; 2
    26d4:	40 e0       	ldi	r20, 0x00	; 0
    26d6:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_enuSetPinValue>

		DIO_enuSetPinDirection(DIO_u8GROUP_A, DIO_u8PIN3, DIO_u8OUTPUT);
    26da:	80 e0       	ldi	r24, 0x00	; 0
    26dc:	63 e0       	ldi	r22, 0x03	; 3
    26de:	41 e0       	ldi	r20, 0x01	; 1
    26e0:	0e 94 b6 05 	call	0xb6c	; 0xb6c <DIO_enuSetPinDirection>
		DIO_enuSetPinValue(DIO_u8GROUP_A,DIO_u8PIN3,DIO_u8LOW);
    26e4:	80 e0       	ldi	r24, 0x00	; 0
    26e6:	63 e0       	ldi	r22, 0x03	; 3
    26e8:	40 e0       	ldi	r20, 0x00	; 0
    26ea:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_enuSetPinValue>

		DIO_enuSetPinDirection(DIO_u8GROUP_D, DIO_u8PIN2, DIO_u8OUTPUT);
    26ee:	83 e0       	ldi	r24, 0x03	; 3
    26f0:	62 e0       	ldi	r22, 0x02	; 2
    26f2:	41 e0       	ldi	r20, 0x01	; 1
    26f4:	0e 94 b6 05 	call	0xb6c	; 0xb6c <DIO_enuSetPinDirection>
		DIO_enuSetPinValue(DIO_u8GROUP_D,DIO_u8PIN2,DIO_u8LOW);
    26f8:	83 e0       	ldi	r24, 0x03	; 3
    26fa:	62 e0       	ldi	r22, 0x02	; 2
    26fc:	40 e0       	ldi	r20, 0x00	; 0
    26fe:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_enuSetPinValue>

		DIO_enuSetPinDirection(DIO_u8GROUP_C, DIO_u8PIN2, DIO_u8OUTPUT);
    2702:	82 e0       	ldi	r24, 0x02	; 2
    2704:	62 e0       	ldi	r22, 0x02	; 2
    2706:	41 e0       	ldi	r20, 0x01	; 1
    2708:	0e 94 b6 05 	call	0xb6c	; 0xb6c <DIO_enuSetPinDirection>
		DIO_enuSetPinValue(DIO_u8GROUP_C,DIO_u8PIN2,DIO_u8LOW);
    270c:	82 e0       	ldi	r24, 0x02	; 2
    270e:	62 e0       	ldi	r22, 0x02	; 2
    2710:	40 e0       	ldi	r20, 0x00	; 0
    2712:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_enuSetPinValue>

		DIO_enuSetPinDirection(DIO_u8GROUP_D, DIO_u8PIN6, DIO_u8OUTPUT);
    2716:	83 e0       	ldi	r24, 0x03	; 3
    2718:	66 e0       	ldi	r22, 0x06	; 6
    271a:	41 e0       	ldi	r20, 0x01	; 1
    271c:	0e 94 b6 05 	call	0xb6c	; 0xb6c <DIO_enuSetPinDirection>
		DIO_enuSetPinValue(DIO_u8GROUP_D,DIO_u8PIN6,DIO_u8LOW);
    2720:	83 e0       	ldi	r24, 0x03	; 3
    2722:	66 e0       	ldi	r22, 0x06	; 6
    2724:	40 e0       	ldi	r20, 0x00	; 0
    2726:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_enuSetPinValue>
}
    272a:	cf 91       	pop	r28
    272c:	df 91       	pop	r29
    272e:	08 95       	ret

00002730 <buzzer_vON>:


/*turn on buzzer*/
void buzzer_vON(void)
{
    2730:	df 93       	push	r29
    2732:	cf 93       	push	r28
    2734:	cd b7       	in	r28, 0x3d	; 61
    2736:	de b7       	in	r29, 0x3e	; 62
	DIO_enuSetPinDirection(DIO_u8GROUP_D, DIO_u8PIN7, DIO_u8OUTPUT);
    2738:	83 e0       	ldi	r24, 0x03	; 3
    273a:	67 e0       	ldi	r22, 0x07	; 7
    273c:	41 e0       	ldi	r20, 0x01	; 1
    273e:	0e 94 b6 05 	call	0xb6c	; 0xb6c <DIO_enuSetPinDirection>
	DIO_enuSetPinValue(DIO_u8GROUP_D,DIO_u8PIN7,DIO_u8HIGH);
    2742:	83 e0       	ldi	r24, 0x03	; 3
    2744:	67 e0       	ldi	r22, 0x07	; 7
    2746:	41 e0       	ldi	r20, 0x01	; 1
    2748:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_enuSetPinValue>
}
    274c:	cf 91       	pop	r28
    274e:	df 91       	pop	r29
    2750:	08 95       	ret

00002752 <buzzer_vOFF>:


/*turn off buzzer*/
void buzzer_vOFF(void)
{
    2752:	df 93       	push	r29
    2754:	cf 93       	push	r28
    2756:	cd b7       	in	r28, 0x3d	; 61
    2758:	de b7       	in	r29, 0x3e	; 62
	DIO_enuSetPinDirection(DIO_u8GROUP_D, DIO_u8PIN7, DIO_u8OUTPUT);
    275a:	83 e0       	ldi	r24, 0x03	; 3
    275c:	67 e0       	ldi	r22, 0x07	; 7
    275e:	41 e0       	ldi	r20, 0x01	; 1
    2760:	0e 94 b6 05 	call	0xb6c	; 0xb6c <DIO_enuSetPinDirection>
	DIO_enuSetPinValue(DIO_u8GROUP_D,DIO_u8PIN7,DIO_u8LOW);
    2764:	83 e0       	ldi	r24, 0x03	; 3
    2766:	67 e0       	ldi	r22, 0x07	; 7
    2768:	40 e0       	ldi	r20, 0x00	; 0
    276a:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_enuSetPinValue>
}
    276e:	cf 91       	pop	r28
    2770:	df 91       	pop	r29
    2772:	08 95       	ret

00002774 <Waveform0_Gen_Mode>:
 * ********************************
 * *** Waveform Generation Mode function *****
 *********************************
 ***********************************/
void Waveform0_Gen_Mode()
{
    2774:	df 93       	push	r29
    2776:	cf 93       	push	r28
    2778:	cd b7       	in	r28, 0x3d	; 61
    277a:	de b7       	in	r29, 0x3e	; 62
     TCCR0 &=~(1<<3);
     TCCR0 |=(1<<6);


#elif Wave_GEN_Mode == FAst_PWM
	 TCCR0 |=(1<<3);
    277c:	a3 e5       	ldi	r26, 0x53	; 83
    277e:	b0 e0       	ldi	r27, 0x00	; 0
    2780:	e3 e5       	ldi	r30, 0x53	; 83
    2782:	f0 e0       	ldi	r31, 0x00	; 0
    2784:	80 81       	ld	r24, Z
    2786:	88 60       	ori	r24, 0x08	; 8
    2788:	8c 93       	st	X, r24
	 TCCR0 |=(1<<6);
    278a:	a3 e5       	ldi	r26, 0x53	; 83
    278c:	b0 e0       	ldi	r27, 0x00	; 0
    278e:	e3 e5       	ldi	r30, 0x53	; 83
    2790:	f0 e0       	ldi	r31, 0x00	; 0
    2792:	80 81       	ld	r24, Z
    2794:	80 64       	ori	r24, 0x40	; 64
    2796:	8c 93       	st	X, r24

#else
#error"Waveform_Gen has a wrong choice"
#endif
}
    2798:	cf 91       	pop	r28
    279a:	df 91       	pop	r29
    279c:	08 95       	ret

0000279e <Compare0_Match_Out_Mode>:
 * ********************************
 * *** Compare match function *****
 *********************************
 ***********************************/
void Compare0_Match_Out_Mode()
{
    279e:	df 93       	push	r29
    27a0:	cf 93       	push	r28
    27a2:	cd b7       	in	r28, 0x3d	; 61
    27a4:	de b7       	in	r29, 0x3e	; 62
			TCCR0 |=(1<<4);
			TCCR0 &=~(1<<5);


#elif Compare0_Match_Out == Clear_OC0
			TCCR0 |=(1<<5);
    27a6:	a3 e5       	ldi	r26, 0x53	; 83
    27a8:	b0 e0       	ldi	r27, 0x00	; 0
    27aa:	e3 e5       	ldi	r30, 0x53	; 83
    27ac:	f0 e0       	ldi	r31, 0x00	; 0
    27ae:	80 81       	ld	r24, Z
    27b0:	80 62       	ori	r24, 0x20	; 32
    27b2:	8c 93       	st	X, r24
			TCCR0 &=~(1<<4);
    27b4:	a3 e5       	ldi	r26, 0x53	; 83
    27b6:	b0 e0       	ldi	r27, 0x00	; 0
    27b8:	e3 e5       	ldi	r30, 0x53	; 83
    27ba:	f0 e0       	ldi	r31, 0x00	; 0
    27bc:	80 81       	ld	r24, Z
    27be:	8f 7e       	andi	r24, 0xEF	; 239
    27c0:	8c 93       	st	X, r24
			TCCR0 |=(1<<5);
			TCCR0 |=(1<<4);

#else
#endif
}
    27c2:	cf 91       	pop	r28
    27c4:	df 91       	pop	r29
    27c6:	08 95       	ret

000027c8 <Clk0_Select>:
 * *** Clock source selection function
 *********************************
 ***********************************/

void Clk0_Select()
{
    27c8:	df 93       	push	r29
    27ca:	cf 93       	push	r28
    27cc:	cd b7       	in	r28, 0x3d	; 61
    27ce:	de b7       	in	r29, 0x3e	; 62
	    TCCR0 &=~(1<<1);
	    TCCR0 &=~(1<<2);


#elif Cl_Selec == cl_64
	    TCCR0 |=(1<<0);
    27d0:	a3 e5       	ldi	r26, 0x53	; 83
    27d2:	b0 e0       	ldi	r27, 0x00	; 0
    27d4:	e3 e5       	ldi	r30, 0x53	; 83
    27d6:	f0 e0       	ldi	r31, 0x00	; 0
    27d8:	80 81       	ld	r24, Z
    27da:	81 60       	ori	r24, 0x01	; 1
    27dc:	8c 93       	st	X, r24
	    TCCR0 |=(1<<1);
    27de:	a3 e5       	ldi	r26, 0x53	; 83
    27e0:	b0 e0       	ldi	r27, 0x00	; 0
    27e2:	e3 e5       	ldi	r30, 0x53	; 83
    27e4:	f0 e0       	ldi	r31, 0x00	; 0
    27e6:	80 81       	ld	r24, Z
    27e8:	82 60       	ori	r24, 0x02	; 2
    27ea:	8c 93       	st	X, r24
	    TCCR0 &=~(1<<2);
    27ec:	a3 e5       	ldi	r26, 0x53	; 83
    27ee:	b0 e0       	ldi	r27, 0x00	; 0
    27f0:	e3 e5       	ldi	r30, 0x53	; 83
    27f2:	f0 e0       	ldi	r31, 0x00	; 0
    27f4:	80 81       	ld	r24, Z
    27f6:	8b 7f       	andi	r24, 0xFB	; 251
    27f8:	8c 93       	st	X, r24
	    TCCR0 |=(1<<1);
	    TCCR0 |=(1<<2);
#else
#endif

}
    27fa:	cf 91       	pop	r28
    27fc:	df 91       	pop	r29
    27fe:	08 95       	ret

00002800 <OCR0_Value>:

void OCR0_Value(u8 Val)
{
    2800:	df 93       	push	r29
    2802:	cf 93       	push	r28
    2804:	0f 92       	push	r0
    2806:	cd b7       	in	r28, 0x3d	; 61
    2808:	de b7       	in	r29, 0x3e	; 62
    280a:	89 83       	std	Y+1, r24	; 0x01
	OCR0 =Val;
    280c:	ec e5       	ldi	r30, 0x5C	; 92
    280e:	f0 e0       	ldi	r31, 0x00	; 0
    2810:	89 81       	ldd	r24, Y+1	; 0x01
    2812:	80 83       	st	Z, r24
}
    2814:	0f 90       	pop	r0
    2816:	cf 91       	pop	r28
    2818:	df 91       	pop	r29
    281a:	08 95       	ret

0000281c <MotOr_0ff>:
void MotOr_0ff()
{
    281c:	df 93       	push	r29
    281e:	cf 93       	push	r28
    2820:	cd b7       	in	r28, 0x3d	; 61
    2822:	de b7       	in	r29, 0x3e	; 62
	OCR0=0;
    2824:	ec e5       	ldi	r30, 0x5C	; 92
    2826:	f0 e0       	ldi	r31, 0x00	; 0
    2828:	10 82       	st	Z, r1
}
    282a:	cf 91       	pop	r28
    282c:	df 91       	pop	r29
    282e:	08 95       	ret

00002830 <MotOr_On>:

void MotOr_On()
{
    2830:	df 93       	push	r29
    2832:	cf 93       	push	r28
    2834:	cd b7       	in	r28, 0x3d	; 61
    2836:	de b7       	in	r29, 0x3e	; 62
	OCR0=200;
    2838:	ec e5       	ldi	r30, 0x5C	; 92
    283a:	f0 e0       	ldi	r31, 0x00	; 0
    283c:	88 ec       	ldi	r24, 0xC8	; 200
    283e:	80 83       	st	Z, r24
}
    2840:	cf 91       	pop	r28
    2842:	df 91       	pop	r29
    2844:	08 95       	ret

00002846 <Door_Init>:
#include "Timer_Servo_Config.h"
#include "Timer_Servo_Int.h"
#include "Timer_Servo_Priv.h"

void Door_Init()
{
    2846:	df 93       	push	r29
    2848:	cf 93       	push	r28
    284a:	cd b7       	in	r28, 0x3d	; 61
    284c:	de b7       	in	r29, 0x3e	; 62
	 DDRD |= (1<<4);
    284e:	a1 e3       	ldi	r26, 0x31	; 49
    2850:	b0 e0       	ldi	r27, 0x00	; 0
    2852:	e1 e3       	ldi	r30, 0x31	; 49
    2854:	f0 e0       	ldi	r31, 0x00	; 0
    2856:	80 81       	ld	r24, Z
    2858:	80 61       	ori	r24, 0x10	; 16
    285a:	8c 93       	st	X, r24

	 Select_Channel();
    285c:	0e 94 60 14 	call	0x28c0	; 0x28c0 <Select_Channel>
	 Waveform_Gen_Mode();
    2860:	0e 94 75 14 	call	0x28ea	; 0x28ea <Waveform_Gen_Mode>
	 CompareMode_Phase_correct();
    2864:	0e 94 98 14 	call	0x2930	; 0x2930 <CompareMode_Phase_correct>
	 Clk_Select();
    2868:	0e 94 bb 14 	call	0x2976	; 0x2976 <Clk_Select>
	 OCR1AH=(u8)((2500)>>8);
    286c:	eb e4       	ldi	r30, 0x4B	; 75
    286e:	f0 e0       	ldi	r31, 0x00	; 0
    2870:	89 e0       	ldi	r24, 0x09	; 9
    2872:	80 83       	st	Z, r24
	 OCR1AL=(u8)2500;
    2874:	ea e4       	ldi	r30, 0x4A	; 74
    2876:	f0 e0       	ldi	r31, 0x00	; 0
    2878:	84 ec       	ldi	r24, 0xC4	; 196
    287a:	80 83       	st	Z, r24
}
    287c:	cf 91       	pop	r28
    287e:	df 91       	pop	r29
    2880:	08 95       	ret

00002882 <TOV_EN>:
void TOV_EN(void)
{
    2882:	df 93       	push	r29
    2884:	cf 93       	push	r28
    2886:	cd b7       	in	r28, 0x3d	; 61
    2888:	de b7       	in	r29, 0x3e	; 62
	TIMSK |=(1<<0);
    288a:	a9 e5       	ldi	r26, 0x59	; 89
    288c:	b0 e0       	ldi	r27, 0x00	; 0
    288e:	e9 e5       	ldi	r30, 0x59	; 89
    2890:	f0 e0       	ldi	r31, 0x00	; 0
    2892:	80 81       	ld	r24, Z
    2894:	81 60       	ori	r24, 0x01	; 1
    2896:	8c 93       	st	X, r24
}
    2898:	cf 91       	pop	r28
    289a:	df 91       	pop	r29
    289c:	08 95       	ret

0000289e <WR_TCNValue>:

void WR_TCNValue(u8 value)
{
    289e:	df 93       	push	r29
    28a0:	cf 93       	push	r28
    28a2:	0f 92       	push	r0
    28a4:	cd b7       	in	r28, 0x3d	; 61
    28a6:	de b7       	in	r29, 0x3e	; 62
    28a8:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 =value;
    28aa:	ec e4       	ldi	r30, 0x4C	; 76
    28ac:	f0 e0       	ldi	r31, 0x00	; 0
    28ae:	89 81       	ldd	r24, Y+1	; 0x01
    28b0:	88 2f       	mov	r24, r24
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	91 83       	std	Z+1, r25	; 0x01
    28b6:	80 83       	st	Z, r24
}
    28b8:	0f 90       	pop	r0
    28ba:	cf 91       	pop	r28
    28bc:	df 91       	pop	r29
    28be:	08 95       	ret

000028c0 <Select_Channel>:

void Select_Channel()
{
    28c0:	df 93       	push	r29
    28c2:	cf 93       	push	r28
    28c4:	cd b7       	in	r28, 0x3d	; 61
    28c6:	de b7       	in	r29, 0x3e	; 62
#if Selec_Ch == Channel_A
		TCCR1A |=(1<<6);
		TCCR1A |=(1<<7);

#elif Selec_Ch == Channel_B
		TCCR1A |=(1<<4);
    28c8:	af e4       	ldi	r26, 0x4F	; 79
    28ca:	b0 e0       	ldi	r27, 0x00	; 0
    28cc:	ef e4       	ldi	r30, 0x4F	; 79
    28ce:	f0 e0       	ldi	r31, 0x00	; 0
    28d0:	80 81       	ld	r24, Z
    28d2:	80 61       	ori	r24, 0x10	; 16
    28d4:	8c 93       	st	X, r24
		TCCR1A |=(1<<5);
    28d6:	af e4       	ldi	r26, 0x4F	; 79
    28d8:	b0 e0       	ldi	r27, 0x00	; 0
    28da:	ef e4       	ldi	r30, 0x4F	; 79
    28dc:	f0 e0       	ldi	r31, 0x00	; 0
    28de:	80 81       	ld	r24, Z
    28e0:	80 62       	ori	r24, 0x20	; 32
    28e2:	8c 93       	st	X, r24

#else
#endif
}
    28e4:	cf 91       	pop	r28
    28e6:	df 91       	pop	r29
    28e8:	08 95       	ret

000028ea <Waveform_Gen_Mode>:
 * ********************************
 * *** Waveform Generation Mode function *****
 *********************************
 ***********************************/
void Waveform_Gen_Mode()
{
    28ea:	df 93       	push	r29
    28ec:	cf 93       	push	r28
    28ee:	cd b7       	in	r28, 0x3d	; 61
    28f0:	de b7       	in	r29, 0x3e	; 62
	 TCCR1B &=~(1<<3);
     TCCR1B &=~(1<<4);


#elif WAVE_GEN_Mode == PWM_PhCrt_MODE9
	 TCCR1A &=~(1<<1);
    28f2:	af e4       	ldi	r26, 0x4F	; 79
    28f4:	b0 e0       	ldi	r27, 0x00	; 0
    28f6:	ef e4       	ldi	r30, 0x4F	; 79
    28f8:	f0 e0       	ldi	r31, 0x00	; 0
    28fa:	80 81       	ld	r24, Z
    28fc:	8d 7f       	andi	r24, 0xFD	; 253
    28fe:	8c 93       	st	X, r24
     TCCR1A |=(1<<0);
    2900:	af e4       	ldi	r26, 0x4F	; 79
    2902:	b0 e0       	ldi	r27, 0x00	; 0
    2904:	ef e4       	ldi	r30, 0x4F	; 79
    2906:	f0 e0       	ldi	r31, 0x00	; 0
    2908:	80 81       	ld	r24, Z
    290a:	81 60       	ori	r24, 0x01	; 1
    290c:	8c 93       	st	X, r24
	 TCCR1B &=~(1<<3);
    290e:	ae e4       	ldi	r26, 0x4E	; 78
    2910:	b0 e0       	ldi	r27, 0x00	; 0
    2912:	ee e4       	ldi	r30, 0x4E	; 78
    2914:	f0 e0       	ldi	r31, 0x00	; 0
    2916:	80 81       	ld	r24, Z
    2918:	87 7f       	andi	r24, 0xF7	; 247
    291a:	8c 93       	st	X, r24
     TCCR1B |=(1<<4);
    291c:	ae e4       	ldi	r26, 0x4E	; 78
    291e:	b0 e0       	ldi	r27, 0x00	; 0
    2920:	ee e4       	ldi	r30, 0x4E	; 78
    2922:	f0 e0       	ldi	r31, 0x00	; 0
    2924:	80 81       	ld	r24, Z
    2926:	80 61       	ori	r24, 0x10	; 16
    2928:	8c 93       	st	X, r24
     TCCR1A |=(1<<0);
	 TCCR1B |=(1<<3);
     TCCR1B |=(1<<4);
#else
#endif
}
    292a:	cf 91       	pop	r28
    292c:	df 91       	pop	r29
    292e:	08 95       	ret

00002930 <CompareMode_Phase_correct>:
 * ********************************
 * *** Compare match function *****
 *********************************
 ***********************************/
void CompareMode_Phase_correct()
{
    2930:	df 93       	push	r29
    2932:	cf 93       	push	r28
    2934:	cd b7       	in	r28, 0x3d	; 61
    2936:	de b7       	in	r29, 0x3e	; 62
			TCCR1A &=~(1<<5);
			TCCR1A |=(1<<6);
			TCCR1A &=~(1<<7);

#elif CompareMode_Ph_Corr ==  Clear_OC1
			TCCR1A &=~(1<<4);
    2938:	af e4       	ldi	r26, 0x4F	; 79
    293a:	b0 e0       	ldi	r27, 0x00	; 0
    293c:	ef e4       	ldi	r30, 0x4F	; 79
    293e:	f0 e0       	ldi	r31, 0x00	; 0
    2940:	80 81       	ld	r24, Z
    2942:	8f 7e       	andi	r24, 0xEF	; 239
    2944:	8c 93       	st	X, r24
			TCCR1A |=(1<<5);
    2946:	af e4       	ldi	r26, 0x4F	; 79
    2948:	b0 e0       	ldi	r27, 0x00	; 0
    294a:	ef e4       	ldi	r30, 0x4F	; 79
    294c:	f0 e0       	ldi	r31, 0x00	; 0
    294e:	80 81       	ld	r24, Z
    2950:	80 62       	ori	r24, 0x20	; 32
    2952:	8c 93       	st	X, r24
			TCCR1A &=~(1<<6);
    2954:	af e4       	ldi	r26, 0x4F	; 79
    2956:	b0 e0       	ldi	r27, 0x00	; 0
    2958:	ef e4       	ldi	r30, 0x4F	; 79
    295a:	f0 e0       	ldi	r31, 0x00	; 0
    295c:	80 81       	ld	r24, Z
    295e:	8f 7b       	andi	r24, 0xBF	; 191
    2960:	8c 93       	st	X, r24
			TCCR1A |=(1<<7);
    2962:	af e4       	ldi	r26, 0x4F	; 79
    2964:	b0 e0       	ldi	r27, 0x00	; 0
    2966:	ef e4       	ldi	r30, 0x4F	; 79
    2968:	f0 e0       	ldi	r31, 0x00	; 0
    296a:	80 81       	ld	r24, Z
    296c:	80 68       	ori	r24, 0x80	; 128
    296e:	8c 93       	st	X, r24
			TCCR1A |=(1<<5);
			TCCR1A |=(1<<6);
			TCCR1A |=(1<<7);
#else
#endif
	}
    2970:	cf 91       	pop	r28
    2972:	df 91       	pop	r29
    2974:	08 95       	ret

00002976 <Clk_Select>:
 * ********************************
 * *** Clock source selection function
 *********************************
 ***********************************/
void Clk_Select()
{
    2976:	df 93       	push	r29
    2978:	cf 93       	push	r28
    297a:	cd b7       	in	r28, 0x3d	; 61
    297c:	de b7       	in	r29, 0x3e	; 62
		TCCR1B |=(1<<1);
		TCCR1B &=~(1<<2);


#elif Clk_Selec ==  clk_64
		TCCR1B |=(1<<0);
    297e:	ae e4       	ldi	r26, 0x4E	; 78
    2980:	b0 e0       	ldi	r27, 0x00	; 0
    2982:	ee e4       	ldi	r30, 0x4E	; 78
    2984:	f0 e0       	ldi	r31, 0x00	; 0
    2986:	80 81       	ld	r24, Z
    2988:	81 60       	ori	r24, 0x01	; 1
    298a:	8c 93       	st	X, r24
		TCCR1B |=(1<<1);
    298c:	ae e4       	ldi	r26, 0x4E	; 78
    298e:	b0 e0       	ldi	r27, 0x00	; 0
    2990:	ee e4       	ldi	r30, 0x4E	; 78
    2992:	f0 e0       	ldi	r31, 0x00	; 0
    2994:	80 81       	ld	r24, Z
    2996:	82 60       	ori	r24, 0x02	; 2
    2998:	8c 93       	st	X, r24
		TCCR1B &=~(1<<2);
    299a:	ae e4       	ldi	r26, 0x4E	; 78
    299c:	b0 e0       	ldi	r27, 0x00	; 0
    299e:	ee e4       	ldi	r30, 0x4E	; 78
    29a0:	f0 e0       	ldi	r31, 0x00	; 0
    29a2:	80 81       	ld	r24, Z
    29a4:	8b 7f       	andi	r24, 0xFB	; 251
    29a6:	8c 93       	st	X, r24
		TCCR1B &=~(1<<0);
		TCCR1B |=(1<<1);
		TCCR1B |=(1<<2);
#else
#endif
}
    29a8:	cf 91       	pop	r28
    29aa:	df 91       	pop	r29
    29ac:	08 95       	ret

000029ae <OCR1AH_OCR1ALValue>:



void OCR1AH_OCR1ALValue(u16 Val1)
{
    29ae:	df 93       	push	r29
    29b0:	cf 93       	push	r28
    29b2:	00 d0       	rcall	.+0      	; 0x29b4 <OCR1AH_OCR1ALValue+0x6>
    29b4:	cd b7       	in	r28, 0x3d	; 61
    29b6:	de b7       	in	r29, 0x3e	; 62
    29b8:	9a 83       	std	Y+2, r25	; 0x02
    29ba:	89 83       	std	Y+1, r24	; 0x01
	OCR1AH =(Val1)>>8;
    29bc:	eb e4       	ldi	r30, 0x4B	; 75
    29be:	f0 e0       	ldi	r31, 0x00	; 0
    29c0:	89 81       	ldd	r24, Y+1	; 0x01
    29c2:	9a 81       	ldd	r25, Y+2	; 0x02
    29c4:	89 2f       	mov	r24, r25
    29c6:	99 27       	eor	r25, r25
    29c8:	80 83       	st	Z, r24
	OCR1AL =(u8)Val1;
    29ca:	ea e4       	ldi	r30, 0x4A	; 74
    29cc:	f0 e0       	ldi	r31, 0x00	; 0
    29ce:	89 81       	ldd	r24, Y+1	; 0x01
    29d0:	80 83       	st	Z, r24
}
    29d2:	0f 90       	pop	r0
    29d4:	0f 90       	pop	r0
    29d6:	cf 91       	pop	r28
    29d8:	df 91       	pop	r29
    29da:	08 95       	ret

000029dc <OCR1AL_Value>:


void OCR1AL_Value(u8 Val1)
{
    29dc:	df 93       	push	r29
    29de:	cf 93       	push	r28
    29e0:	0f 92       	push	r0
    29e2:	cd b7       	in	r28, 0x3d	; 61
    29e4:	de b7       	in	r29, 0x3e	; 62
    29e6:	89 83       	std	Y+1, r24	; 0x01
	OCR1AL=(u8)Val1;
    29e8:	ea e4       	ldi	r30, 0x4A	; 74
    29ea:	f0 e0       	ldi	r31, 0x00	; 0
    29ec:	89 81       	ldd	r24, Y+1	; 0x01
    29ee:	80 83       	st	Z, r24
}
    29f0:	0f 90       	pop	r0
    29f2:	cf 91       	pop	r28
    29f4:	df 91       	pop	r29
    29f6:	08 95       	ret

000029f8 <OCR1AH_Value>:


void OCR1AH_Value(u8 Val2)
{
    29f8:	df 93       	push	r29
    29fa:	cf 93       	push	r28
    29fc:	0f 92       	push	r0
    29fe:	cd b7       	in	r28, 0x3d	; 61
    2a00:	de b7       	in	r29, 0x3e	; 62
    2a02:	89 83       	std	Y+1, r24	; 0x01
	OCR1AH=(u8)Val2;
    2a04:	eb e4       	ldi	r30, 0x4B	; 75
    2a06:	f0 e0       	ldi	r31, 0x00	; 0
    2a08:	89 81       	ldd	r24, Y+1	; 0x01
    2a0a:	80 83       	st	Z, r24
}
    2a0c:	0f 90       	pop	r0
    2a0e:	cf 91       	pop	r28
    2a10:	df 91       	pop	r29
    2a12:	08 95       	ret

00002a14 <Motor_90_DEG>:



void Motor_90_DEG()
{
    2a14:	df 93       	push	r29
    2a16:	cf 93       	push	r28
    2a18:	cd b7       	in	r28, 0x3d	; 61
    2a1a:	de b7       	in	r29, 0x3e	; 62
    OCR1BH=0;
    2a1c:	e9 e4       	ldi	r30, 0x49	; 73
    2a1e:	f0 e0       	ldi	r31, 0x00	; 0
    2a20:	10 82       	st	Z, r1
    OCR1BL=125;
    2a22:	e8 e4       	ldi	r30, 0x48	; 72
    2a24:	f0 e0       	ldi	r31, 0x00	; 0
    2a26:	8d e7       	ldi	r24, 0x7D	; 125
    2a28:	80 83       	st	Z, r24
}
    2a2a:	cf 91       	pop	r28
    2a2c:	df 91       	pop	r29
    2a2e:	08 95       	ret

00002a30 <Motor_0_DEG>:

void Motor_0_DEG()
{
    2a30:	df 93       	push	r29
    2a32:	cf 93       	push	r28
    2a34:	cd b7       	in	r28, 0x3d	; 61
    2a36:	de b7       	in	r29, 0x3e	; 62
    OCR1BH=0;
    2a38:	e9 e4       	ldi	r30, 0x49	; 73
    2a3a:	f0 e0       	ldi	r31, 0x00	; 0
    2a3c:	10 82       	st	Z, r1
    OCR1BL=0;
    2a3e:	e8 e4       	ldi	r30, 0x48	; 72
    2a40:	f0 e0       	ldi	r31, 0x00	; 0
    2a42:	10 82       	st	Z, r1
}
    2a44:	cf 91       	pop	r28
    2a46:	df 91       	pop	r29
    2a48:	08 95       	ret

00002a4a <USART_Init>:
#include "../MCAL/AVR_REG.h"
#include "USART_Config.h"
#include "USART_Private.h"
u8 State = 1;
void USART_Init(u8 Mode,u8 Parity,u8 Stop_Bits,u8 Charcter_Size)
{
    2a4a:	df 93       	push	r29
    2a4c:	cf 93       	push	r28
    2a4e:	cd b7       	in	r28, 0x3d	; 61
    2a50:	de b7       	in	r29, 0x3e	; 62
    2a52:	2d 97       	sbiw	r28, 0x0d	; 13
    2a54:	0f b6       	in	r0, 0x3f	; 63
    2a56:	f8 94       	cli
    2a58:	de bf       	out	0x3e, r29	; 62
    2a5a:	0f be       	out	0x3f, r0	; 63
    2a5c:	cd bf       	out	0x3d, r28	; 61
    2a5e:	8a 83       	std	Y+2, r24	; 0x02
    2a60:	6b 83       	std	Y+3, r22	; 0x03
    2a62:	4c 83       	std	Y+4, r20	; 0x04
    2a64:	2d 83       	std	Y+5, r18	; 0x05
	u8 Result=0x00;
    2a66:	19 82       	std	Y+1, r1	; 0x01
	switch(Mode)
    2a68:	8a 81       	ldd	r24, Y+2	; 0x02
    2a6a:	28 2f       	mov	r18, r24
    2a6c:	30 e0       	ldi	r19, 0x00	; 0
    2a6e:	3d 87       	std	Y+13, r19	; 0x0d
    2a70:	2c 87       	std	Y+12, r18	; 0x0c
    2a72:	8c 85       	ldd	r24, Y+12	; 0x0c
    2a74:	9d 85       	ldd	r25, Y+13	; 0x0d
    2a76:	81 30       	cpi	r24, 0x01	; 1
    2a78:	91 05       	cpc	r25, r1
    2a7a:	51 f0       	breq	.+20     	; 0x2a90 <USART_Init+0x46>
    2a7c:	2c 85       	ldd	r18, Y+12	; 0x0c
    2a7e:	3d 85       	ldd	r19, Y+13	; 0x0d
    2a80:	22 30       	cpi	r18, 0x02	; 2
    2a82:	31 05       	cpc	r19, r1
    2a84:	61 f0       	breq	.+24     	; 0x2a9e <USART_Init+0x54>
    2a86:	8c 85       	ldd	r24, Y+12	; 0x0c
    2a88:	9d 85       	ldd	r25, Y+13	; 0x0d
    2a8a:	00 97       	sbiw	r24, 0x00	; 0
    2a8c:	b1 f0       	breq	.+44     	; 0x2aba <USART_Init+0x70>
    2a8e:	18 c0       	rjmp	.+48     	; 0x2ac0 <USART_Init+0x76>
	{
	case Asynch_Noraml_Mode:
		Result &=~(1<<UMSEL);
    2a90:	89 81       	ldd	r24, Y+1	; 0x01
    2a92:	8f 7b       	andi	r24, 0xBF	; 191
    2a94:	89 83       	std	Y+1, r24	; 0x01
		State = Asynch_Noraml_Mode;
    2a96:	81 e0       	ldi	r24, 0x01	; 1
    2a98:	80 93 8e 00 	sts	0x008E, r24
    2a9c:	11 c0       	rjmp	.+34     	; 0x2ac0 <USART_Init+0x76>
		break;
	case Asynch_Double_Speed_Mode:
		Result &=~(1<<UMSEL);
    2a9e:	89 81       	ldd	r24, Y+1	; 0x01
    2aa0:	8f 7b       	andi	r24, 0xBF	; 191
    2aa2:	89 83       	std	Y+1, r24	; 0x01
		UCSRA  |= (1<<U2X);
    2aa4:	ab e2       	ldi	r26, 0x2B	; 43
    2aa6:	b0 e0       	ldi	r27, 0x00	; 0
    2aa8:	eb e2       	ldi	r30, 0x2B	; 43
    2aaa:	f0 e0       	ldi	r31, 0x00	; 0
    2aac:	80 81       	ld	r24, Z
    2aae:	82 60       	ori	r24, 0x02	; 2
    2ab0:	8c 93       	st	X, r24
		State = Asynch_Double_Speed_Mode;
    2ab2:	82 e0       	ldi	r24, 0x02	; 2
    2ab4:	80 93 8e 00 	sts	0x008E, r24
    2ab8:	03 c0       	rjmp	.+6      	; 0x2ac0 <USART_Init+0x76>
		break;
	case Synch:
		Result |=(1<<UMSEL);
    2aba:	89 81       	ldd	r24, Y+1	; 0x01
    2abc:	80 64       	ori	r24, 0x40	; 64
    2abe:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}
	switch(Parity)
    2ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac2:	28 2f       	mov	r18, r24
    2ac4:	30 e0       	ldi	r19, 0x00	; 0
    2ac6:	3b 87       	std	Y+11, r19	; 0x0b
    2ac8:	2a 87       	std	Y+10, r18	; 0x0a
    2aca:	8a 85       	ldd	r24, Y+10	; 0x0a
    2acc:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ace:	81 30       	cpi	r24, 0x01	; 1
    2ad0:	91 05       	cpc	r25, r1
    2ad2:	b9 f0       	breq	.+46     	; 0x2b02 <USART_Init+0xb8>
    2ad4:	2a 85       	ldd	r18, Y+10	; 0x0a
    2ad6:	3b 85       	ldd	r19, Y+11	; 0x0b
    2ad8:	22 30       	cpi	r18, 0x02	; 2
    2ada:	31 05       	cpc	r19, r1
    2adc:	59 f0       	breq	.+22     	; 0x2af4 <USART_Init+0xaa>
    2ade:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ae0:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ae2:	00 97       	sbiw	r24, 0x00	; 0
    2ae4:	a1 f4       	brne	.+40     	; 0x2b0e <USART_Init+0xc4>
	{
	case DISABLE:
		Result &=~(1<<UPM0);
    2ae6:	89 81       	ldd	r24, Y+1	; 0x01
    2ae8:	8f 7e       	andi	r24, 0xEF	; 239
    2aea:	89 83       	std	Y+1, r24	; 0x01
		Result &=~(1<<UPM1);
    2aec:	89 81       	ldd	r24, Y+1	; 0x01
    2aee:	8f 7d       	andi	r24, 0xDF	; 223
    2af0:	89 83       	std	Y+1, r24	; 0x01
    2af2:	0d c0       	rjmp	.+26     	; 0x2b0e <USART_Init+0xc4>
		break;
	case EVEN:
		Result &=~(1<<UPM0);
    2af4:	89 81       	ldd	r24, Y+1	; 0x01
    2af6:	8f 7e       	andi	r24, 0xEF	; 239
    2af8:	89 83       	std	Y+1, r24	; 0x01
		Result |= (1<<UPM1);
    2afa:	89 81       	ldd	r24, Y+1	; 0x01
    2afc:	80 62       	ori	r24, 0x20	; 32
    2afe:	89 83       	std	Y+1, r24	; 0x01
    2b00:	06 c0       	rjmp	.+12     	; 0x2b0e <USART_Init+0xc4>
		break;
	case ODD:
		Result |= (1<<UPM0);
    2b02:	89 81       	ldd	r24, Y+1	; 0x01
    2b04:	80 61       	ori	r24, 0x10	; 16
    2b06:	89 83       	std	Y+1, r24	; 0x01
		Result |= (1<<UPM1);
    2b08:	89 81       	ldd	r24, Y+1	; 0x01
    2b0a:	80 62       	ori	r24, 0x20	; 32
    2b0c:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}
	switch(Stop_Bits)
    2b0e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b10:	28 2f       	mov	r18, r24
    2b12:	30 e0       	ldi	r19, 0x00	; 0
    2b14:	39 87       	std	Y+9, r19	; 0x09
    2b16:	28 87       	std	Y+8, r18	; 0x08
    2b18:	88 85       	ldd	r24, Y+8	; 0x08
    2b1a:	99 85       	ldd	r25, Y+9	; 0x09
    2b1c:	81 30       	cpi	r24, 0x01	; 1
    2b1e:	91 05       	cpc	r25, r1
    2b20:	31 f0       	breq	.+12     	; 0x2b2e <USART_Init+0xe4>
    2b22:	28 85       	ldd	r18, Y+8	; 0x08
    2b24:	39 85       	ldd	r19, Y+9	; 0x09
    2b26:	22 30       	cpi	r18, 0x02	; 2
    2b28:	31 05       	cpc	r19, r1
    2b2a:	29 f0       	breq	.+10     	; 0x2b36 <USART_Init+0xec>
    2b2c:	07 c0       	rjmp	.+14     	; 0x2b3c <USART_Init+0xf2>
	{
	case 1 :
		Result &=~(1<<USBS);
    2b2e:	89 81       	ldd	r24, Y+1	; 0x01
    2b30:	87 7f       	andi	r24, 0xF7	; 247
    2b32:	89 83       	std	Y+1, r24	; 0x01
    2b34:	03 c0       	rjmp	.+6      	; 0x2b3c <USART_Init+0xf2>
		break;
	case 2 :
		Result |= (1<<USBS);
    2b36:	89 81       	ldd	r24, Y+1	; 0x01
    2b38:	88 60       	ori	r24, 0x08	; 8
    2b3a:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}
   switch(Charcter_Size)
    2b3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b3e:	28 2f       	mov	r18, r24
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	3f 83       	std	Y+7, r19	; 0x07
    2b44:	2e 83       	std	Y+6, r18	; 0x06
    2b46:	8e 81       	ldd	r24, Y+6	; 0x06
    2b48:	9f 81       	ldd	r25, Y+7	; 0x07
    2b4a:	87 30       	cpi	r24, 0x07	; 7
    2b4c:	91 05       	cpc	r25, r1
    2b4e:	b9 f1       	breq	.+110    	; 0x2bbe <USART_Init+0x174>
    2b50:	2e 81       	ldd	r18, Y+6	; 0x06
    2b52:	3f 81       	ldd	r19, Y+7	; 0x07
    2b54:	28 30       	cpi	r18, 0x08	; 8
    2b56:	31 05       	cpc	r19, r1
    2b58:	5c f4       	brge	.+22     	; 0x2b70 <USART_Init+0x126>
    2b5a:	8e 81       	ldd	r24, Y+6	; 0x06
    2b5c:	9f 81       	ldd	r25, Y+7	; 0x07
    2b5e:	85 30       	cpi	r24, 0x05	; 5
    2b60:	91 05       	cpc	r25, r1
    2b62:	89 f0       	breq	.+34     	; 0x2b86 <USART_Init+0x13c>
    2b64:	2e 81       	ldd	r18, Y+6	; 0x06
    2b66:	3f 81       	ldd	r19, Y+7	; 0x07
    2b68:	26 30       	cpi	r18, 0x06	; 6
    2b6a:	31 05       	cpc	r19, r1
    2b6c:	d1 f0       	breq	.+52     	; 0x2ba2 <USART_Init+0x158>
    2b6e:	50 c0       	rjmp	.+160    	; 0x2c10 <USART_Init+0x1c6>
    2b70:	8e 81       	ldd	r24, Y+6	; 0x06
    2b72:	9f 81       	ldd	r25, Y+7	; 0x07
    2b74:	88 30       	cpi	r24, 0x08	; 8
    2b76:	91 05       	cpc	r25, r1
    2b78:	81 f1       	breq	.+96     	; 0x2bda <USART_Init+0x190>
    2b7a:	2e 81       	ldd	r18, Y+6	; 0x06
    2b7c:	3f 81       	ldd	r19, Y+7	; 0x07
    2b7e:	29 30       	cpi	r18, 0x09	; 9
    2b80:	31 05       	cpc	r19, r1
    2b82:	c9 f1       	breq	.+114    	; 0x2bf6 <USART_Init+0x1ac>
    2b84:	45 c0       	rjmp	.+138    	; 0x2c10 <USART_Init+0x1c6>
   {
   case 5:
	   Result &=~(1<<UCSZ0);
    2b86:	89 81       	ldd	r24, Y+1	; 0x01
    2b88:	8d 7f       	andi	r24, 0xFD	; 253
    2b8a:	89 83       	std	Y+1, r24	; 0x01
	   Result &=~(1<<UCSZ1);
    2b8c:	89 81       	ldd	r24, Y+1	; 0x01
    2b8e:	8b 7f       	andi	r24, 0xFB	; 251
    2b90:	89 83       	std	Y+1, r24	; 0x01
	   UCSRB  &=~(1<<UCSZ2);
    2b92:	aa e2       	ldi	r26, 0x2A	; 42
    2b94:	b0 e0       	ldi	r27, 0x00	; 0
    2b96:	ea e2       	ldi	r30, 0x2A	; 42
    2b98:	f0 e0       	ldi	r31, 0x00	; 0
    2b9a:	80 81       	ld	r24, Z
    2b9c:	8b 7f       	andi	r24, 0xFB	; 251
    2b9e:	8c 93       	st	X, r24
    2ba0:	37 c0       	rjmp	.+110    	; 0x2c10 <USART_Init+0x1c6>
	   break;
   case 6:
	   Result |= (1<<UCSZ0);
    2ba2:	89 81       	ldd	r24, Y+1	; 0x01
    2ba4:	82 60       	ori	r24, 0x02	; 2
    2ba6:	89 83       	std	Y+1, r24	; 0x01
	   Result &=~(1<<UCSZ1);
    2ba8:	89 81       	ldd	r24, Y+1	; 0x01
    2baa:	8b 7f       	andi	r24, 0xFB	; 251
    2bac:	89 83       	std	Y+1, r24	; 0x01
	   UCSRB  &=~(1<<UCSZ2);
    2bae:	aa e2       	ldi	r26, 0x2A	; 42
    2bb0:	b0 e0       	ldi	r27, 0x00	; 0
    2bb2:	ea e2       	ldi	r30, 0x2A	; 42
    2bb4:	f0 e0       	ldi	r31, 0x00	; 0
    2bb6:	80 81       	ld	r24, Z
    2bb8:	8b 7f       	andi	r24, 0xFB	; 251
    2bba:	8c 93       	st	X, r24
    2bbc:	29 c0       	rjmp	.+82     	; 0x2c10 <USART_Init+0x1c6>
	   break;
   case 7:
	   Result &=~(1<<UCSZ0);
    2bbe:	89 81       	ldd	r24, Y+1	; 0x01
    2bc0:	8d 7f       	andi	r24, 0xFD	; 253
    2bc2:	89 83       	std	Y+1, r24	; 0x01
	   Result |= (1<<UCSZ1);
    2bc4:	89 81       	ldd	r24, Y+1	; 0x01
    2bc6:	84 60       	ori	r24, 0x04	; 4
    2bc8:	89 83       	std	Y+1, r24	; 0x01
	   UCSRB  &=~(1<<UCSZ2);
    2bca:	aa e2       	ldi	r26, 0x2A	; 42
    2bcc:	b0 e0       	ldi	r27, 0x00	; 0
    2bce:	ea e2       	ldi	r30, 0x2A	; 42
    2bd0:	f0 e0       	ldi	r31, 0x00	; 0
    2bd2:	80 81       	ld	r24, Z
    2bd4:	8b 7f       	andi	r24, 0xFB	; 251
    2bd6:	8c 93       	st	X, r24
    2bd8:	1b c0       	rjmp	.+54     	; 0x2c10 <USART_Init+0x1c6>
	   break;
   case 8:
	   Result |= (1<<UCSZ0);
    2bda:	89 81       	ldd	r24, Y+1	; 0x01
    2bdc:	82 60       	ori	r24, 0x02	; 2
    2bde:	89 83       	std	Y+1, r24	; 0x01
	   Result |= (1<<UCSZ1);
    2be0:	89 81       	ldd	r24, Y+1	; 0x01
    2be2:	84 60       	ori	r24, 0x04	; 4
    2be4:	89 83       	std	Y+1, r24	; 0x01
	   UCSRB  &=~(1<<UCSZ2);
    2be6:	aa e2       	ldi	r26, 0x2A	; 42
    2be8:	b0 e0       	ldi	r27, 0x00	; 0
    2bea:	ea e2       	ldi	r30, 0x2A	; 42
    2bec:	f0 e0       	ldi	r31, 0x00	; 0
    2bee:	80 81       	ld	r24, Z
    2bf0:	8b 7f       	andi	r24, 0xFB	; 251
    2bf2:	8c 93       	st	X, r24
    2bf4:	0d c0       	rjmp	.+26     	; 0x2c10 <USART_Init+0x1c6>
	   break;
   case 9:
	   Result |= (1<<UCSZ0);
    2bf6:	89 81       	ldd	r24, Y+1	; 0x01
    2bf8:	82 60       	ori	r24, 0x02	; 2
    2bfa:	89 83       	std	Y+1, r24	; 0x01
	   Result |= (1<<UCSZ1);
    2bfc:	89 81       	ldd	r24, Y+1	; 0x01
    2bfe:	84 60       	ori	r24, 0x04	; 4
    2c00:	89 83       	std	Y+1, r24	; 0x01
	   UCSRB  |= (1<<UCSZ2);
    2c02:	aa e2       	ldi	r26, 0x2A	; 42
    2c04:	b0 e0       	ldi	r27, 0x00	; 0
    2c06:	ea e2       	ldi	r30, 0x2A	; 42
    2c08:	f0 e0       	ldi	r31, 0x00	; 0
    2c0a:	80 81       	ld	r24, Z
    2c0c:	84 60       	ori	r24, 0x04	; 4
    2c0e:	8c 93       	st	X, r24
	   break;
   default:
	   break;
   }
   Result |=(1<<USREL);
    2c10:	89 81       	ldd	r24, Y+1	; 0x01
    2c12:	80 68       	ori	r24, 0x80	; 128
    2c14:	89 83       	std	Y+1, r24	; 0x01
   UCSRC=Result;
    2c16:	e0 e4       	ldi	r30, 0x40	; 64
    2c18:	f0 e0       	ldi	r31, 0x00	; 0
    2c1a:	89 81       	ldd	r24, Y+1	; 0x01
    2c1c:	80 83       	st	Z, r24
}
    2c1e:	2d 96       	adiw	r28, 0x0d	; 13
    2c20:	0f b6       	in	r0, 0x3f	; 63
    2c22:	f8 94       	cli
    2c24:	de bf       	out	0x3e, r29	; 62
    2c26:	0f be       	out	0x3f, r0	; 63
    2c28:	cd bf       	out	0x3d, r28	; 61
    2c2a:	cf 91       	pop	r28
    2c2c:	df 91       	pop	r29
    2c2e:	08 95       	ret

00002c30 <USART_TX_Enabel>:
void USART_TX_Enabel()
{
    2c30:	df 93       	push	r29
    2c32:	cf 93       	push	r28
    2c34:	cd b7       	in	r28, 0x3d	; 61
    2c36:	de b7       	in	r29, 0x3e	; 62
	UCSRB |=(1<<TXEN);
    2c38:	aa e2       	ldi	r26, 0x2A	; 42
    2c3a:	b0 e0       	ldi	r27, 0x00	; 0
    2c3c:	ea e2       	ldi	r30, 0x2A	; 42
    2c3e:	f0 e0       	ldi	r31, 0x00	; 0
    2c40:	80 81       	ld	r24, Z
    2c42:	88 60       	ori	r24, 0x08	; 8
    2c44:	8c 93       	st	X, r24
}
    2c46:	cf 91       	pop	r28
    2c48:	df 91       	pop	r29
    2c4a:	08 95       	ret

00002c4c <USART_RX_Enabel>:
void USART_RX_Enabel()
{
    2c4c:	df 93       	push	r29
    2c4e:	cf 93       	push	r28
    2c50:	cd b7       	in	r28, 0x3d	; 61
    2c52:	de b7       	in	r29, 0x3e	; 62
	UCSRB |=(1<<RXEN);
    2c54:	aa e2       	ldi	r26, 0x2A	; 42
    2c56:	b0 e0       	ldi	r27, 0x00	; 0
    2c58:	ea e2       	ldi	r30, 0x2A	; 42
    2c5a:	f0 e0       	ldi	r31, 0x00	; 0
    2c5c:	80 81       	ld	r24, Z
    2c5e:	80 61       	ori	r24, 0x10	; 16
    2c60:	8c 93       	st	X, r24
}
    2c62:	cf 91       	pop	r28
    2c64:	df 91       	pop	r29
    2c66:	08 95       	ret

00002c68 <USART_TX_IE>:
void USART_TX_IE()
{
    2c68:	df 93       	push	r29
    2c6a:	cf 93       	push	r28
    2c6c:	cd b7       	in	r28, 0x3d	; 61
    2c6e:	de b7       	in	r29, 0x3e	; 62
	UCSRB |=(1<<TXCIE);
    2c70:	aa e2       	ldi	r26, 0x2A	; 42
    2c72:	b0 e0       	ldi	r27, 0x00	; 0
    2c74:	ea e2       	ldi	r30, 0x2A	; 42
    2c76:	f0 e0       	ldi	r31, 0x00	; 0
    2c78:	80 81       	ld	r24, Z
    2c7a:	80 64       	ori	r24, 0x40	; 64
    2c7c:	8c 93       	st	X, r24
}
    2c7e:	cf 91       	pop	r28
    2c80:	df 91       	pop	r29
    2c82:	08 95       	ret

00002c84 <USART_RX_IE>:
void USART_RX_IE()
{
    2c84:	df 93       	push	r29
    2c86:	cf 93       	push	r28
    2c88:	cd b7       	in	r28, 0x3d	; 61
    2c8a:	de b7       	in	r29, 0x3e	; 62
	UCSRB |=(1<<RXCIE);
    2c8c:	aa e2       	ldi	r26, 0x2A	; 42
    2c8e:	b0 e0       	ldi	r27, 0x00	; 0
    2c90:	ea e2       	ldi	r30, 0x2A	; 42
    2c92:	f0 e0       	ldi	r31, 0x00	; 0
    2c94:	80 81       	ld	r24, Z
    2c96:	80 68       	ori	r24, 0x80	; 128
    2c98:	8c 93       	st	X, r24
}
    2c9a:	cf 91       	pop	r28
    2c9c:	df 91       	pop	r29
    2c9e:	08 95       	ret

00002ca0 <USART_UDRE_IE>:
void USART_UDRE_IE()
{
    2ca0:	df 93       	push	r29
    2ca2:	cf 93       	push	r28
    2ca4:	cd b7       	in	r28, 0x3d	; 61
    2ca6:	de b7       	in	r29, 0x3e	; 62
	UCSRB |=(1<<UDRIE);
    2ca8:	aa e2       	ldi	r26, 0x2A	; 42
    2caa:	b0 e0       	ldi	r27, 0x00	; 0
    2cac:	ea e2       	ldi	r30, 0x2A	; 42
    2cae:	f0 e0       	ldi	r31, 0x00	; 0
    2cb0:	80 81       	ld	r24, Z
    2cb2:	80 62       	ori	r24, 0x20	; 32
    2cb4:	8c 93       	st	X, r24
}
    2cb6:	cf 91       	pop	r28
    2cb8:	df 91       	pop	r29
    2cba:	08 95       	ret

00002cbc <USART_Baud_Rate>:
void USART_Baud_Rate()
{
    2cbc:	df 93       	push	r29
    2cbe:	cf 93       	push	r28
    2cc0:	cd b7       	in	r28, 0x3d	; 61
    2cc2:	de b7       	in	r29, 0x3e	; 62
	UBRRL =103;
    2cc4:	e9 e2       	ldi	r30, 0x29	; 41
    2cc6:	f0 e0       	ldi	r31, 0x00	; 0
    2cc8:	87 e6       	ldi	r24, 0x67	; 103
    2cca:	80 83       	st	Z, r24
	UBRRH =0x00;
    2ccc:	e0 e4       	ldi	r30, 0x40	; 64
    2cce:	f0 e0       	ldi	r31, 0x00	; 0
    2cd0:	10 82       	st	Z, r1
}
    2cd2:	cf 91       	pop	r28
    2cd4:	df 91       	pop	r29
    2cd6:	08 95       	ret

00002cd8 <USART_Send_Char>:
void USART_Send_Char(u8 Data)
{
    2cd8:	df 93       	push	r29
    2cda:	cf 93       	push	r28
    2cdc:	0f 92       	push	r0
    2cde:	cd b7       	in	r28, 0x3d	; 61
    2ce0:	de b7       	in	r29, 0x3e	; 62
    2ce2:	89 83       	std	Y+1, r24	; 0x01
	while(!((UCSRA>>5)&1)); /*UDR Empty Register Method*/
    2ce4:	eb e2       	ldi	r30, 0x2B	; 43
    2ce6:	f0 e0       	ldi	r31, 0x00	; 0
    2ce8:	80 81       	ld	r24, Z
    2cea:	82 95       	swap	r24
    2cec:	86 95       	lsr	r24
    2cee:	87 70       	andi	r24, 0x07	; 7
    2cf0:	88 2f       	mov	r24, r24
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	81 70       	andi	r24, 0x01	; 1
    2cf6:	90 70       	andi	r25, 0x00	; 0
    2cf8:	00 97       	sbiw	r24, 0x00	; 0
    2cfa:	a1 f3       	breq	.-24     	; 0x2ce4 <USART_Send_Char+0xc>
	UDR = Data;
    2cfc:	ec e2       	ldi	r30, 0x2C	; 44
    2cfe:	f0 e0       	ldi	r31, 0x00	; 0
    2d00:	89 81       	ldd	r24, Y+1	; 0x01
    2d02:	80 83       	st	Z, r24


}
    2d04:	0f 90       	pop	r0
    2d06:	cf 91       	pop	r28
    2d08:	df 91       	pop	r29
    2d0a:	08 95       	ret

00002d0c <USART_Recive_Char>:
u8 USART_Recive_Char()
{
    2d0c:	df 93       	push	r29
    2d0e:	cf 93       	push	r28
    2d10:	cd b7       	in	r28, 0x3d	; 61
    2d12:	de b7       	in	r29, 0x3e	; 62
	while(((UCSRA>>7)&1)==0);
    2d14:	eb e2       	ldi	r30, 0x2B	; 43
    2d16:	f0 e0       	ldi	r31, 0x00	; 0
    2d18:	80 81       	ld	r24, Z
    2d1a:	88 23       	and	r24, r24
    2d1c:	dc f7       	brge	.-10     	; 0x2d14 <USART_Recive_Char+0x8>
	return UDR;
    2d1e:	ec e2       	ldi	r30, 0x2C	; 44
    2d20:	f0 e0       	ldi	r31, 0x00	; 0
    2d22:	80 81       	ld	r24, Z

}
    2d24:	cf 91       	pop	r28
    2d26:	df 91       	pop	r29
    2d28:	08 95       	ret

00002d2a <USART_Send_String>:
void USART_Send_String(u8 *T_Data)
{
    2d2a:	df 93       	push	r29
    2d2c:	cf 93       	push	r28
    2d2e:	00 d0       	rcall	.+0      	; 0x2d30 <USART_Send_String+0x6>
    2d30:	0f 92       	push	r0
    2d32:	cd b7       	in	r28, 0x3d	; 61
    2d34:	de b7       	in	r29, 0x3e	; 62
    2d36:	9b 83       	std	Y+3, r25	; 0x03
    2d38:	8a 83       	std	Y+2, r24	; 0x02

	u8 Str_Size = 0;
    2d3a:	19 82       	std	Y+1, r1	; 0x01
    2d3c:	1b c0       	rjmp	.+54     	; 0x2d74 <USART_Send_String+0x4a>
	while(T_Data[Str_Size] != 0)
	{
		while(!((UCSRA>>5)&1)); /*UDR Empty Register Method*/
    2d3e:	eb e2       	ldi	r30, 0x2B	; 43
    2d40:	f0 e0       	ldi	r31, 0x00	; 0
    2d42:	80 81       	ld	r24, Z
    2d44:	82 95       	swap	r24
    2d46:	86 95       	lsr	r24
    2d48:	87 70       	andi	r24, 0x07	; 7
    2d4a:	88 2f       	mov	r24, r24
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	81 70       	andi	r24, 0x01	; 1
    2d50:	90 70       	andi	r25, 0x00	; 0
    2d52:	00 97       	sbiw	r24, 0x00	; 0
    2d54:	a1 f3       	breq	.-24     	; 0x2d3e <USART_Send_String+0x14>
		UDR = T_Data[Str_Size];
    2d56:	ac e2       	ldi	r26, 0x2C	; 44
    2d58:	b0 e0       	ldi	r27, 0x00	; 0
    2d5a:	89 81       	ldd	r24, Y+1	; 0x01
    2d5c:	28 2f       	mov	r18, r24
    2d5e:	30 e0       	ldi	r19, 0x00	; 0
    2d60:	8a 81       	ldd	r24, Y+2	; 0x02
    2d62:	9b 81       	ldd	r25, Y+3	; 0x03
    2d64:	fc 01       	movw	r30, r24
    2d66:	e2 0f       	add	r30, r18
    2d68:	f3 1f       	adc	r31, r19
    2d6a:	80 81       	ld	r24, Z
    2d6c:	8c 93       	st	X, r24
		Str_Size ++;
    2d6e:	89 81       	ldd	r24, Y+1	; 0x01
    2d70:	8f 5f       	subi	r24, 0xFF	; 255
    2d72:	89 83       	std	Y+1, r24	; 0x01
}
void USART_Send_String(u8 *T_Data)
{

	u8 Str_Size = 0;
	while(T_Data[Str_Size] != 0)
    2d74:	89 81       	ldd	r24, Y+1	; 0x01
    2d76:	28 2f       	mov	r18, r24
    2d78:	30 e0       	ldi	r19, 0x00	; 0
    2d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d7c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d7e:	fc 01       	movw	r30, r24
    2d80:	e2 0f       	add	r30, r18
    2d82:	f3 1f       	adc	r31, r19
    2d84:	80 81       	ld	r24, Z
    2d86:	88 23       	and	r24, r24
    2d88:	d1 f6       	brne	.-76     	; 0x2d3e <USART_Send_String+0x14>
	{
		while(!((UCSRA>>5)&1)); /*UDR Empty Register Method*/
		UDR = T_Data[Str_Size];
		Str_Size ++;
	}
}
    2d8a:	0f 90       	pop	r0
    2d8c:	0f 90       	pop	r0
    2d8e:	0f 90       	pop	r0
    2d90:	cf 91       	pop	r28
    2d92:	df 91       	pop	r29
    2d94:	08 95       	ret

00002d96 <USART_Recive_String>:
void USART_Recive_String(u8 *R_Data)
{
    2d96:	df 93       	push	r29
    2d98:	cf 93       	push	r28
    2d9a:	00 d0       	rcall	.+0      	; 0x2d9c <USART_Recive_String+0x6>
    2d9c:	00 d0       	rcall	.+0      	; 0x2d9e <USART_Recive_String+0x8>
    2d9e:	0f 92       	push	r0
    2da0:	cd b7       	in	r28, 0x3d	; 61
    2da2:	de b7       	in	r29, 0x3e	; 62
    2da4:	9d 83       	std	Y+5, r25	; 0x05
    2da6:	8c 83       	std	Y+4, r24	; 0x04
	u8 End,Str_Size = 0,New_Data;
    2da8:	1a 82       	std	Y+2, r1	; 0x02
	while(((UCSRA>>7)&1)==0);
    2daa:	eb e2       	ldi	r30, 0x2B	; 43
    2dac:	f0 e0       	ldi	r31, 0x00	; 0
    2dae:	80 81       	ld	r24, Z
    2db0:	88 23       	and	r24, r24
    2db2:	dc f7       	brge	.-10     	; 0x2daa <USART_Recive_String+0x14>
	End = UDR;
    2db4:	ec e2       	ldi	r30, 0x2C	; 44
    2db6:	f0 e0       	ldi	r31, 0x00	; 0
    2db8:	80 81       	ld	r24, Z
    2dba:	8b 83       	std	Y+3, r24	; 0x03
	while(1)
	{
		while(((UCSRA>>7)&1)==0);
    2dbc:	eb e2       	ldi	r30, 0x2B	; 43
    2dbe:	f0 e0       	ldi	r31, 0x00	; 0
    2dc0:	80 81       	ld	r24, Z
    2dc2:	88 23       	and	r24, r24
    2dc4:	dc f7       	brge	.-10     	; 0x2dbc <USART_Recive_String+0x26>
		New_Data = UDR;
    2dc6:	ec e2       	ldi	r30, 0x2C	; 44
    2dc8:	f0 e0       	ldi	r31, 0x00	; 0
    2dca:	80 81       	ld	r24, Z
    2dcc:	89 83       	std	Y+1, r24	; 0x01
		if(New_Data==End)
    2dce:	99 81       	ldd	r25, Y+1	; 0x01
    2dd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd2:	98 17       	cp	r25, r24
    2dd4:	89 f4       	brne	.+34     	; 0x2df8 <USART_Recive_String+0x62>
		{
			R_Data[Str_Size]=0;
    2dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd8:	28 2f       	mov	r18, r24
    2dda:	30 e0       	ldi	r19, 0x00	; 0
    2ddc:	8c 81       	ldd	r24, Y+4	; 0x04
    2dde:	9d 81       	ldd	r25, Y+5	; 0x05
    2de0:	fc 01       	movw	r30, r24
    2de2:	e2 0f       	add	r30, r18
    2de4:	f3 1f       	adc	r31, r19
    2de6:	10 82       	st	Z, r1
			break;
		}
		R_Data[Str_Size++]=New_Data;
		}
}
    2de8:	0f 90       	pop	r0
    2dea:	0f 90       	pop	r0
    2dec:	0f 90       	pop	r0
    2dee:	0f 90       	pop	r0
    2df0:	0f 90       	pop	r0
    2df2:	cf 91       	pop	r28
    2df4:	df 91       	pop	r29
    2df6:	08 95       	ret
		if(New_Data==End)
		{
			R_Data[Str_Size]=0;
			break;
		}
		R_Data[Str_Size++]=New_Data;
    2df8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dfa:	28 2f       	mov	r18, r24
    2dfc:	30 e0       	ldi	r19, 0x00	; 0
    2dfe:	8c 81       	ldd	r24, Y+4	; 0x04
    2e00:	9d 81       	ldd	r25, Y+5	; 0x05
    2e02:	fc 01       	movw	r30, r24
    2e04:	e2 0f       	add	r30, r18
    2e06:	f3 1f       	adc	r31, r19
    2e08:	89 81       	ldd	r24, Y+1	; 0x01
    2e0a:	80 83       	st	Z, r24
    2e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e0e:	8f 5f       	subi	r24, 0xFF	; 255
    2e10:	8a 83       	std	Y+2, r24	; 0x02
    2e12:	d4 cf       	rjmp	.-88     	; 0x2dbc <USART_Recive_String+0x26>

00002e14 <AC_On>:
 */
#include "../HAL/Timer0_Init.h"
#include "../MCAL/AVR_REG.h"

void AC_On()
{
    2e14:	df 93       	push	r29
    2e16:	cf 93       	push	r28
    2e18:	cd b7       	in	r28, 0x3d	; 61
    2e1a:	de b7       	in	r29, 0x3e	; 62
	MotOr_On();
    2e1c:	0e 94 18 14 	call	0x2830	; 0x2830 <MotOr_On>

}
    2e20:	cf 91       	pop	r28
    2e22:	df 91       	pop	r29
    2e24:	08 95       	ret

00002e26 <AC_Off>:
void AC_Off()
{
    2e26:	df 93       	push	r29
    2e28:	cf 93       	push	r28
    2e2a:	cd b7       	in	r28, 0x3d	; 61
    2e2c:	de b7       	in	r29, 0x3e	; 62
	 MotOr_0ff();
    2e2e:	0e 94 0e 14 	call	0x281c	; 0x281c <MotOr_0ff>
}
    2e32:	cf 91       	pop	r28
    2e34:	df 91       	pop	r29
    2e36:	08 95       	ret

00002e38 <AC_Init>:
void AC_Init()
{
    2e38:	df 93       	push	r29
    2e3a:	cf 93       	push	r28
    2e3c:	cd b7       	in	r28, 0x3d	; 61
    2e3e:	de b7       	in	r29, 0x3e	; 62
	DDRB|=(1<<3);
    2e40:	a7 e3       	ldi	r26, 0x37	; 55
    2e42:	b0 e0       	ldi	r27, 0x00	; 0
    2e44:	e7 e3       	ldi	r30, 0x37	; 55
    2e46:	f0 e0       	ldi	r31, 0x00	; 0
    2e48:	80 81       	ld	r24, Z
    2e4a:	88 60       	ori	r24, 0x08	; 8
    2e4c:	8c 93       	st	X, r24
	Waveform0_Gen_Mode();
    2e4e:	0e 94 ba 13 	call	0x2774	; 0x2774 <Waveform0_Gen_Mode>
	Compare0_Match_Out_Mode();
    2e52:	0e 94 cf 13 	call	0x279e	; 0x279e <Compare0_Match_Out_Mode>
	Clk0_Select();
    2e56:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <Clk0_Select>

}
    2e5a:	cf 91       	pop	r28
    2e5c:	df 91       	pop	r29
    2e5e:	08 95       	ret

00002e60 <Door_Open>:
 *      Author: ALNOUR
 */

#include "../HAL/Timer_Servo_Int.h"
void Door_Open()
{
    2e60:	df 93       	push	r29
    2e62:	cf 93       	push	r28
    2e64:	cd b7       	in	r28, 0x3d	; 61
    2e66:	de b7       	in	r29, 0x3e	; 62
	Motor_90_DEG();
    2e68:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <Motor_90_DEG>



}
    2e6c:	cf 91       	pop	r28
    2e6e:	df 91       	pop	r29
    2e70:	08 95       	ret

00002e72 <Door_Close>:
void Door_Close()
{
    2e72:	df 93       	push	r29
    2e74:	cf 93       	push	r28
    2e76:	cd b7       	in	r28, 0x3d	; 61
    2e78:	de b7       	in	r29, 0x3e	; 62
	Motor_0_DEG();
    2e7a:	0e 94 18 15 	call	0x2a30	; 0x2a30 <Motor_0_DEG>

}
    2e7e:	cf 91       	pop	r28
    2e80:	df 91       	pop	r29
    2e82:	08 95       	ret

00002e84 <Remote_Init>:
#include "../HAL/USART_Config.h"
#include "../HAL/USART_Private.h"
#include "../MCAL/stdTypes.h"
#include "../MCAL/AVR_REG.h"
void Remote_Init()
{
    2e84:	df 93       	push	r29
    2e86:	cf 93       	push	r28
    2e88:	cd b7       	in	r28, 0x3d	; 61
    2e8a:	de b7       	in	r29, 0x3e	; 62
	  USART_Init(Asynch_Noraml_Mode,DISABLE,1,8);
    2e8c:	81 e0       	ldi	r24, 0x01	; 1
    2e8e:	90 e0       	ldi	r25, 0x00	; 0
    2e90:	60 e0       	ldi	r22, 0x00	; 0
    2e92:	70 e0       	ldi	r23, 0x00	; 0
    2e94:	41 e0       	ldi	r20, 0x01	; 1
    2e96:	50 e0       	ldi	r21, 0x00	; 0
    2e98:	28 e0       	ldi	r18, 0x08	; 8
    2e9a:	30 e0       	ldi	r19, 0x00	; 0
    2e9c:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <USART_Init>
	  USART_Baud_Rate();
    2ea0:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <USART_Baud_Rate>
	  USART_RX_Enabel();
    2ea4:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <USART_RX_Enabel>
	  USART_TX_Enabel();
    2ea8:	0e 94 18 16 	call	0x2c30	; 0x2c30 <USART_TX_Enabel>
	  USART_Send_String("PRESS ANY KEY TO START\r\n");
    2eac:	80 e6       	ldi	r24, 0x60	; 96
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <USART_Send_String>


}
    2eb4:	cf 91       	pop	r28
    2eb6:	df 91       	pop	r29
    2eb8:	08 95       	ret

00002eba <Remote_Typing>:
void Remote_Typing(u8 *User_ID,u8 Str_Size,u8 State)
{
    2eba:	df 93       	push	r29
    2ebc:	cf 93       	push	r28
    2ebe:	00 d0       	rcall	.+0      	; 0x2ec0 <Remote_Typing+0x6>
    2ec0:	00 d0       	rcall	.+0      	; 0x2ec2 <Remote_Typing+0x8>
    2ec2:	00 d0       	rcall	.+0      	; 0x2ec4 <Remote_Typing+0xa>
    2ec4:	cd b7       	in	r28, 0x3d	; 61
    2ec6:	de b7       	in	r29, 0x3e	; 62
    2ec8:	9c 83       	std	Y+4, r25	; 0x04
    2eca:	8b 83       	std	Y+3, r24	; 0x03
    2ecc:	6d 83       	std	Y+5, r22	; 0x05
    2ece:	4e 83       	std	Y+6, r20	; 0x06
	u8 i,Writing;
	if(State==1)
    2ed0:	8e 81       	ldd	r24, Y+6	; 0x06
    2ed2:	81 30       	cpi	r24, 0x01	; 1
    2ed4:	d9 f4       	brne	.+54     	; 0x2f0c <Remote_Typing+0x52>
	{
	for(i=0;i<Str_Size;i++)
    2ed6:	1a 82       	std	Y+2, r1	; 0x02
    2ed8:	14 c0       	rjmp	.+40     	; 0x2f02 <Remote_Typing+0x48>
	{
		Writing=USART_Recive_Char();
    2eda:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <USART_Recive_Char>
    2ede:	89 83       	std	Y+1, r24	; 0x01
		USART_Send_Char('*');
    2ee0:	8a e2       	ldi	r24, 0x2A	; 42
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <USART_Send_Char>
		User_ID[i]=Writing;
    2ee8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eea:	28 2f       	mov	r18, r24
    2eec:	30 e0       	ldi	r19, 0x00	; 0
    2eee:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ef2:	fc 01       	movw	r30, r24
    2ef4:	e2 0f       	add	r30, r18
    2ef6:	f3 1f       	adc	r31, r19
    2ef8:	89 81       	ldd	r24, Y+1	; 0x01
    2efa:	80 83       	st	Z, r24
void Remote_Typing(u8 *User_ID,u8 Str_Size,u8 State)
{
	u8 i,Writing;
	if(State==1)
	{
	for(i=0;i<Str_Size;i++)
    2efc:	8a 81       	ldd	r24, Y+2	; 0x02
    2efe:	8f 5f       	subi	r24, 0xFF	; 255
    2f00:	8a 83       	std	Y+2, r24	; 0x02
    2f02:	9a 81       	ldd	r25, Y+2	; 0x02
    2f04:	8d 81       	ldd	r24, Y+5	; 0x05
    2f06:	98 17       	cp	r25, r24
    2f08:	40 f3       	brcs	.-48     	; 0x2eda <Remote_Typing+0x20>
    2f0a:	1e c0       	rjmp	.+60     	; 0x2f48 <Remote_Typing+0x8e>
		Writing=USART_Recive_Char();
		USART_Send_Char('*');
		User_ID[i]=Writing;
	}
	}
	else if(State== 0)
    2f0c:	8e 81       	ldd	r24, Y+6	; 0x06
    2f0e:	88 23       	and	r24, r24
    2f10:	d9 f4       	brne	.+54     	; 0x2f48 <Remote_Typing+0x8e>
	{
		for(i=0;i<Str_Size;i++)
    2f12:	1a 82       	std	Y+2, r1	; 0x02
    2f14:	15 c0       	rjmp	.+42     	; 0x2f40 <Remote_Typing+0x86>
		{
			Writing=USART_Recive_Char();
    2f16:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <USART_Recive_Char>
    2f1a:	89 83       	std	Y+1, r24	; 0x01
			USART_Send_Char(Writing);
    2f1c:	89 81       	ldd	r24, Y+1	; 0x01
    2f1e:	88 2f       	mov	r24, r24
    2f20:	90 e0       	ldi	r25, 0x00	; 0
    2f22:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <USART_Send_Char>
			User_ID[i]=Writing;
    2f26:	8a 81       	ldd	r24, Y+2	; 0x02
    2f28:	28 2f       	mov	r18, r24
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f2e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f30:	fc 01       	movw	r30, r24
    2f32:	e2 0f       	add	r30, r18
    2f34:	f3 1f       	adc	r31, r19
    2f36:	89 81       	ldd	r24, Y+1	; 0x01
    2f38:	80 83       	st	Z, r24
		User_ID[i]=Writing;
	}
	}
	else if(State== 0)
	{
		for(i=0;i<Str_Size;i++)
    2f3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f3c:	8f 5f       	subi	r24, 0xFF	; 255
    2f3e:	8a 83       	std	Y+2, r24	; 0x02
    2f40:	9a 81       	ldd	r25, Y+2	; 0x02
    2f42:	8d 81       	ldd	r24, Y+5	; 0x05
    2f44:	98 17       	cp	r25, r24
    2f46:	38 f3       	brcs	.-50     	; 0x2f16 <Remote_Typing+0x5c>
			USART_Send_Char(Writing);
			User_ID[i]=Writing;
		}
	}

}
    2f48:	26 96       	adiw	r28, 0x06	; 6
    2f4a:	0f b6       	in	r0, 0x3f	; 63
    2f4c:	f8 94       	cli
    2f4e:	de bf       	out	0x3e, r29	; 62
    2f50:	0f be       	out	0x3f, r0	; 63
    2f52:	cd bf       	out	0x3d, r28	; 61
    2f54:	cf 91       	pop	r28
    2f56:	df 91       	pop	r29
    2f58:	08 95       	ret

00002f5a <Remote_Send_String>:
void Remote_Send_String(u8 *T_Data)
{
    2f5a:	df 93       	push	r29
    2f5c:	cf 93       	push	r28
    2f5e:	00 d0       	rcall	.+0      	; 0x2f60 <Remote_Send_String+0x6>
    2f60:	cd b7       	in	r28, 0x3d	; 61
    2f62:	de b7       	in	r29, 0x3e	; 62
    2f64:	9a 83       	std	Y+2, r25	; 0x02
    2f66:	89 83       	std	Y+1, r24	; 0x01
	USART_Send_String(T_Data);
    2f68:	89 81       	ldd	r24, Y+1	; 0x01
    2f6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f6c:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <USART_Send_String>
}
    2f70:	0f 90       	pop	r0
    2f72:	0f 90       	pop	r0
    2f74:	cf 91       	pop	r28
    2f76:	df 91       	pop	r29
    2f78:	08 95       	ret

00002f7a <Remote_New_Line>:
void Remote_New_Line(u8 Num_Line)
{
    2f7a:	df 93       	push	r29
    2f7c:	cf 93       	push	r28
    2f7e:	00 d0       	rcall	.+0      	; 0x2f80 <Remote_New_Line+0x6>
    2f80:	cd b7       	in	r28, 0x3d	; 61
    2f82:	de b7       	in	r29, 0x3e	; 62
    2f84:	8a 83       	std	Y+2, r24	; 0x02
	u8 i;
	for(i=0;i<Num_Line;i++)
    2f86:	19 82       	std	Y+1, r1	; 0x01
    2f88:	07 c0       	rjmp	.+14     	; 0x2f98 <Remote_New_Line+0x1e>
	{
	USART_Send_String("    \r\n");
    2f8a:	89 e7       	ldi	r24, 0x79	; 121
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <USART_Send_String>
	USART_Send_String(T_Data);
}
void Remote_New_Line(u8 Num_Line)
{
	u8 i;
	for(i=0;i<Num_Line;i++)
    2f92:	89 81       	ldd	r24, Y+1	; 0x01
    2f94:	8f 5f       	subi	r24, 0xFF	; 255
    2f96:	89 83       	std	Y+1, r24	; 0x01
    2f98:	99 81       	ldd	r25, Y+1	; 0x01
    2f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f9c:	98 17       	cp	r25, r24
    2f9e:	a8 f3       	brcs	.-22     	; 0x2f8a <Remote_New_Line+0x10>
	{
	USART_Send_String("    \r\n");
	}

}
    2fa0:	0f 90       	pop	r0
    2fa2:	0f 90       	pop	r0
    2fa4:	cf 91       	pop	r28
    2fa6:	df 91       	pop	r29
    2fa8:	08 95       	ret

00002faa <Remote_Display>:
void Remote_Display(u8 *T_Data,u8 Str_Size)
{
    2faa:	df 93       	push	r29
    2fac:	cf 93       	push	r28
    2fae:	00 d0       	rcall	.+0      	; 0x2fb0 <Remote_Display+0x6>
    2fb0:	00 d0       	rcall	.+0      	; 0x2fb2 <Remote_Display+0x8>
    2fb2:	cd b7       	in	r28, 0x3d	; 61
    2fb4:	de b7       	in	r29, 0x3e	; 62
    2fb6:	9b 83       	std	Y+3, r25	; 0x03
    2fb8:	8a 83       	std	Y+2, r24	; 0x02
    2fba:	6c 83       	std	Y+4, r22	; 0x04
	u8 i;
	for(i=0 ;i<Str_Size;i++)
    2fbc:	19 82       	std	Y+1, r1	; 0x01
    2fbe:	1b c0       	rjmp	.+54     	; 0x2ff6 <Remote_Display+0x4c>
		{
			while(!((UCSRA>>5)&1)); /*UDR Empty Register Method*/
    2fc0:	eb e2       	ldi	r30, 0x2B	; 43
    2fc2:	f0 e0       	ldi	r31, 0x00	; 0
    2fc4:	80 81       	ld	r24, Z
    2fc6:	82 95       	swap	r24
    2fc8:	86 95       	lsr	r24
    2fca:	87 70       	andi	r24, 0x07	; 7
    2fcc:	88 2f       	mov	r24, r24
    2fce:	90 e0       	ldi	r25, 0x00	; 0
    2fd0:	81 70       	andi	r24, 0x01	; 1
    2fd2:	90 70       	andi	r25, 0x00	; 0
    2fd4:	00 97       	sbiw	r24, 0x00	; 0
    2fd6:	a1 f3       	breq	.-24     	; 0x2fc0 <Remote_Display+0x16>
			UDR = T_Data[i];
    2fd8:	ac e2       	ldi	r26, 0x2C	; 44
    2fda:	b0 e0       	ldi	r27, 0x00	; 0
    2fdc:	89 81       	ldd	r24, Y+1	; 0x01
    2fde:	28 2f       	mov	r18, r24
    2fe0:	30 e0       	ldi	r19, 0x00	; 0
    2fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe4:	9b 81       	ldd	r25, Y+3	; 0x03
    2fe6:	fc 01       	movw	r30, r24
    2fe8:	e2 0f       	add	r30, r18
    2fea:	f3 1f       	adc	r31, r19
    2fec:	80 81       	ld	r24, Z
    2fee:	8c 93       	st	X, r24

}
void Remote_Display(u8 *T_Data,u8 Str_Size)
{
	u8 i;
	for(i=0 ;i<Str_Size;i++)
    2ff0:	89 81       	ldd	r24, Y+1	; 0x01
    2ff2:	8f 5f       	subi	r24, 0xFF	; 255
    2ff4:	89 83       	std	Y+1, r24	; 0x01
    2ff6:	99 81       	ldd	r25, Y+1	; 0x01
    2ff8:	8c 81       	ldd	r24, Y+4	; 0x04
    2ffa:	98 17       	cp	r25, r24
    2ffc:	08 f3       	brcs	.-62     	; 0x2fc0 <Remote_Display+0x16>
		{
			while(!((UCSRA>>5)&1)); /*UDR Empty Register Method*/
			UDR = T_Data[i];
		}
}
    2ffe:	0f 90       	pop	r0
    3000:	0f 90       	pop	r0
    3002:	0f 90       	pop	r0
    3004:	0f 90       	pop	r0
    3006:	cf 91       	pop	r28
    3008:	df 91       	pop	r29
    300a:	08 95       	ret

0000300c <Temp_Sens_Int>:
#include "../HAL/ADC_Int.h"
#include "../HAL/ADC_Config.h"
void Temp_Sens_Int()
{
    300c:	df 93       	push	r29
    300e:	cf 93       	push	r28
    3010:	cd b7       	in	r28, 0x3d	; 61
    3012:	de b7       	in	r29, 0x3e	; 62
	 Analog_Select_Channel(0);
    3014:	80 e0       	ldi	r24, 0x00	; 0
    3016:	0e 94 1f 0a 	call	0x143e	; 0x143e <Analog_Select_Channel>
	 AD_Init(AVCC,64);
    301a:	80 e0       	ldi	r24, 0x00	; 0
    301c:	60 e4       	ldi	r22, 0x40	; 64
    301e:	0e 94 bd 08 	call	0x117a	; 0x117a <AD_Init>
	 Auto_Trigger_Enable(Free_Running_mode);
    3022:	80 e0       	ldi	r24, 0x00	; 0
    3024:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <Auto_Trigger_Enable>
	 AD_Start_Conversion();
    3028:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <AD_Start_Conversion>

}
    302c:	cf 91       	pop	r28
    302e:	df 91       	pop	r29
    3030:	08 95       	ret

00003032 <Temp_Sens_Read>:
u8 Temp_Sens_Read()
{
    3032:	df 93       	push	r29
    3034:	cf 93       	push	r28
    3036:	0f 92       	push	r0
    3038:	cd b7       	in	r28, 0x3d	; 61
    303a:	de b7       	in	r29, 0x3e	; 62
	u8 Read;
	ADC_Polling();
    303c:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <ADC_Polling>
	Read=(AD_Read_High(LEFT_READING))*2;
    3040:	80 e0       	ldi	r24, 0x00	; 0
    3042:	0e 94 3b 0a 	call	0x1476	; 0x1476 <AD_Read_High>
    3046:	88 2f       	mov	r24, r24
    3048:	90 e0       	ldi	r25, 0x00	; 0
    304a:	88 0f       	add	r24, r24
    304c:	99 1f       	adc	r25, r25
    304e:	89 83       	std	Y+1, r24	; 0x01
	return Read;
    3050:	89 81       	ldd	r24, Y+1	; 0x01
}
    3052:	0f 90       	pop	r0
    3054:	cf 91       	pop	r28
    3056:	df 91       	pop	r29
    3058:	08 95       	ret

0000305a <main>:


	}
}
#elif CODE ==2
int main() {
    305a:	df 93       	push	r29
    305c:	cf 93       	push	r28
    305e:	0f 92       	push	r0
    3060:	cd b7       	in	r28, 0x3d	; 61
    3062:	de b7       	in	r29, 0x3e	; 62
    Temp_Sens_Int();
    3064:	0e 94 06 18 	call	0x300c	; 0x300c <Temp_Sens_Int>
	LCD_enuInit();
    3068:	0e 94 8b 0c 	call	0x1916	; 0x1916 <LCD_enuInit>
	Keypad_enuInit();
    306c:	0e 94 97 0a 	call	0x152e	; 0x152e <Keypad_enuInit>
	Remote_Init();
    3070:	0e 94 42 17 	call	0x2e84	; 0x2e84 <Remote_Init>
	u8 Temprature;
	AC_Init();
    3074:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <AC_Init>
	//Door_Init();
	DDRA &=~(1<<0);
    3078:	aa e3       	ldi	r26, 0x3A	; 58
    307a:	b0 e0       	ldi	r27, 0x00	; 0
    307c:	ea e3       	ldi	r30, 0x3A	; 58
    307e:	f0 e0       	ldi	r31, 0x00	; 0
    3080:	80 81       	ld	r24, Z
    3082:	8e 7f       	andi	r24, 0xFE	; 254
    3084:	8c 93       	st	X, r24
	while(1)
	{
		 Temprature = Temp_Sens_Read();
    3086:	0e 94 19 18 	call	0x3032	; 0x3032 <Temp_Sens_Read>
    308a:	89 83       	std	Y+1, r24	; 0x01
		 if (Temprature >28)
    308c:	89 81       	ldd	r24, Y+1	; 0x01
    308e:	8d 31       	cpi	r24, 0x1D	; 29
    3090:	48 f0       	brcs	.+18     	; 0x30a4 <main+0x4a>
		   {
			     AC_On();
    3092:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <AC_On>
			     LCD_ClearDisplay();
    3096:	0e 94 17 13 	call	0x262e	; 0x262e <LCD_ClearDisplay>
				 LCD_enuSendString("AC_ON");
    309a:	80 e8       	ldi	r24, 0x80	; 128
    309c:	90 e0       	ldi	r25, 0x00	; 0
    309e:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <LCD_enuSendString>
    30a2:	f1 cf       	rjmp	.-30     	; 0x3086 <main+0x2c>
		   }
		 else if (Temprature <21)
    30a4:	89 81       	ldd	r24, Y+1	; 0x01
    30a6:	85 31       	cpi	r24, 0x15	; 21
    30a8:	70 f7       	brcc	.-36     	; 0x3086 <main+0x2c>
		   {
			 AC_Off();
    30aa:	0e 94 13 17 	call	0x2e26	; 0x2e26 <AC_Off>
			 LCD_ClearDisplay();
    30ae:	0e 94 17 13 	call	0x262e	; 0x262e <LCD_ClearDisplay>
    30b2:	e9 cf       	rjmp	.-46     	; 0x3086 <main+0x2c>

000030b4 <__prologue_saves__>:
    30b4:	2f 92       	push	r2
    30b6:	3f 92       	push	r3
    30b8:	4f 92       	push	r4
    30ba:	5f 92       	push	r5
    30bc:	6f 92       	push	r6
    30be:	7f 92       	push	r7
    30c0:	8f 92       	push	r8
    30c2:	9f 92       	push	r9
    30c4:	af 92       	push	r10
    30c6:	bf 92       	push	r11
    30c8:	cf 92       	push	r12
    30ca:	df 92       	push	r13
    30cc:	ef 92       	push	r14
    30ce:	ff 92       	push	r15
    30d0:	0f 93       	push	r16
    30d2:	1f 93       	push	r17
    30d4:	cf 93       	push	r28
    30d6:	df 93       	push	r29
    30d8:	cd b7       	in	r28, 0x3d	; 61
    30da:	de b7       	in	r29, 0x3e	; 62
    30dc:	ca 1b       	sub	r28, r26
    30de:	db 0b       	sbc	r29, r27
    30e0:	0f b6       	in	r0, 0x3f	; 63
    30e2:	f8 94       	cli
    30e4:	de bf       	out	0x3e, r29	; 62
    30e6:	0f be       	out	0x3f, r0	; 63
    30e8:	cd bf       	out	0x3d, r28	; 61
    30ea:	09 94       	ijmp

000030ec <__epilogue_restores__>:
    30ec:	2a 88       	ldd	r2, Y+18	; 0x12
    30ee:	39 88       	ldd	r3, Y+17	; 0x11
    30f0:	48 88       	ldd	r4, Y+16	; 0x10
    30f2:	5f 84       	ldd	r5, Y+15	; 0x0f
    30f4:	6e 84       	ldd	r6, Y+14	; 0x0e
    30f6:	7d 84       	ldd	r7, Y+13	; 0x0d
    30f8:	8c 84       	ldd	r8, Y+12	; 0x0c
    30fa:	9b 84       	ldd	r9, Y+11	; 0x0b
    30fc:	aa 84       	ldd	r10, Y+10	; 0x0a
    30fe:	b9 84       	ldd	r11, Y+9	; 0x09
    3100:	c8 84       	ldd	r12, Y+8	; 0x08
    3102:	df 80       	ldd	r13, Y+7	; 0x07
    3104:	ee 80       	ldd	r14, Y+6	; 0x06
    3106:	fd 80       	ldd	r15, Y+5	; 0x05
    3108:	0c 81       	ldd	r16, Y+4	; 0x04
    310a:	1b 81       	ldd	r17, Y+3	; 0x03
    310c:	aa 81       	ldd	r26, Y+2	; 0x02
    310e:	b9 81       	ldd	r27, Y+1	; 0x01
    3110:	ce 0f       	add	r28, r30
    3112:	d1 1d       	adc	r29, r1
    3114:	0f b6       	in	r0, 0x3f	; 63
    3116:	f8 94       	cli
    3118:	de bf       	out	0x3e, r29	; 62
    311a:	0f be       	out	0x3f, r0	; 63
    311c:	cd bf       	out	0x3d, r28	; 61
    311e:	ed 01       	movw	r28, r26
    3120:	08 95       	ret

00003122 <_exit>:
    3122:	f8 94       	cli

00003124 <__stop_program>:
    3124:	ff cf       	rjmp	.-2      	; 0x3124 <__stop_program>
