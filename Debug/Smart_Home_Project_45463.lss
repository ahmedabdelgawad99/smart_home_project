
Smart_Home_Project_45463.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003b44  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000035a  00800060  00003b44  00003bd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000083  008003ba  008003ba  00003f32  2**0
                  ALLOC
  3 .stab         00004b60  00000000  00000000  00003f34  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001ca5  00000000  00000000  00008a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000a739  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000a879  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000a9e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000c632  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000d51d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000e2cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000e42c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000e6b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ee87  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 c1 0a 	jmp	0x1582	; 0x1582 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e4       	ldi	r30, 0x44	; 68
      68:	fb e3       	ldi	r31, 0x3B	; 59
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3b       	cpi	r26, 0xBA	; 186
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	14 e0       	ldi	r17, 0x04	; 4
      78:	aa eb       	ldi	r26, 0xBA	; 186
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 33       	cpi	r26, 0x3D	; 61
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cf 19 	call	0x339e	; 0x339e <main>
      8a:	0c 94 a0 1d 	jmp	0x3b40	; 0x3b40 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 59 1d 	jmp	0x3ab2	; 0x3ab2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 ea       	ldi	r26, 0xA1	; 161
     128:	b3 e0       	ldi	r27, 0x03	; 3
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 75 1d 	jmp	0x3aea	; 0x3aea <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 65 1d 	jmp	0x3aca	; 0x3aca <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 81 1d 	jmp	0x3b02	; 0x3b02 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 65 1d 	jmp	0x3aca	; 0x3aca <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 81 1d 	jmp	0x3b02	; 0x3b02 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 59 1d 	jmp	0x3ab2	; 0x3ab2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 ea       	ldi	r24, 0xA1	; 161
     496:	93 e0       	ldi	r25, 0x03	; 3
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 75 1d 	jmp	0x3aea	; 0x3aea <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 65 1d 	jmp	0x3aca	; 0x3aca <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 81 1d 	jmp	0x3b02	; 0x3b02 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 65 1d 	jmp	0x3aca	; 0x3aca <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 81 1d 	jmp	0x3b02	; 0x3b02 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 65 1d 	jmp	0x3aca	; 0x3aca <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 81 1d 	jmp	0x3b02	; 0x3b02 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 69 1d 	jmp	0x3ad2	; 0x3ad2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 85 1d 	jmp	0x3b0a	; 0x3b0a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <AD_Init>:
#include "../MCAL/stdTypes.h"
#include "ADC_Private.h"
#include "../MCAL/AVR_REG.h"
#include "ADC_Config.h"
void AD_Init(u8 Vref , u8 Prescaler)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <AD_Init+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <AD_Init+0x8>
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <AD_Init+0xa>
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
switch(Prescaler)
     b58:	8a 81       	ldd	r24, Y+2	; 0x02
     b5a:	28 2f       	mov	r18, r24
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	3e 83       	std	Y+6, r19	; 0x06
     b60:	2d 83       	std	Y+5, r18	; 0x05
     b62:	8d 81       	ldd	r24, Y+5	; 0x05
     b64:	9e 81       	ldd	r25, Y+6	; 0x06
     b66:	80 31       	cpi	r24, 0x10	; 16
     b68:	91 05       	cpc	r25, r1
     b6a:	09 f4       	brne	.+2      	; 0xb6e <AD_Init+0x28>
     b6c:	6b c0       	rjmp	.+214    	; 0xc44 <AD_Init+0xfe>
     b6e:	2d 81       	ldd	r18, Y+5	; 0x05
     b70:	3e 81       	ldd	r19, Y+6	; 0x06
     b72:	21 31       	cpi	r18, 0x11	; 17
     b74:	31 05       	cpc	r19, r1
     b76:	8c f4       	brge	.+34     	; 0xb9a <AD_Init+0x54>
     b78:	8d 81       	ldd	r24, Y+5	; 0x05
     b7a:	9e 81       	ldd	r25, Y+6	; 0x06
     b7c:	84 30       	cpi	r24, 0x04	; 4
     b7e:	91 05       	cpc	r25, r1
     b80:	a9 f1       	breq	.+106    	; 0xbec <AD_Init+0xa6>
     b82:	2d 81       	ldd	r18, Y+5	; 0x05
     b84:	3e 81       	ldd	r19, Y+6	; 0x06
     b86:	28 30       	cpi	r18, 0x08	; 8
     b88:	31 05       	cpc	r19, r1
     b8a:	09 f4       	brne	.+2      	; 0xb8e <AD_Init+0x48>
     b8c:	45 c0       	rjmp	.+138    	; 0xc18 <AD_Init+0xd2>
     b8e:	8d 81       	ldd	r24, Y+5	; 0x05
     b90:	9e 81       	ldd	r25, Y+6	; 0x06
     b92:	82 30       	cpi	r24, 0x02	; 2
     b94:	91 05       	cpc	r25, r1
     b96:	a1 f0       	breq	.+40     	; 0xbc0 <AD_Init+0x7a>
     b98:	ac c0       	rjmp	.+344    	; 0xcf2 <AD_Init+0x1ac>
     b9a:	2d 81       	ldd	r18, Y+5	; 0x05
     b9c:	3e 81       	ldd	r19, Y+6	; 0x06
     b9e:	20 34       	cpi	r18, 0x40	; 64
     ba0:	31 05       	cpc	r19, r1
     ba2:	09 f4       	brne	.+2      	; 0xba6 <AD_Init+0x60>
     ba4:	7b c0       	rjmp	.+246    	; 0xc9c <AD_Init+0x156>
     ba6:	8d 81       	ldd	r24, Y+5	; 0x05
     ba8:	9e 81       	ldd	r25, Y+6	; 0x06
     baa:	80 38       	cpi	r24, 0x80	; 128
     bac:	91 05       	cpc	r25, r1
     bae:	09 f4       	brne	.+2      	; 0xbb2 <AD_Init+0x6c>
     bb0:	8b c0       	rjmp	.+278    	; 0xcc8 <AD_Init+0x182>
     bb2:	2d 81       	ldd	r18, Y+5	; 0x05
     bb4:	3e 81       	ldd	r19, Y+6	; 0x06
     bb6:	20 32       	cpi	r18, 0x20	; 32
     bb8:	31 05       	cpc	r19, r1
     bba:	09 f4       	brne	.+2      	; 0xbbe <AD_Init+0x78>
     bbc:	59 c0       	rjmp	.+178    	; 0xc70 <AD_Init+0x12a>
     bbe:	99 c0       	rjmp	.+306    	; 0xcf2 <AD_Init+0x1ac>
{
   case 2:
	ADCSRA |= (1<<ADPS0);
     bc0:	a6 e2       	ldi	r26, 0x26	; 38
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	e6 e2       	ldi	r30, 0x26	; 38
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	80 81       	ld	r24, Z
     bca:	81 60       	ori	r24, 0x01	; 1
     bcc:	8c 93       	st	X, r24
	ADCSRA &=~(1<<ADPS1);
     bce:	a6 e2       	ldi	r26, 0x26	; 38
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	e6 e2       	ldi	r30, 0x26	; 38
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	8d 7f       	andi	r24, 0xFD	; 253
     bda:	8c 93       	st	X, r24
	ADCSRA &=~(1<<ADPS2);
     bdc:	a6 e2       	ldi	r26, 0x26	; 38
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	e6 e2       	ldi	r30, 0x26	; 38
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	8b 7f       	andi	r24, 0xFB	; 251
     be8:	8c 93       	st	X, r24
     bea:	83 c0       	rjmp	.+262    	; 0xcf2 <AD_Init+0x1ac>
	break;
   case 4:
	ADCSRA &=~(1<<ADPS0);
     bec:	a6 e2       	ldi	r26, 0x26	; 38
     bee:	b0 e0       	ldi	r27, 0x00	; 0
     bf0:	e6 e2       	ldi	r30, 0x26	; 38
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	80 81       	ld	r24, Z
     bf6:	8e 7f       	andi	r24, 0xFE	; 254
     bf8:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADPS1);
     bfa:	a6 e2       	ldi	r26, 0x26	; 38
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	e6 e2       	ldi	r30, 0x26	; 38
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	80 81       	ld	r24, Z
     c04:	82 60       	ori	r24, 0x02	; 2
     c06:	8c 93       	st	X, r24
	ADCSRA &=~(1<<ADPS2);
     c08:	a6 e2       	ldi	r26, 0x26	; 38
     c0a:	b0 e0       	ldi	r27, 0x00	; 0
     c0c:	e6 e2       	ldi	r30, 0x26	; 38
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	80 81       	ld	r24, Z
     c12:	8b 7f       	andi	r24, 0xFB	; 251
     c14:	8c 93       	st	X, r24
     c16:	6d c0       	rjmp	.+218    	; 0xcf2 <AD_Init+0x1ac>
	break;
   case 8:
	ADCSRA |= (1<<ADPS0);
     c18:	a6 e2       	ldi	r26, 0x26	; 38
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	e6 e2       	ldi	r30, 0x26	; 38
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	81 60       	ori	r24, 0x01	; 1
     c24:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADPS1);
     c26:	a6 e2       	ldi	r26, 0x26	; 38
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e6 e2       	ldi	r30, 0x26	; 38
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	82 60       	ori	r24, 0x02	; 2
     c32:	8c 93       	st	X, r24
	ADCSRA &=~(1<<ADPS2);
     c34:	a6 e2       	ldi	r26, 0x26	; 38
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e6 e2       	ldi	r30, 0x26	; 38
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	8b 7f       	andi	r24, 0xFB	; 251
     c40:	8c 93       	st	X, r24
     c42:	57 c0       	rjmp	.+174    	; 0xcf2 <AD_Init+0x1ac>
	break;
   case 16:
	ADCSRA &=~(1<<ADPS0);
     c44:	a6 e2       	ldi	r26, 0x26	; 38
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	e6 e2       	ldi	r30, 0x26	; 38
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	8e 7f       	andi	r24, 0xFE	; 254
     c50:	8c 93       	st	X, r24
	ADCSRA &=~(1<<ADPS1);
     c52:	a6 e2       	ldi	r26, 0x26	; 38
     c54:	b0 e0       	ldi	r27, 0x00	; 0
     c56:	e6 e2       	ldi	r30, 0x26	; 38
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
     c5c:	8d 7f       	andi	r24, 0xFD	; 253
     c5e:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADPS2);
     c60:	a6 e2       	ldi	r26, 0x26	; 38
     c62:	b0 e0       	ldi	r27, 0x00	; 0
     c64:	e6 e2       	ldi	r30, 0x26	; 38
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	80 81       	ld	r24, Z
     c6a:	84 60       	ori	r24, 0x04	; 4
     c6c:	8c 93       	st	X, r24
     c6e:	41 c0       	rjmp	.+130    	; 0xcf2 <AD_Init+0x1ac>
	break;
   case 32:
	ADCSRA |= (1<<ADPS0);
     c70:	a6 e2       	ldi	r26, 0x26	; 38
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	e6 e2       	ldi	r30, 0x26	; 38
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	81 60       	ori	r24, 0x01	; 1
     c7c:	8c 93       	st	X, r24
	ADCSRA &=~(1<<ADPS1);
     c7e:	a6 e2       	ldi	r26, 0x26	; 38
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	e6 e2       	ldi	r30, 0x26	; 38
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z
     c88:	8d 7f       	andi	r24, 0xFD	; 253
     c8a:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADPS2);
     c8c:	a6 e2       	ldi	r26, 0x26	; 38
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e6 e2       	ldi	r30, 0x26	; 38
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	84 60       	ori	r24, 0x04	; 4
     c98:	8c 93       	st	X, r24
     c9a:	2b c0       	rjmp	.+86     	; 0xcf2 <AD_Init+0x1ac>
	break;
   case 64:
	ADCSRA &=~(1<<ADPS0);
     c9c:	a6 e2       	ldi	r26, 0x26	; 38
     c9e:	b0 e0       	ldi	r27, 0x00	; 0
     ca0:	e6 e2       	ldi	r30, 0x26	; 38
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 81       	ld	r24, Z
     ca6:	8e 7f       	andi	r24, 0xFE	; 254
     ca8:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADPS1);
     caa:	a6 e2       	ldi	r26, 0x26	; 38
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	e6 e2       	ldi	r30, 0x26	; 38
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	82 60       	ori	r24, 0x02	; 2
     cb6:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADPS2);
     cb8:	a6 e2       	ldi	r26, 0x26	; 38
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e6 e2       	ldi	r30, 0x26	; 38
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	84 60       	ori	r24, 0x04	; 4
     cc4:	8c 93       	st	X, r24
     cc6:	15 c0       	rjmp	.+42     	; 0xcf2 <AD_Init+0x1ac>
	break;
   case 128:
	ADCSRA |= (1<<ADPS0);
     cc8:	a6 e2       	ldi	r26, 0x26	; 38
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	e6 e2       	ldi	r30, 0x26	; 38
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	81 60       	ori	r24, 0x01	; 1
     cd4:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADPS1);
     cd6:	a6 e2       	ldi	r26, 0x26	; 38
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e6 e2       	ldi	r30, 0x26	; 38
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 81       	ld	r24, Z
     ce0:	82 60       	ori	r24, 0x02	; 2
     ce2:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADPS2);
     ce4:	a6 e2       	ldi	r26, 0x26	; 38
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e6 e2       	ldi	r30, 0x26	; 38
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	84 60       	ori	r24, 0x04	; 4
     cf0:	8c 93       	st	X, r24
	break;
}
switch(Vref)
     cf2:	89 81       	ldd	r24, Y+1	; 0x01
     cf4:	28 2f       	mov	r18, r24
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	3c 83       	std	Y+4, r19	; 0x04
     cfa:	2b 83       	std	Y+3, r18	; 0x03
     cfc:	8b 81       	ldd	r24, Y+3	; 0x03
     cfe:	9c 81       	ldd	r25, Y+4	; 0x04
     d00:	81 30       	cpi	r24, 0x01	; 1
     d02:	91 05       	cpc	r25, r1
     d04:	51 f0       	breq	.+20     	; 0xd1a <AD_Init+0x1d4>
     d06:	2b 81       	ldd	r18, Y+3	; 0x03
     d08:	3c 81       	ldd	r19, Y+4	; 0x04
     d0a:	22 30       	cpi	r18, 0x02	; 2
     d0c:	31 05       	cpc	r19, r1
     d0e:	19 f1       	breq	.+70     	; 0xd56 <AD_Init+0x210>
     d10:	8b 81       	ldd	r24, Y+3	; 0x03
     d12:	9c 81       	ldd	r25, Y+4	; 0x04
     d14:	00 97       	sbiw	r24, 0x00	; 0
     d16:	81 f0       	breq	.+32     	; 0xd38 <AD_Init+0x1f2>
     d18:	2c c0       	rjmp	.+88     	; 0xd72 <AD_Init+0x22c>
{
   case VREF :
	   ADMUX &=~(1<<REFS0);
     d1a:	a7 e2       	ldi	r26, 0x27	; 39
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	e7 e2       	ldi	r30, 0x27	; 39
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	8f 7b       	andi	r24, 0xBF	; 191
     d26:	8c 93       	st	X, r24
	   ADMUX &=~(1<<REFS1);
     d28:	a7 e2       	ldi	r26, 0x27	; 39
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	e7 e2       	ldi	r30, 0x27	; 39
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	8f 77       	andi	r24, 0x7F	; 127
     d34:	8c 93       	st	X, r24
     d36:	1d c0       	rjmp	.+58     	; 0xd72 <AD_Init+0x22c>
	   break;
   case AVCC :
 	   ADMUX |= (1<<REFS0);
     d38:	a7 e2       	ldi	r26, 0x27	; 39
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	e7 e2       	ldi	r30, 0x27	; 39
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	80 64       	ori	r24, 0x40	; 64
     d44:	8c 93       	st	X, r24
 	   ADMUX &=~(1<<REFS1);
     d46:	a7 e2       	ldi	r26, 0x27	; 39
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e7 e2       	ldi	r30, 0x27	; 39
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	8f 77       	andi	r24, 0x7F	; 127
     d52:	8c 93       	st	X, r24
     d54:	0e c0       	rjmp	.+28     	; 0xd72 <AD_Init+0x22c>
 	   break;
   case INTV :
	   ADMUX |= (1<<REFS0);
     d56:	a7 e2       	ldi	r26, 0x27	; 39
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	e7 e2       	ldi	r30, 0x27	; 39
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	80 64       	ori	r24, 0x40	; 64
     d62:	8c 93       	st	X, r24
	   ADMUX |= (1<<REFS1);
     d64:	a7 e2       	ldi	r26, 0x27	; 39
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	e7 e2       	ldi	r30, 0x27	; 39
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	80 68       	ori	r24, 0x80	; 128
     d70:	8c 93       	st	X, r24
 	   break;
}

   ADCSRA |= (1<<ADEN);
     d72:	a6 e2       	ldi	r26, 0x26	; 38
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	e6 e2       	ldi	r30, 0x26	; 38
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	80 68       	ori	r24, 0x80	; 128
     d7e:	8c 93       	st	X, r24
}
     d80:	26 96       	adiw	r28, 0x06	; 6
     d82:	0f b6       	in	r0, 0x3f	; 63
     d84:	f8 94       	cli
     d86:	de bf       	out	0x3e, r29	; 62
     d88:	0f be       	out	0x3f, r0	; 63
     d8a:	cd bf       	out	0x3d, r28	; 61
     d8c:	cf 91       	pop	r28
     d8e:	df 91       	pop	r29
     d90:	08 95       	ret

00000d92 <AD_Start_Conversion>:
void AD_Start_Conversion()
{
     d92:	df 93       	push	r29
     d94:	cf 93       	push	r28
     d96:	cd b7       	in	r28, 0x3d	; 61
     d98:	de b7       	in	r29, 0x3e	; 62
	ADCSRA |= (1<<ADSC);
     d9a:	a6 e2       	ldi	r26, 0x26	; 38
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	e6 e2       	ldi	r30, 0x26	; 38
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	80 64       	ori	r24, 0x40	; 64
     da6:	8c 93       	st	X, r24
}
     da8:	cf 91       	pop	r28
     daa:	df 91       	pop	r29
     dac:	08 95       	ret

00000dae <Auto_Trigger_Enable>:
void Auto_Trigger_Enable(u8 Mode)
{
     dae:	df 93       	push	r29
     db0:	cf 93       	push	r28
     db2:	0f 92       	push	r0
     db4:	cd b7       	in	r28, 0x3d	; 61
     db6:	de b7       	in	r29, 0x3e	; 62
     db8:	89 83       	std	Y+1, r24	; 0x01
	if(Mode<=7)
     dba:	89 81       	ldd	r24, Y+1	; 0x01
     dbc:	88 30       	cpi	r24, 0x08	; 8
     dbe:	d0 f4       	brcc	.+52     	; 0xdf4 <Auto_Trigger_Enable+0x46>
	{
	SFIOR &= 0x1F;
     dc0:	a0 e5       	ldi	r26, 0x50	; 80
     dc2:	b0 e0       	ldi	r27, 0x00	; 0
     dc4:	e0 e5       	ldi	r30, 0x50	; 80
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	80 81       	ld	r24, Z
     dca:	8f 71       	andi	r24, 0x1F	; 31
     dcc:	8c 93       	st	X, r24
	SFIOR |= (Mode<<5);
     dce:	a0 e5       	ldi	r26, 0x50	; 80
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	e0 e5       	ldi	r30, 0x50	; 80
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	28 2f       	mov	r18, r24
     dda:	89 81       	ldd	r24, Y+1	; 0x01
     ddc:	88 2f       	mov	r24, r24
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	88 0f       	add	r24, r24
     de2:	99 1f       	adc	r25, r25
     de4:	82 95       	swap	r24
     de6:	92 95       	swap	r25
     de8:	90 7f       	andi	r25, 0xF0	; 240
     dea:	98 27       	eor	r25, r24
     dec:	80 7f       	andi	r24, 0xF0	; 240
     dee:	98 27       	eor	r25, r24
     df0:	82 2b       	or	r24, r18
     df2:	8c 93       	st	X, r24
	}
	ADCSRA |= (1<<ADATE);
     df4:	a6 e2       	ldi	r26, 0x26	; 38
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	e6 e2       	ldi	r30, 0x26	; 38
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	80 62       	ori	r24, 0x20	; 32
     e00:	8c 93       	st	X, r24
}
     e02:	0f 90       	pop	r0
     e04:	cf 91       	pop	r28
     e06:	df 91       	pop	r29
     e08:	08 95       	ret

00000e0a <Analog_Select_Channel>:
void Analog_Select_Channel(u8 Channel)
{
     e0a:	df 93       	push	r29
     e0c:	cf 93       	push	r28
     e0e:	0f 92       	push	r0
     e10:	cd b7       	in	r28, 0x3d	; 61
     e12:	de b7       	in	r29, 0x3e	; 62
     e14:	89 83       	std	Y+1, r24	; 0x01
	if (Channel<=31)
     e16:	89 81       	ldd	r24, Y+1	; 0x01
     e18:	80 32       	cpi	r24, 0x20	; 32
     e1a:	78 f4       	brcc	.+30     	; 0xe3a <Analog_Select_Channel+0x30>
	{
		ADMUX &=~0x1F;
     e1c:	a7 e2       	ldi	r26, 0x27	; 39
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	e7 e2       	ldi	r30, 0x27	; 39
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	80 7e       	andi	r24, 0xE0	; 224
     e28:	8c 93       	st	X, r24
		ADMUX |= Channel;
     e2a:	a7 e2       	ldi	r26, 0x27	; 39
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e7 e2       	ldi	r30, 0x27	; 39
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	90 81       	ld	r25, Z
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	89 2b       	or	r24, r25
     e38:	8c 93       	st	X, r24
	}

}
     e3a:	0f 90       	pop	r0
     e3c:	cf 91       	pop	r28
     e3e:	df 91       	pop	r29
     e40:	08 95       	ret

00000e42 <AD_Read_High>:
u8 AD_Read_High(u8 Direction)
{
     e42:	df 93       	push	r29
     e44:	cf 93       	push	r28
     e46:	00 d0       	rcall	.+0      	; 0xe48 <AD_Read_High+0x6>
     e48:	00 d0       	rcall	.+0      	; 0xe4a <AD_Read_High+0x8>
     e4a:	cd b7       	in	r28, 0x3d	; 61
     e4c:	de b7       	in	r29, 0x3e	; 62
     e4e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Reading;
 switch(Direction)
     e50:	8a 81       	ldd	r24, Y+2	; 0x02
     e52:	28 2f       	mov	r18, r24
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	3c 83       	std	Y+4, r19	; 0x04
     e58:	2b 83       	std	Y+3, r18	; 0x03
     e5a:	8b 81       	ldd	r24, Y+3	; 0x03
     e5c:	9c 81       	ldd	r25, Y+4	; 0x04
     e5e:	00 97       	sbiw	r24, 0x00	; 0
     e60:	f1 f0       	breq	.+60     	; 0xe9e <AD_Read_High+0x5c>
     e62:	2b 81       	ldd	r18, Y+3	; 0x03
     e64:	3c 81       	ldd	r19, Y+4	; 0x04
     e66:	21 30       	cpi	r18, 0x01	; 1
     e68:	31 05       	cpc	r19, r1
     e6a:	21 f5       	brne	.+72     	; 0xeb4 <AD_Read_High+0x72>
   {
 case RIGHT_READING:
	 Reading =(ADCL>>2);
     e6c:	e4 e2       	ldi	r30, 0x24	; 36
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	86 95       	lsr	r24
     e74:	86 95       	lsr	r24
     e76:	89 83       	std	Y+1, r24	; 0x01
	 Reading|=(ADCH<<6);
     e78:	e5 e2       	ldi	r30, 0x25	; 37
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	88 2f       	mov	r24, r24
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	00 24       	eor	r0, r0
     e84:	96 95       	lsr	r25
     e86:	87 95       	ror	r24
     e88:	07 94       	ror	r0
     e8a:	96 95       	lsr	r25
     e8c:	87 95       	ror	r24
     e8e:	07 94       	ror	r0
     e90:	98 2f       	mov	r25, r24
     e92:	80 2d       	mov	r24, r0
     e94:	98 2f       	mov	r25, r24
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	89 2b       	or	r24, r25
     e9a:	89 83       	std	Y+1, r24	; 0x01
     e9c:	0b c0       	rjmp	.+22     	; 0xeb4 <AD_Read_High+0x72>
	 break;
 case LEFT_READING:
	 ADMUX |=(1<<ADLAR);
     e9e:	a7 e2       	ldi	r26, 0x27	; 39
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	e7 e2       	ldi	r30, 0x27	; 39
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	80 62       	ori	r24, 0x20	; 32
     eaa:	8c 93       	st	X, r24
	 Reading=ADCH;
     eac:	e5 e2       	ldi	r30, 0x25	; 37
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	89 83       	std	Y+1, r24	; 0x01
	 break;
 default:
	  break;
   }
 return Reading;
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
}
     eb6:	0f 90       	pop	r0
     eb8:	0f 90       	pop	r0
     eba:	0f 90       	pop	r0
     ebc:	0f 90       	pop	r0
     ebe:	cf 91       	pop	r28
     ec0:	df 91       	pop	r29
     ec2:	08 95       	ret

00000ec4 <ADC_Polling>:
void ADC_Polling()
{
     ec4:	df 93       	push	r29
     ec6:	cf 93       	push	r28
     ec8:	cd b7       	in	r28, 0x3d	; 61
     eca:	de b7       	in	r29, 0x3e	; 62
	while (!(ADCSRA<<4)&1);
     ecc:	e6 e2       	ldi	r30, 0x26	; 38
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	88 2f       	mov	r24, r24
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	82 95       	swap	r24
     ed8:	92 95       	swap	r25
     eda:	90 7f       	andi	r25, 0xF0	; 240
     edc:	98 27       	eor	r25, r24
     ede:	80 7f       	andi	r24, 0xF0	; 240
     ee0:	98 27       	eor	r25, r24
     ee2:	00 97       	sbiw	r24, 0x00	; 0
     ee4:	99 f3       	breq	.-26     	; 0xecc <ADC_Polling+0x8>
		  ADCSRA |=(1<<4);
     ee6:	a6 e2       	ldi	r26, 0x26	; 38
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	e6 e2       	ldi	r30, 0x26	; 38
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	80 61       	ori	r24, 0x10	; 16
     ef2:	8c 93       	st	X, r24
}
     ef4:	cf 91       	pop	r28
     ef6:	df 91       	pop	r29
     ef8:	08 95       	ret

00000efa <ADC_IE>:
void ADC_IE()
{
     efa:	df 93       	push	r29
     efc:	cf 93       	push	r28
     efe:	cd b7       	in	r28, 0x3d	; 61
     f00:	de b7       	in	r29, 0x3e	; 62
	ADCSRA |=(1<<ADIE);
     f02:	a6 e2       	ldi	r26, 0x26	; 38
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	e6 e2       	ldi	r30, 0x26	; 38
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	88 60       	ori	r24, 0x08	; 8
     f0e:	8c 93       	st	X, r24
}
     f10:	cf 91       	pop	r28
     f12:	df 91       	pop	r29
     f14:	08 95       	ret

00000f16 <DIO_enuInit>:
#include "AVR_REG.h"
#include "DIO_config.h"


ES_t DIO_enuInit(void)
{
     f16:	df 93       	push	r29
     f18:	cf 93       	push	r28
     f1a:	0f 92       	push	r0
     f1c:	cd b7       	in	r28, 0x3d	; 61
     f1e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
     f20:	19 82       	std	Y+1, r1	; 0x01

	DDRA=CONC(DIO_u8PA7_DIR,DIO_u8PA6_DIR,DIO_u8PA5_DIR,DIO_u8PA4_DIR,DIO_u8PA3_DIR,DIO_u8PA2_DIR,DIO_u8PA1_DIR,DIO_u8PA0_DIR);
     f22:	ea e3       	ldi	r30, 0x3A	; 58
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	81 eb       	ldi	r24, 0xB1	; 177
     f28:	80 83       	st	Z, r24

	PORTA=CONC(DIO_u8PA7_VALUE,DIO_u8PA6_VALUE,DIO_u8PA5_VALUE,DIO_u8PA4_VALUE,DIO_u8PA3_VALUE,DIO_u8PA2_VALUE,DIO_u8PA1_VALUE,DIO_u8PA0_VALUE);
     f2a:	eb e3       	ldi	r30, 0x3B	; 59
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	86 e1       	ldi	r24, 0x16	; 22
     f30:	80 83       	st	Z, r24

	return Local_enuErrorState;
     f32:	89 81       	ldd	r24, Y+1	; 0x01
}
     f34:	0f 90       	pop	r0
     f36:	cf 91       	pop	r28
     f38:	df 91       	pop	r29
     f3a:	08 95       	ret

00000f3c <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8Direction)
{
     f3c:	df 93       	push	r29
     f3e:	cf 93       	push	r28
     f40:	00 d0       	rcall	.+0      	; 0xf42 <DIO_enuSetPinDirection+0x6>
     f42:	00 d0       	rcall	.+0      	; 0xf44 <DIO_enuSetPinDirection+0x8>
     f44:	00 d0       	rcall	.+0      	; 0xf46 <DIO_enuSetPinDirection+0xa>
     f46:	cd b7       	in	r28, 0x3d	; 61
     f48:	de b7       	in	r29, 0x3e	; 62
     f4a:	8a 83       	std	Y+2, r24	; 0x02
     f4c:	6b 83       	std	Y+3, r22	; 0x03
     f4e:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
     f50:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_u8GROUP_D
     f52:	8a 81       	ldd	r24, Y+2	; 0x02
     f54:	84 30       	cpi	r24, 0x04	; 4
     f56:	08 f0       	brcs	.+2      	; 0xf5a <DIO_enuSetPinDirection+0x1e>
     f58:	d1 c0       	rjmp	.+418    	; 0x10fc <DIO_enuSetPinDirection+0x1c0>
     f5a:	8b 81       	ldd	r24, Y+3	; 0x03
     f5c:	88 30       	cpi	r24, 0x08	; 8
     f5e:	08 f0       	brcs	.+2      	; 0xf62 <DIO_enuSetPinDirection+0x26>
     f60:	cd c0       	rjmp	.+410    	; 0x10fc <DIO_enuSetPinDirection+0x1c0>
     f62:	8c 81       	ldd	r24, Y+4	; 0x04
     f64:	82 30       	cpi	r24, 0x02	; 2
     f66:	08 f0       	brcs	.+2      	; 0xf6a <DIO_enuSetPinDirection+0x2e>
     f68:	c9 c0       	rjmp	.+402    	; 0x10fc <DIO_enuSetPinDirection+0x1c0>
			&& Copy_u8PinID <= DIO_u8PIN7
			&& Copy_u8Direction <= DIO_u8OUTPUT)
	{
		switch (Copy_u8PortID)
     f6a:	8a 81       	ldd	r24, Y+2	; 0x02
     f6c:	28 2f       	mov	r18, r24
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	3e 83       	std	Y+6, r19	; 0x06
     f72:	2d 83       	std	Y+5, r18	; 0x05
     f74:	6d 81       	ldd	r22, Y+5	; 0x05
     f76:	7e 81       	ldd	r23, Y+6	; 0x06
     f78:	61 30       	cpi	r22, 0x01	; 1
     f7a:	71 05       	cpc	r23, r1
     f7c:	09 f4       	brne	.+2      	; 0xf80 <DIO_enuSetPinDirection+0x44>
     f7e:	41 c0       	rjmp	.+130    	; 0x1002 <DIO_enuSetPinDirection+0xc6>
     f80:	8d 81       	ldd	r24, Y+5	; 0x05
     f82:	9e 81       	ldd	r25, Y+6	; 0x06
     f84:	82 30       	cpi	r24, 0x02	; 2
     f86:	91 05       	cpc	r25, r1
     f88:	34 f4       	brge	.+12     	; 0xf96 <DIO_enuSetPinDirection+0x5a>
     f8a:	2d 81       	ldd	r18, Y+5	; 0x05
     f8c:	3e 81       	ldd	r19, Y+6	; 0x06
     f8e:	21 15       	cp	r18, r1
     f90:	31 05       	cpc	r19, r1
     f92:	71 f0       	breq	.+28     	; 0xfb0 <DIO_enuSetPinDirection+0x74>
     f94:	b0 c0       	rjmp	.+352    	; 0x10f6 <DIO_enuSetPinDirection+0x1ba>
     f96:	6d 81       	ldd	r22, Y+5	; 0x05
     f98:	7e 81       	ldd	r23, Y+6	; 0x06
     f9a:	62 30       	cpi	r22, 0x02	; 2
     f9c:	71 05       	cpc	r23, r1
     f9e:	09 f4       	brne	.+2      	; 0xfa2 <DIO_enuSetPinDirection+0x66>
     fa0:	59 c0       	rjmp	.+178    	; 0x1054 <DIO_enuSetPinDirection+0x118>
     fa2:	8d 81       	ldd	r24, Y+5	; 0x05
     fa4:	9e 81       	ldd	r25, Y+6	; 0x06
     fa6:	83 30       	cpi	r24, 0x03	; 3
     fa8:	91 05       	cpc	r25, r1
     faa:	09 f4       	brne	.+2      	; 0xfae <DIO_enuSetPinDirection+0x72>
     fac:	7c c0       	rjmp	.+248    	; 0x10a6 <DIO_enuSetPinDirection+0x16a>
     fae:	a3 c0       	rjmp	.+326    	; 0x10f6 <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_u8GROUP_A:

			DDRA &=~(DIO_MASK_BIT<<Copy_u8PinID);
     fb0:	aa e3       	ldi	r26, 0x3A	; 58
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	ea e3       	ldi	r30, 0x3A	; 58
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	48 2f       	mov	r20, r24
     fbc:	8b 81       	ldd	r24, Y+3	; 0x03
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <DIO_enuSetPinDirection+0x90>
     fc8:	88 0f       	add	r24, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	2a 95       	dec	r18
     fce:	e2 f7       	brpl	.-8      	; 0xfc8 <DIO_enuSetPinDirection+0x8c>
     fd0:	80 95       	com	r24
     fd2:	84 23       	and	r24, r20
     fd4:	8c 93       	st	X, r24
			DDRA |= (Copy_u8Direction<<Copy_u8PinID);
     fd6:	aa e3       	ldi	r26, 0x3A	; 58
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	ea e3       	ldi	r30, 0x3A	; 58
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	48 2f       	mov	r20, r24
     fe2:	8c 81       	ldd	r24, Y+4	; 0x04
     fe4:	28 2f       	mov	r18, r24
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	8b 81       	ldd	r24, Y+3	; 0x03
     fea:	88 2f       	mov	r24, r24
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	b9 01       	movw	r22, r18
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <DIO_enuSetPinDirection+0xba>
     ff2:	66 0f       	add	r22, r22
     ff4:	77 1f       	adc	r23, r23
     ff6:	8a 95       	dec	r24
     ff8:	e2 f7       	brpl	.-8      	; 0xff2 <DIO_enuSetPinDirection+0xb6>
     ffa:	cb 01       	movw	r24, r22
     ffc:	84 2b       	or	r24, r20
     ffe:	8c 93       	st	X, r24
    1000:	7a c0       	rjmp	.+244    	; 0x10f6 <DIO_enuSetPinDirection+0x1ba>

			break;
		case DIO_u8GROUP_B:

			DDRB &=~(DIO_MASK_BIT<<Copy_u8PinID);
    1002:	a7 e3       	ldi	r26, 0x37	; 55
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	e7 e3       	ldi	r30, 0x37	; 55
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	48 2f       	mov	r20, r24
    100e:	8b 81       	ldd	r24, Y+3	; 0x03
    1010:	28 2f       	mov	r18, r24
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	02 c0       	rjmp	.+4      	; 0x101e <DIO_enuSetPinDirection+0xe2>
    101a:	88 0f       	add	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	2a 95       	dec	r18
    1020:	e2 f7       	brpl	.-8      	; 0x101a <DIO_enuSetPinDirection+0xde>
    1022:	80 95       	com	r24
    1024:	84 23       	and	r24, r20
    1026:	8c 93       	st	X, r24
			DDRB |= (Copy_u8Direction<<Copy_u8PinID);
    1028:	a7 e3       	ldi	r26, 0x37	; 55
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	e7 e3       	ldi	r30, 0x37	; 55
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	48 2f       	mov	r20, r24
    1034:	8c 81       	ldd	r24, Y+4	; 0x04
    1036:	28 2f       	mov	r18, r24
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
    103c:	88 2f       	mov	r24, r24
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	b9 01       	movw	r22, r18
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <DIO_enuSetPinDirection+0x10c>
    1044:	66 0f       	add	r22, r22
    1046:	77 1f       	adc	r23, r23
    1048:	8a 95       	dec	r24
    104a:	e2 f7       	brpl	.-8      	; 0x1044 <DIO_enuSetPinDirection+0x108>
    104c:	cb 01       	movw	r24, r22
    104e:	84 2b       	or	r24, r20
    1050:	8c 93       	st	X, r24
    1052:	51 c0       	rjmp	.+162    	; 0x10f6 <DIO_enuSetPinDirection+0x1ba>

			break;
		case DIO_u8GROUP_C:

			DDRC &=~(DIO_MASK_BIT<<Copy_u8PinID);
    1054:	a4 e3       	ldi	r26, 0x34	; 52
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	e4 e3       	ldi	r30, 0x34	; 52
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	48 2f       	mov	r20, r24
    1060:	8b 81       	ldd	r24, Y+3	; 0x03
    1062:	28 2f       	mov	r18, r24
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <DIO_enuSetPinDirection+0x134>
    106c:	88 0f       	add	r24, r24
    106e:	99 1f       	adc	r25, r25
    1070:	2a 95       	dec	r18
    1072:	e2 f7       	brpl	.-8      	; 0x106c <DIO_enuSetPinDirection+0x130>
    1074:	80 95       	com	r24
    1076:	84 23       	and	r24, r20
    1078:	8c 93       	st	X, r24
			DDRC |= (Copy_u8Direction<<Copy_u8PinID);
    107a:	a4 e3       	ldi	r26, 0x34	; 52
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	e4 e3       	ldi	r30, 0x34	; 52
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	48 2f       	mov	r20, r24
    1086:	8c 81       	ldd	r24, Y+4	; 0x04
    1088:	28 2f       	mov	r18, r24
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	8b 81       	ldd	r24, Y+3	; 0x03
    108e:	88 2f       	mov	r24, r24
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	b9 01       	movw	r22, r18
    1094:	02 c0       	rjmp	.+4      	; 0x109a <DIO_enuSetPinDirection+0x15e>
    1096:	66 0f       	add	r22, r22
    1098:	77 1f       	adc	r23, r23
    109a:	8a 95       	dec	r24
    109c:	e2 f7       	brpl	.-8      	; 0x1096 <DIO_enuSetPinDirection+0x15a>
    109e:	cb 01       	movw	r24, r22
    10a0:	84 2b       	or	r24, r20
    10a2:	8c 93       	st	X, r24
    10a4:	28 c0       	rjmp	.+80     	; 0x10f6 <DIO_enuSetPinDirection+0x1ba>

			break;
		case DIO_u8GROUP_D:

			DDRD &=~(DIO_MASK_BIT<<Copy_u8PinID);
    10a6:	a1 e3       	ldi	r26, 0x31	; 49
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e1 e3       	ldi	r30, 0x31	; 49
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	48 2f       	mov	r20, r24
    10b2:	8b 81       	ldd	r24, Y+3	; 0x03
    10b4:	28 2f       	mov	r18, r24
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <DIO_enuSetPinDirection+0x186>
    10be:	88 0f       	add	r24, r24
    10c0:	99 1f       	adc	r25, r25
    10c2:	2a 95       	dec	r18
    10c4:	e2 f7       	brpl	.-8      	; 0x10be <DIO_enuSetPinDirection+0x182>
    10c6:	80 95       	com	r24
    10c8:	84 23       	and	r24, r20
    10ca:	8c 93       	st	X, r24
			DDRD |= (Copy_u8Direction<<Copy_u8PinID);
    10cc:	a1 e3       	ldi	r26, 0x31	; 49
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	e1 e3       	ldi	r30, 0x31	; 49
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	48 2f       	mov	r20, r24
    10d8:	8c 81       	ldd	r24, Y+4	; 0x04
    10da:	28 2f       	mov	r18, r24
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	8b 81       	ldd	r24, Y+3	; 0x03
    10e0:	88 2f       	mov	r24, r24
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	b9 01       	movw	r22, r18
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <DIO_enuSetPinDirection+0x1b0>
    10e8:	66 0f       	add	r22, r22
    10ea:	77 1f       	adc	r23, r23
    10ec:	8a 95       	dec	r24
    10ee:	e2 f7       	brpl	.-8      	; 0x10e8 <DIO_enuSetPinDirection+0x1ac>
    10f0:	cb 01       	movw	r24, r22
    10f2:	84 2b       	or	r24, r20
    10f4:	8c 93       	st	X, r24

			break;
		}
		Local_enuErrorState = ES_OK;
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	89 83       	std	Y+1, r24	; 0x01
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    10fc:	82 e0       	ldi	r24, 0x02	; 2
    10fe:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1100:	89 81       	ldd	r24, Y+1	; 0x01
}
    1102:	26 96       	adiw	r28, 0x06	; 6
    1104:	0f b6       	in	r0, 0x3f	; 63
    1106:	f8 94       	cli
    1108:	de bf       	out	0x3e, r29	; 62
    110a:	0f be       	out	0x3f, r0	; 63
    110c:	cd bf       	out	0x3d, r28	; 61
    110e:	cf 91       	pop	r28
    1110:	df 91       	pop	r29
    1112:	08 95       	ret

00001114 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8Value)
{
    1114:	df 93       	push	r29
    1116:	cf 93       	push	r28
    1118:	00 d0       	rcall	.+0      	; 0x111a <DIO_enuSetPinValue+0x6>
    111a:	00 d0       	rcall	.+0      	; 0x111c <DIO_enuSetPinValue+0x8>
    111c:	00 d0       	rcall	.+0      	; 0x111e <DIO_enuSetPinValue+0xa>
    111e:	cd b7       	in	r28, 0x3d	; 61
    1120:	de b7       	in	r29, 0x3e	; 62
    1122:	8a 83       	std	Y+2, r24	; 0x02
    1124:	6b 83       	std	Y+3, r22	; 0x03
    1126:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1128:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_u8GROUP_D
    112a:	8a 81       	ldd	r24, Y+2	; 0x02
    112c:	84 30       	cpi	r24, 0x04	; 4
    112e:	08 f0       	brcs	.+2      	; 0x1132 <DIO_enuSetPinValue+0x1e>
    1130:	d4 c0       	rjmp	.+424    	; 0x12da <DIO_enuSetPinValue+0x1c6>
    1132:	8b 81       	ldd	r24, Y+3	; 0x03
    1134:	88 30       	cpi	r24, 0x08	; 8
    1136:	08 f0       	brcs	.+2      	; 0x113a <DIO_enuSetPinValue+0x26>
    1138:	d0 c0       	rjmp	.+416    	; 0x12da <DIO_enuSetPinValue+0x1c6>
    113a:	8c 81       	ldd	r24, Y+4	; 0x04
    113c:	82 30       	cpi	r24, 0x02	; 2
    113e:	20 f0       	brcs	.+8      	; 0x1148 <DIO_enuSetPinValue+0x34>
    1140:	8c 81       	ldd	r24, Y+4	; 0x04
    1142:	82 30       	cpi	r24, 0x02	; 2
    1144:	08 f0       	brcs	.+2      	; 0x1148 <DIO_enuSetPinValue+0x34>
    1146:	c9 c0       	rjmp	.+402    	; 0x12da <DIO_enuSetPinValue+0x1c6>
			&& Copy_u8PinID <= DIO_u8PIN7
			&& (Copy_u8Value <= DIO_u8HIGH || Copy_u8Value <= DIO_u8PULL_UP ))
	{
		switch (Copy_u8PortID)
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	3e 83       	std	Y+6, r19	; 0x06
    1150:	2d 83       	std	Y+5, r18	; 0x05
    1152:	6d 81       	ldd	r22, Y+5	; 0x05
    1154:	7e 81       	ldd	r23, Y+6	; 0x06
    1156:	61 30       	cpi	r22, 0x01	; 1
    1158:	71 05       	cpc	r23, r1
    115a:	09 f4       	brne	.+2      	; 0x115e <DIO_enuSetPinValue+0x4a>
    115c:	41 c0       	rjmp	.+130    	; 0x11e0 <DIO_enuSetPinValue+0xcc>
    115e:	8d 81       	ldd	r24, Y+5	; 0x05
    1160:	9e 81       	ldd	r25, Y+6	; 0x06
    1162:	82 30       	cpi	r24, 0x02	; 2
    1164:	91 05       	cpc	r25, r1
    1166:	34 f4       	brge	.+12     	; 0x1174 <DIO_enuSetPinValue+0x60>
    1168:	2d 81       	ldd	r18, Y+5	; 0x05
    116a:	3e 81       	ldd	r19, Y+6	; 0x06
    116c:	21 15       	cp	r18, r1
    116e:	31 05       	cpc	r19, r1
    1170:	71 f0       	breq	.+28     	; 0x118e <DIO_enuSetPinValue+0x7a>
    1172:	b0 c0       	rjmp	.+352    	; 0x12d4 <DIO_enuSetPinValue+0x1c0>
    1174:	6d 81       	ldd	r22, Y+5	; 0x05
    1176:	7e 81       	ldd	r23, Y+6	; 0x06
    1178:	62 30       	cpi	r22, 0x02	; 2
    117a:	71 05       	cpc	r23, r1
    117c:	09 f4       	brne	.+2      	; 0x1180 <DIO_enuSetPinValue+0x6c>
    117e:	59 c0       	rjmp	.+178    	; 0x1232 <DIO_enuSetPinValue+0x11e>
    1180:	8d 81       	ldd	r24, Y+5	; 0x05
    1182:	9e 81       	ldd	r25, Y+6	; 0x06
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	91 05       	cpc	r25, r1
    1188:	09 f4       	brne	.+2      	; 0x118c <DIO_enuSetPinValue+0x78>
    118a:	7c c0       	rjmp	.+248    	; 0x1284 <DIO_enuSetPinValue+0x170>
    118c:	a3 c0       	rjmp	.+326    	; 0x12d4 <DIO_enuSetPinValue+0x1c0>
		{
		case DIO_u8GROUP_A:

			PORTA &=~(DIO_MASK_BIT<<Copy_u8PinID);
    118e:	ab e3       	ldi	r26, 0x3B	; 59
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	eb e3       	ldi	r30, 0x3B	; 59
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	48 2f       	mov	r20, r24
    119a:	8b 81       	ldd	r24, Y+3	; 0x03
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <DIO_enuSetPinValue+0x96>
    11a6:	88 0f       	add	r24, r24
    11a8:	99 1f       	adc	r25, r25
    11aa:	2a 95       	dec	r18
    11ac:	e2 f7       	brpl	.-8      	; 0x11a6 <DIO_enuSetPinValue+0x92>
    11ae:	80 95       	com	r24
    11b0:	84 23       	and	r24, r20
    11b2:	8c 93       	st	X, r24
			PORTA |= (Copy_u8Value<<Copy_u8PinID);
    11b4:	ab e3       	ldi	r26, 0x3B	; 59
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	eb e3       	ldi	r30, 0x3B	; 59
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	48 2f       	mov	r20, r24
    11c0:	8c 81       	ldd	r24, Y+4	; 0x04
    11c2:	28 2f       	mov	r18, r24
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	88 2f       	mov	r24, r24
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	b9 01       	movw	r22, r18
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <DIO_enuSetPinValue+0xc0>
    11d0:	66 0f       	add	r22, r22
    11d2:	77 1f       	adc	r23, r23
    11d4:	8a 95       	dec	r24
    11d6:	e2 f7       	brpl	.-8      	; 0x11d0 <DIO_enuSetPinValue+0xbc>
    11d8:	cb 01       	movw	r24, r22
    11da:	84 2b       	or	r24, r20
    11dc:	8c 93       	st	X, r24
    11de:	7a c0       	rjmp	.+244    	; 0x12d4 <DIO_enuSetPinValue+0x1c0>

			break;
		case DIO_u8GROUP_B:

			PORTB &=~(DIO_MASK_BIT<<Copy_u8PinID);
    11e0:	a8 e3       	ldi	r26, 0x38	; 56
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	e8 e3       	ldi	r30, 0x38	; 56
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	48 2f       	mov	r20, r24
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	02 c0       	rjmp	.+4      	; 0x11fc <DIO_enuSetPinValue+0xe8>
    11f8:	88 0f       	add	r24, r24
    11fa:	99 1f       	adc	r25, r25
    11fc:	2a 95       	dec	r18
    11fe:	e2 f7       	brpl	.-8      	; 0x11f8 <DIO_enuSetPinValue+0xe4>
    1200:	80 95       	com	r24
    1202:	84 23       	and	r24, r20
    1204:	8c 93       	st	X, r24
			PORTB |= (Copy_u8Value<<Copy_u8PinID);
    1206:	a8 e3       	ldi	r26, 0x38	; 56
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	e8 e3       	ldi	r30, 0x38	; 56
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	48 2f       	mov	r20, r24
    1212:	8c 81       	ldd	r24, Y+4	; 0x04
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	88 2f       	mov	r24, r24
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	b9 01       	movw	r22, r18
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <DIO_enuSetPinValue+0x112>
    1222:	66 0f       	add	r22, r22
    1224:	77 1f       	adc	r23, r23
    1226:	8a 95       	dec	r24
    1228:	e2 f7       	brpl	.-8      	; 0x1222 <DIO_enuSetPinValue+0x10e>
    122a:	cb 01       	movw	r24, r22
    122c:	84 2b       	or	r24, r20
    122e:	8c 93       	st	X, r24
    1230:	51 c0       	rjmp	.+162    	; 0x12d4 <DIO_enuSetPinValue+0x1c0>

			break;
		case DIO_u8GROUP_C:

			PORTC &=~(DIO_MASK_BIT<<Copy_u8PinID);
    1232:	a5 e3       	ldi	r26, 0x35	; 53
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	e5 e3       	ldi	r30, 0x35	; 53
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	48 2f       	mov	r20, r24
    123e:	8b 81       	ldd	r24, Y+3	; 0x03
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	02 c0       	rjmp	.+4      	; 0x124e <DIO_enuSetPinValue+0x13a>
    124a:	88 0f       	add	r24, r24
    124c:	99 1f       	adc	r25, r25
    124e:	2a 95       	dec	r18
    1250:	e2 f7       	brpl	.-8      	; 0x124a <DIO_enuSetPinValue+0x136>
    1252:	80 95       	com	r24
    1254:	84 23       	and	r24, r20
    1256:	8c 93       	st	X, r24
			PORTC |= (Copy_u8Value<<Copy_u8PinID);
    1258:	a5 e3       	ldi	r26, 0x35	; 53
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	e5 e3       	ldi	r30, 0x35	; 53
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	48 2f       	mov	r20, r24
    1264:	8c 81       	ldd	r24, Y+4	; 0x04
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	8b 81       	ldd	r24, Y+3	; 0x03
    126c:	88 2f       	mov	r24, r24
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	b9 01       	movw	r22, r18
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <DIO_enuSetPinValue+0x164>
    1274:	66 0f       	add	r22, r22
    1276:	77 1f       	adc	r23, r23
    1278:	8a 95       	dec	r24
    127a:	e2 f7       	brpl	.-8      	; 0x1274 <DIO_enuSetPinValue+0x160>
    127c:	cb 01       	movw	r24, r22
    127e:	84 2b       	or	r24, r20
    1280:	8c 93       	st	X, r24
    1282:	28 c0       	rjmp	.+80     	; 0x12d4 <DIO_enuSetPinValue+0x1c0>

			break;
		case DIO_u8GROUP_D:

			PORTD &=~(DIO_MASK_BIT<<Copy_u8PinID);
    1284:	a2 e3       	ldi	r26, 0x32	; 50
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	e2 e3       	ldi	r30, 0x32	; 50
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	48 2f       	mov	r20, r24
    1290:	8b 81       	ldd	r24, Y+3	; 0x03
    1292:	28 2f       	mov	r18, r24
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	02 c0       	rjmp	.+4      	; 0x12a0 <DIO_enuSetPinValue+0x18c>
    129c:	88 0f       	add	r24, r24
    129e:	99 1f       	adc	r25, r25
    12a0:	2a 95       	dec	r18
    12a2:	e2 f7       	brpl	.-8      	; 0x129c <DIO_enuSetPinValue+0x188>
    12a4:	80 95       	com	r24
    12a6:	84 23       	and	r24, r20
    12a8:	8c 93       	st	X, r24
			PORTD |= (Copy_u8Value<<Copy_u8PinID);
    12aa:	a2 e3       	ldi	r26, 0x32	; 50
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	e2 e3       	ldi	r30, 0x32	; 50
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	48 2f       	mov	r20, r24
    12b6:	8c 81       	ldd	r24, Y+4	; 0x04
    12b8:	28 2f       	mov	r18, r24
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	8b 81       	ldd	r24, Y+3	; 0x03
    12be:	88 2f       	mov	r24, r24
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	b9 01       	movw	r22, r18
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <DIO_enuSetPinValue+0x1b6>
    12c6:	66 0f       	add	r22, r22
    12c8:	77 1f       	adc	r23, r23
    12ca:	8a 95       	dec	r24
    12cc:	e2 f7       	brpl	.-8      	; 0x12c6 <DIO_enuSetPinValue+0x1b2>
    12ce:	cb 01       	movw	r24, r22
    12d0:	84 2b       	or	r24, r20
    12d2:	8c 93       	st	X, r24

			break;
		}
		Local_enuErrorState = ES_OK;
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	89 83       	std	Y+1, r24	; 0x01
    12d8:	02 c0       	rjmp	.+4      	; 0x12de <DIO_enuSetPinValue+0x1ca>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    12da:	82 e0       	ldi	r24, 0x02	; 2
    12dc:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    12de:	89 81       	ldd	r24, Y+1	; 0x01
}
    12e0:	26 96       	adiw	r28, 0x06	; 6
    12e2:	0f b6       	in	r0, 0x3f	; 63
    12e4:	f8 94       	cli
    12e6:	de bf       	out	0x3e, r29	; 62
    12e8:	0f be       	out	0x3f, r0	; 63
    12ea:	cd bf       	out	0x3d, r28	; 61
    12ec:	cf 91       	pop	r28
    12ee:	df 91       	pop	r29
    12f0:	08 95       	ret

000012f2 <DIO_enuTogPinValue>:

ES_t DIO_enuTogPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID)
{
    12f2:	df 93       	push	r29
    12f4:	cf 93       	push	r28
    12f6:	00 d0       	rcall	.+0      	; 0x12f8 <DIO_enuTogPinValue+0x6>
    12f8:	00 d0       	rcall	.+0      	; 0x12fa <DIO_enuTogPinValue+0x8>
    12fa:	0f 92       	push	r0
    12fc:	cd b7       	in	r28, 0x3d	; 61
    12fe:	de b7       	in	r29, 0x3e	; 62
    1300:	8a 83       	std	Y+2, r24	; 0x02
    1302:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1304:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_u8GROUP_D
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	84 30       	cpi	r24, 0x04	; 4
    130a:	08 f0       	brcs	.+2      	; 0x130e <DIO_enuTogPinValue+0x1c>
    130c:	75 c0       	rjmp	.+234    	; 0x13f8 <DIO_enuTogPinValue+0x106>
    130e:	8b 81       	ldd	r24, Y+3	; 0x03
    1310:	88 30       	cpi	r24, 0x08	; 8
    1312:	08 f0       	brcs	.+2      	; 0x1316 <DIO_enuTogPinValue+0x24>
    1314:	71 c0       	rjmp	.+226    	; 0x13f8 <DIO_enuTogPinValue+0x106>
			&& Copy_u8PinID <= DIO_u8PIN7)
	{
		switch (Copy_u8PortID)
    1316:	8a 81       	ldd	r24, Y+2	; 0x02
    1318:	28 2f       	mov	r18, r24
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	3d 83       	std	Y+5, r19	; 0x05
    131e:	2c 83       	std	Y+4, r18	; 0x04
    1320:	8c 81       	ldd	r24, Y+4	; 0x04
    1322:	9d 81       	ldd	r25, Y+5	; 0x05
    1324:	81 30       	cpi	r24, 0x01	; 1
    1326:	91 05       	cpc	r25, r1
    1328:	49 f1       	breq	.+82     	; 0x137c <DIO_enuTogPinValue+0x8a>
    132a:	2c 81       	ldd	r18, Y+4	; 0x04
    132c:	3d 81       	ldd	r19, Y+5	; 0x05
    132e:	22 30       	cpi	r18, 0x02	; 2
    1330:	31 05       	cpc	r19, r1
    1332:	2c f4       	brge	.+10     	; 0x133e <DIO_enuTogPinValue+0x4c>
    1334:	8c 81       	ldd	r24, Y+4	; 0x04
    1336:	9d 81       	ldd	r25, Y+5	; 0x05
    1338:	00 97       	sbiw	r24, 0x00	; 0
    133a:	61 f0       	breq	.+24     	; 0x1354 <DIO_enuTogPinValue+0x62>
    133c:	5a c0       	rjmp	.+180    	; 0x13f2 <DIO_enuTogPinValue+0x100>
    133e:	2c 81       	ldd	r18, Y+4	; 0x04
    1340:	3d 81       	ldd	r19, Y+5	; 0x05
    1342:	22 30       	cpi	r18, 0x02	; 2
    1344:	31 05       	cpc	r19, r1
    1346:	71 f1       	breq	.+92     	; 0x13a4 <DIO_enuTogPinValue+0xb2>
    1348:	8c 81       	ldd	r24, Y+4	; 0x04
    134a:	9d 81       	ldd	r25, Y+5	; 0x05
    134c:	83 30       	cpi	r24, 0x03	; 3
    134e:	91 05       	cpc	r25, r1
    1350:	e9 f1       	breq	.+122    	; 0x13cc <DIO_enuTogPinValue+0xda>
    1352:	4f c0       	rjmp	.+158    	; 0x13f2 <DIO_enuTogPinValue+0x100>
		{
		case DIO_u8GROUP_A:

			PORTA ^= (DIO_MASK_BIT<<Copy_u8PinID);
    1354:	ab e3       	ldi	r26, 0x3B	; 59
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	eb e3       	ldi	r30, 0x3B	; 59
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	48 2f       	mov	r20, r24
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    1362:	28 2f       	mov	r18, r24
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	02 2e       	mov	r0, r18
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <DIO_enuTogPinValue+0x80>
    136e:	88 0f       	add	r24, r24
    1370:	99 1f       	adc	r25, r25
    1372:	0a 94       	dec	r0
    1374:	e2 f7       	brpl	.-8      	; 0x136e <DIO_enuTogPinValue+0x7c>
    1376:	84 27       	eor	r24, r20
    1378:	8c 93       	st	X, r24
    137a:	3b c0       	rjmp	.+118    	; 0x13f2 <DIO_enuTogPinValue+0x100>

			break;
		case DIO_u8GROUP_B:

			PORTB ^= (DIO_MASK_BIT<<Copy_u8PinID);
    137c:	a8 e3       	ldi	r26, 0x38	; 56
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	e8 e3       	ldi	r30, 0x38	; 56
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	48 2f       	mov	r20, r24
    1388:	8b 81       	ldd	r24, Y+3	; 0x03
    138a:	28 2f       	mov	r18, r24
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	02 2e       	mov	r0, r18
    1394:	02 c0       	rjmp	.+4      	; 0x139a <DIO_enuTogPinValue+0xa8>
    1396:	88 0f       	add	r24, r24
    1398:	99 1f       	adc	r25, r25
    139a:	0a 94       	dec	r0
    139c:	e2 f7       	brpl	.-8      	; 0x1396 <DIO_enuTogPinValue+0xa4>
    139e:	84 27       	eor	r24, r20
    13a0:	8c 93       	st	X, r24
    13a2:	27 c0       	rjmp	.+78     	; 0x13f2 <DIO_enuTogPinValue+0x100>

			break;
		case DIO_u8GROUP_C:

			PORTC ^= (DIO_MASK_BIT<<Copy_u8PinID);
    13a4:	a5 e3       	ldi	r26, 0x35	; 53
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	e5 e3       	ldi	r30, 0x35	; 53
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	48 2f       	mov	r20, r24
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	28 2f       	mov	r18, r24
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	02 2e       	mov	r0, r18
    13bc:	02 c0       	rjmp	.+4      	; 0x13c2 <DIO_enuTogPinValue+0xd0>
    13be:	88 0f       	add	r24, r24
    13c0:	99 1f       	adc	r25, r25
    13c2:	0a 94       	dec	r0
    13c4:	e2 f7       	brpl	.-8      	; 0x13be <DIO_enuTogPinValue+0xcc>
    13c6:	84 27       	eor	r24, r20
    13c8:	8c 93       	st	X, r24
    13ca:	13 c0       	rjmp	.+38     	; 0x13f2 <DIO_enuTogPinValue+0x100>

			break;
		case DIO_u8GROUP_D:

			PORTD ^= (DIO_MASK_BIT<<Copy_u8PinID);
    13cc:	a2 e3       	ldi	r26, 0x32	; 50
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	e2 e3       	ldi	r30, 0x32	; 50
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	48 2f       	mov	r20, r24
    13d8:	8b 81       	ldd	r24, Y+3	; 0x03
    13da:	28 2f       	mov	r18, r24
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	02 2e       	mov	r0, r18
    13e4:	02 c0       	rjmp	.+4      	; 0x13ea <DIO_enuTogPinValue+0xf8>
    13e6:	88 0f       	add	r24, r24
    13e8:	99 1f       	adc	r25, r25
    13ea:	0a 94       	dec	r0
    13ec:	e2 f7       	brpl	.-8      	; 0x13e6 <DIO_enuTogPinValue+0xf4>
    13ee:	84 27       	eor	r24, r20
    13f0:	8c 93       	st	X, r24

			break;
		}
		Local_enuErrorState = ES_OK;
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	89 83       	std	Y+1, r24	; 0x01
    13f6:	02 c0       	rjmp	.+4      	; 0x13fc <DIO_enuTogPinValue+0x10a>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    13f8:	82 e0       	ldi	r24, 0x02	; 2
    13fa:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    13fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    13fe:	0f 90       	pop	r0
    1400:	0f 90       	pop	r0
    1402:	0f 90       	pop	r0
    1404:	0f 90       	pop	r0
    1406:	0f 90       	pop	r0
    1408:	cf 91       	pop	r28
    140a:	df 91       	pop	r29
    140c:	08 95       	ret

0000140e <DIO_enuGetPinValue>:
ES_t DIO_enuGetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 * Copy_pu8Value)
{
    140e:	df 93       	push	r29
    1410:	cf 93       	push	r28
    1412:	cd b7       	in	r28, 0x3d	; 61
    1414:	de b7       	in	r29, 0x3e	; 62
    1416:	27 97       	sbiw	r28, 0x07	; 7
    1418:	0f b6       	in	r0, 0x3f	; 63
    141a:	f8 94       	cli
    141c:	de bf       	out	0x3e, r29	; 62
    141e:	0f be       	out	0x3f, r0	; 63
    1420:	cd bf       	out	0x3d, r28	; 61
    1422:	8a 83       	std	Y+2, r24	; 0x02
    1424:	6b 83       	std	Y+3, r22	; 0x03
    1426:	5d 83       	std	Y+5, r21	; 0x05
    1428:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    142a:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8Value != NULL)
    142c:	8c 81       	ldd	r24, Y+4	; 0x04
    142e:	9d 81       	ldd	r25, Y+5	; 0x05
    1430:	00 97       	sbiw	r24, 0x00	; 0
    1432:	09 f4       	brne	.+2      	; 0x1436 <DIO_enuGetPinValue+0x28>
    1434:	7e c0       	rjmp	.+252    	; 0x1532 <DIO_enuGetPinValue+0x124>
	{
		if(Copy_u8PortID <= DIO_u8GROUP_D
    1436:	8a 81       	ldd	r24, Y+2	; 0x02
    1438:	84 30       	cpi	r24, 0x04	; 4
    143a:	08 f0       	brcs	.+2      	; 0x143e <DIO_enuGetPinValue+0x30>
    143c:	77 c0       	rjmp	.+238    	; 0x152c <DIO_enuGetPinValue+0x11e>
    143e:	8b 81       	ldd	r24, Y+3	; 0x03
    1440:	88 30       	cpi	r24, 0x08	; 8
    1442:	08 f0       	brcs	.+2      	; 0x1446 <DIO_enuGetPinValue+0x38>
    1444:	73 c0       	rjmp	.+230    	; 0x152c <DIO_enuGetPinValue+0x11e>
				&& Copy_u8PinID <= DIO_u8PIN7)
		{
			switch (Copy_u8PortID)
    1446:	8a 81       	ldd	r24, Y+2	; 0x02
    1448:	28 2f       	mov	r18, r24
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	3f 83       	std	Y+7, r19	; 0x07
    144e:	2e 83       	std	Y+6, r18	; 0x06
    1450:	4e 81       	ldd	r20, Y+6	; 0x06
    1452:	5f 81       	ldd	r21, Y+7	; 0x07
    1454:	41 30       	cpi	r20, 0x01	; 1
    1456:	51 05       	cpc	r21, r1
    1458:	59 f1       	breq	.+86     	; 0x14b0 <DIO_enuGetPinValue+0xa2>
    145a:	8e 81       	ldd	r24, Y+6	; 0x06
    145c:	9f 81       	ldd	r25, Y+7	; 0x07
    145e:	82 30       	cpi	r24, 0x02	; 2
    1460:	91 05       	cpc	r25, r1
    1462:	34 f4       	brge	.+12     	; 0x1470 <DIO_enuGetPinValue+0x62>
    1464:	2e 81       	ldd	r18, Y+6	; 0x06
    1466:	3f 81       	ldd	r19, Y+7	; 0x07
    1468:	21 15       	cp	r18, r1
    146a:	31 05       	cpc	r19, r1
    146c:	69 f0       	breq	.+26     	; 0x1488 <DIO_enuGetPinValue+0x7a>
    146e:	5b c0       	rjmp	.+182    	; 0x1526 <DIO_enuGetPinValue+0x118>
    1470:	4e 81       	ldd	r20, Y+6	; 0x06
    1472:	5f 81       	ldd	r21, Y+7	; 0x07
    1474:	42 30       	cpi	r20, 0x02	; 2
    1476:	51 05       	cpc	r21, r1
    1478:	79 f1       	breq	.+94     	; 0x14d8 <DIO_enuGetPinValue+0xca>
    147a:	8e 81       	ldd	r24, Y+6	; 0x06
    147c:	9f 81       	ldd	r25, Y+7	; 0x07
    147e:	83 30       	cpi	r24, 0x03	; 3
    1480:	91 05       	cpc	r25, r1
    1482:	09 f4       	brne	.+2      	; 0x1486 <DIO_enuGetPinValue+0x78>
    1484:	3d c0       	rjmp	.+122    	; 0x1500 <DIO_enuGetPinValue+0xf2>
    1486:	4f c0       	rjmp	.+158    	; 0x1526 <DIO_enuGetPinValue+0x118>
			{
			case DIO_u8GROUP_A:

				*Copy_pu8Value = ( (PINA >> Copy_u8PinID ) & DIO_MASK_BIT);
    1488:	e9 e3       	ldi	r30, 0x39	; 57
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	8b 81       	ldd	r24, Y+3	; 0x03
    1494:	88 2f       	mov	r24, r24
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	a9 01       	movw	r20, r18
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <DIO_enuGetPinValue+0x92>
    149c:	55 95       	asr	r21
    149e:	47 95       	ror	r20
    14a0:	8a 95       	dec	r24
    14a2:	e2 f7       	brpl	.-8      	; 0x149c <DIO_enuGetPinValue+0x8e>
    14a4:	ca 01       	movw	r24, r20
    14a6:	81 70       	andi	r24, 0x01	; 1
    14a8:	ec 81       	ldd	r30, Y+4	; 0x04
    14aa:	fd 81       	ldd	r31, Y+5	; 0x05
    14ac:	80 83       	st	Z, r24
    14ae:	3b c0       	rjmp	.+118    	; 0x1526 <DIO_enuGetPinValue+0x118>

				break;
			case DIO_u8GROUP_B:

				*Copy_pu8Value = ( (PINB >> Copy_u8PinID ) & DIO_MASK_BIT);
    14b0:	e6 e3       	ldi	r30, 0x36	; 54
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	28 2f       	mov	r18, r24
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	88 2f       	mov	r24, r24
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	a9 01       	movw	r20, r18
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <DIO_enuGetPinValue+0xba>
    14c4:	55 95       	asr	r21
    14c6:	47 95       	ror	r20
    14c8:	8a 95       	dec	r24
    14ca:	e2 f7       	brpl	.-8      	; 0x14c4 <DIO_enuGetPinValue+0xb6>
    14cc:	ca 01       	movw	r24, r20
    14ce:	81 70       	andi	r24, 0x01	; 1
    14d0:	ec 81       	ldd	r30, Y+4	; 0x04
    14d2:	fd 81       	ldd	r31, Y+5	; 0x05
    14d4:	80 83       	st	Z, r24
    14d6:	27 c0       	rjmp	.+78     	; 0x1526 <DIO_enuGetPinValue+0x118>

				break;
			case DIO_u8GROUP_C:

				*Copy_pu8Value = ( (PINC >> Copy_u8PinID ) & DIO_MASK_BIT);
    14d8:	e3 e3       	ldi	r30, 0x33	; 51
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	28 2f       	mov	r18, r24
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	8b 81       	ldd	r24, Y+3	; 0x03
    14e4:	88 2f       	mov	r24, r24
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	a9 01       	movw	r20, r18
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <DIO_enuGetPinValue+0xe2>
    14ec:	55 95       	asr	r21
    14ee:	47 95       	ror	r20
    14f0:	8a 95       	dec	r24
    14f2:	e2 f7       	brpl	.-8      	; 0x14ec <DIO_enuGetPinValue+0xde>
    14f4:	ca 01       	movw	r24, r20
    14f6:	81 70       	andi	r24, 0x01	; 1
    14f8:	ec 81       	ldd	r30, Y+4	; 0x04
    14fa:	fd 81       	ldd	r31, Y+5	; 0x05
    14fc:	80 83       	st	Z, r24
    14fe:	13 c0       	rjmp	.+38     	; 0x1526 <DIO_enuGetPinValue+0x118>

				break;
			case DIO_u8GROUP_D:

				*Copy_pu8Value = ( (PIND >> Copy_u8PinID ) & DIO_MASK_BIT);
    1500:	e0 e3       	ldi	r30, 0x30	; 48
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	80 81       	ld	r24, Z
    1506:	28 2f       	mov	r18, r24
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	8b 81       	ldd	r24, Y+3	; 0x03
    150c:	88 2f       	mov	r24, r24
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	a9 01       	movw	r20, r18
    1512:	02 c0       	rjmp	.+4      	; 0x1518 <DIO_enuGetPinValue+0x10a>
    1514:	55 95       	asr	r21
    1516:	47 95       	ror	r20
    1518:	8a 95       	dec	r24
    151a:	e2 f7       	brpl	.-8      	; 0x1514 <DIO_enuGetPinValue+0x106>
    151c:	ca 01       	movw	r24, r20
    151e:	81 70       	andi	r24, 0x01	; 1
    1520:	ec 81       	ldd	r30, Y+4	; 0x04
    1522:	fd 81       	ldd	r31, Y+5	; 0x05
    1524:	80 83       	st	Z, r24

				break;
			}
			Local_enuErrorState = ES_OK;
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	89 83       	std	Y+1, r24	; 0x01
    152a:	05 c0       	rjmp	.+10     	; 0x1536 <DIO_enuGetPinValue+0x128>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    152c:	82 e0       	ldi	r24, 0x02	; 2
    152e:	89 83       	std	Y+1, r24	; 0x01
    1530:	02 c0       	rjmp	.+4      	; 0x1536 <DIO_enuGetPinValue+0x128>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1532:	83 e0       	ldi	r24, 0x03	; 3
    1534:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1536:	89 81       	ldd	r24, Y+1	; 0x01
}
    1538:	27 96       	adiw	r28, 0x07	; 7
    153a:	0f b6       	in	r0, 0x3f	; 63
    153c:	f8 94       	cli
    153e:	de bf       	out	0x3e, r29	; 62
    1540:	0f be       	out	0x3f, r0	; 63
    1542:	cd bf       	out	0x3d, r28	; 61
    1544:	cf 91       	pop	r28
    1546:	df 91       	pop	r29
    1548:	08 95       	ret

0000154a <GIE_Enable>:
#include "GIE_Private.h"
#include "stdTypes.h"
void GIE_Enable()
{
    154a:	df 93       	push	r29
    154c:	cf 93       	push	r28
    154e:	cd b7       	in	r28, 0x3d	; 61
    1550:	de b7       	in	r29, 0x3e	; 62
	SREG |=(1<<7);
    1552:	af e5       	ldi	r26, 0x5F	; 95
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	ef e5       	ldi	r30, 0x5F	; 95
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	80 68       	ori	r24, 0x80	; 128
    155e:	8c 93       	st	X, r24
	}
    1560:	cf 91       	pop	r28
    1562:	df 91       	pop	r29
    1564:	08 95       	ret

00001566 <GIE_Disable>:
void GIE_Disable()
{
    1566:	df 93       	push	r29
    1568:	cf 93       	push	r28
    156a:	cd b7       	in	r28, 0x3d	; 61
    156c:	de b7       	in	r29, 0x3e	; 62
	SREG &=~(1<<7);
    156e:	af e5       	ldi	r26, 0x5F	; 95
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	ef e5       	ldi	r30, 0x5F	; 95
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	8f 77       	andi	r24, 0x7F	; 127
    157a:	8c 93       	st	X, r24
}
    157c:	cf 91       	pop	r28
    157e:	df 91       	pop	r29
    1580:	08 95       	ret

00001582 <__vector_13>:

static void(*gptr0)(void)=NULL;


ISR(__vector_13)
{
    1582:	1f 92       	push	r1
    1584:	0f 92       	push	r0
    1586:	0f b6       	in	r0, 0x3f	; 63
    1588:	0f 92       	push	r0
    158a:	11 24       	eor	r1, r1
    158c:	2f 93       	push	r18
    158e:	3f 93       	push	r19
    1590:	4f 93       	push	r20
    1592:	5f 93       	push	r21
    1594:	6f 93       	push	r22
    1596:	7f 93       	push	r23
    1598:	8f 93       	push	r24
    159a:	9f 93       	push	r25
    159c:	af 93       	push	r26
    159e:	bf 93       	push	r27
    15a0:	ef 93       	push	r30
    15a2:	ff 93       	push	r31
    15a4:	df 93       	push	r29
    15a6:	cf 93       	push	r28
    15a8:	cd b7       	in	r28, 0x3d	; 61
    15aa:	de b7       	in	r29, 0x3e	; 62
	if(gptr0 != NULL)
    15ac:	80 91 ba 03 	lds	r24, 0x03BA
    15b0:	90 91 bb 03 	lds	r25, 0x03BB
    15b4:	00 97       	sbiw	r24, 0x00	; 0
    15b6:	29 f0       	breq	.+10     	; 0x15c2 <__vector_13+0x40>
	gptr0();/*calling the function through "gptr0 pointer" in ISR*/
    15b8:	e0 91 ba 03 	lds	r30, 0x03BA
    15bc:	f0 91 bb 03 	lds	r31, 0x03BB
    15c0:	09 95       	icall
}
    15c2:	cf 91       	pop	r28
    15c4:	df 91       	pop	r29
    15c6:	ff 91       	pop	r31
    15c8:	ef 91       	pop	r30
    15ca:	bf 91       	pop	r27
    15cc:	af 91       	pop	r26
    15ce:	9f 91       	pop	r25
    15d0:	8f 91       	pop	r24
    15d2:	7f 91       	pop	r23
    15d4:	6f 91       	pop	r22
    15d6:	5f 91       	pop	r21
    15d8:	4f 91       	pop	r20
    15da:	3f 91       	pop	r19
    15dc:	2f 91       	pop	r18
    15de:	0f 90       	pop	r0
    15e0:	0f be       	out	0x3f, r0	; 63
    15e2:	0f 90       	pop	r0
    15e4:	1f 90       	pop	r1
    15e6:	18 95       	reti

000015e8 <Call_Back_Fun>:

void Call_Back_Fun(void (*ptf)(void))/*passing the function to be executed in the ISR to pointer*/
{
    15e8:	df 93       	push	r29
    15ea:	cf 93       	push	r28
    15ec:	00 d0       	rcall	.+0      	; 0x15ee <Call_Back_Fun+0x6>
    15ee:	cd b7       	in	r28, 0x3d	; 61
    15f0:	de b7       	in	r29, 0x3e	; 62
    15f2:	9a 83       	std	Y+2, r25	; 0x02
    15f4:	89 83       	std	Y+1, r24	; 0x01

		if  (ptf != NULL)
    15f6:	89 81       	ldd	r24, Y+1	; 0x01
    15f8:	9a 81       	ldd	r25, Y+2	; 0x02
    15fa:	00 97       	sbiw	r24, 0x00	; 0
    15fc:	31 f0       	breq	.+12     	; 0x160a <Call_Back_Fun+0x22>
		      gptr0=ptf; /*passing the function to other pointer the one that will actually be called in ISR*/
    15fe:	89 81       	ldd	r24, Y+1	; 0x01
    1600:	9a 81       	ldd	r25, Y+2	; 0x02
    1602:	90 93 bb 03 	sts	0x03BB, r25
    1606:	80 93 ba 03 	sts	0x03BA, r24





}
    160a:	0f 90       	pop	r0
    160c:	0f 90       	pop	r0
    160e:	cf 91       	pop	r28
    1610:	df 91       	pop	r29
    1612:	08 95       	ret

00001614 <Store_Info>:
 */
#include "stdTypes.h"
#include <string.h>

void Store_Info( struct User_Info Memory_Data[],struct User_Info User_Input ,u8 Type,u8 Num)
{
    1614:	8f 92       	push	r8
    1616:	9f 92       	push	r9
    1618:	af 92       	push	r10
    161a:	bf 92       	push	r11
    161c:	cf 92       	push	r12
    161e:	df 92       	push	r13
    1620:	ef 92       	push	r14
    1622:	ff 92       	push	r15
    1624:	0f 93       	push	r16
    1626:	1f 93       	push	r17
    1628:	df 93       	push	r29
    162a:	cf 93       	push	r28
    162c:	cd b7       	in	r28, 0x3d	; 61
    162e:	de b7       	in	r29, 0x3e	; 62
    1630:	62 97       	sbiw	r28, 0x12	; 18
    1632:	0f b6       	in	r0, 0x3f	; 63
    1634:	f8 94       	cli
    1636:	de bf       	out	0x3e, r29	; 62
    1638:	0f be       	out	0x3f, r0	; 63
    163a:	cd bf       	out	0x3d, r28	; 61
    163c:	9a 83       	std	Y+2, r25	; 0x02
    163e:	89 83       	std	Y+1, r24	; 0x01
    1640:	8b 82       	std	Y+3, r8	; 0x03
    1642:	9c 82       	std	Y+4, r9	; 0x04
    1644:	ad 82       	std	Y+5, r10	; 0x05
    1646:	be 82       	std	Y+6, r11	; 0x06
    1648:	cf 82       	std	Y+7, r12	; 0x07
    164a:	d8 86       	std	Y+8, r13	; 0x08
    164c:	e9 86       	std	Y+9, r14	; 0x09
    164e:	fa 86       	std	Y+10, r15	; 0x0a
    1650:	0b 87       	std	Y+11, r16	; 0x0b
    1652:	1c 87       	std	Y+12, r17	; 0x0c
    1654:	2d 87       	std	Y+13, r18	; 0x0d
    1656:	3e 87       	std	Y+14, r19	; 0x0e
    1658:	4f 87       	std	Y+15, r20	; 0x0f
    165a:	58 8b       	std	Y+16, r21	; 0x10
    165c:	69 8b       	std	Y+17, r22	; 0x11
    165e:	7a 8b       	std	Y+18, r23	; 0x12


	if (Type==1)
    1660:	89 a1       	ldd	r24, Y+33	; 0x21
    1662:	81 30       	cpi	r24, 0x01	; 1
    1664:	a9 f4       	brne	.+42     	; 0x1690 <Store_Info+0x7c>
	{
	  strcpy(Memory_Data[Num].UserName,User_Input.UserName);
    1666:	8a a1       	ldd	r24, Y+34	; 0x22
    1668:	88 2f       	mov	r24, r24
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	9c 01       	movw	r18, r24
    166e:	22 95       	swap	r18
    1670:	32 95       	swap	r19
    1672:	30 7f       	andi	r19, 0xF0	; 240
    1674:	32 27       	eor	r19, r18
    1676:	20 7f       	andi	r18, 0xF0	; 240
    1678:	32 27       	eor	r19, r18
    167a:	89 81       	ldd	r24, Y+1	; 0x01
    167c:	9a 81       	ldd	r25, Y+2	; 0x02
    167e:	82 0f       	add	r24, r18
    1680:	93 1f       	adc	r25, r19
    1682:	9e 01       	movw	r18, r28
    1684:	2d 5f       	subi	r18, 0xFD	; 253
    1686:	3f 4f       	sbci	r19, 0xFF	; 255
    1688:	b9 01       	movw	r22, r18
    168a:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <strcpy>
    168e:	1d c0       	rjmp	.+58     	; 0x16ca <Store_Info+0xb6>
	}

	else if (Type==0)
    1690:	89 a1       	ldd	r24, Y+33	; 0x21
    1692:	88 23       	and	r24, r24
    1694:	d1 f4       	brne	.+52     	; 0x16ca <Store_Info+0xb6>
	{
		strcpy(Memory_Data[Num].PassWord,User_Input.PassWord);
    1696:	8a a1       	ldd	r24, Y+34	; 0x22
    1698:	88 2f       	mov	r24, r24
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	9c 01       	movw	r18, r24
    169e:	22 95       	swap	r18
    16a0:	32 95       	swap	r19
    16a2:	30 7f       	andi	r19, 0xF0	; 240
    16a4:	32 27       	eor	r19, r18
    16a6:	20 7f       	andi	r18, 0xF0	; 240
    16a8:	32 27       	eor	r19, r18
    16aa:	89 81       	ldd	r24, Y+1	; 0x01
    16ac:	9a 81       	ldd	r25, Y+2	; 0x02
    16ae:	82 0f       	add	r24, r18
    16b0:	93 1f       	adc	r25, r19
    16b2:	ac 01       	movw	r20, r24
    16b4:	48 5f       	subi	r20, 0xF8	; 248
    16b6:	5f 4f       	sbci	r21, 0xFF	; 255
    16b8:	ce 01       	movw	r24, r28
    16ba:	03 96       	adiw	r24, 0x03	; 3
    16bc:	9c 01       	movw	r18, r24
    16be:	28 5f       	subi	r18, 0xF8	; 248
    16c0:	3f 4f       	sbci	r19, 0xFF	; 255
    16c2:	ca 01       	movw	r24, r20
    16c4:	b9 01       	movw	r22, r18
    16c6:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <strcpy>
	}

	else;


}
    16ca:	62 96       	adiw	r28, 0x12	; 18
    16cc:	0f b6       	in	r0, 0x3f	; 63
    16ce:	f8 94       	cli
    16d0:	de bf       	out	0x3e, r29	; 62
    16d2:	0f be       	out	0x3f, r0	; 63
    16d4:	cd bf       	out	0x3d, r28	; 61
    16d6:	cf 91       	pop	r28
    16d8:	df 91       	pop	r29
    16da:	1f 91       	pop	r17
    16dc:	0f 91       	pop	r16
    16de:	ff 90       	pop	r15
    16e0:	ef 90       	pop	r14
    16e2:	df 90       	pop	r13
    16e4:	cf 90       	pop	r12
    16e6:	bf 90       	pop	r11
    16e8:	af 90       	pop	r10
    16ea:	9f 90       	pop	r9
    16ec:	8f 90       	pop	r8
    16ee:	08 95       	ret

000016f0 <Check_Info>:
u8 Check_Info(struct User_Info Memory_Data[],struct User_Info User_Input ,u8 Type)
{
    16f0:	8f 92       	push	r8
    16f2:	9f 92       	push	r9
    16f4:	af 92       	push	r10
    16f6:	bf 92       	push	r11
    16f8:	cf 92       	push	r12
    16fa:	df 92       	push	r13
    16fc:	ef 92       	push	r14
    16fe:	ff 92       	push	r15
    1700:	0f 93       	push	r16
    1702:	1f 93       	push	r17
    1704:	df 93       	push	r29
    1706:	cf 93       	push	r28
    1708:	cd b7       	in	r28, 0x3d	; 61
    170a:	de b7       	in	r29, 0x3e	; 62
    170c:	64 97       	sbiw	r28, 0x14	; 20
    170e:	0f b6       	in	r0, 0x3f	; 63
    1710:	f8 94       	cli
    1712:	de bf       	out	0x3e, r29	; 62
    1714:	0f be       	out	0x3f, r0	; 63
    1716:	cd bf       	out	0x3d, r28	; 61
    1718:	9c 83       	std	Y+4, r25	; 0x04
    171a:	8b 83       	std	Y+3, r24	; 0x03
    171c:	8d 82       	std	Y+5, r8	; 0x05
    171e:	9e 82       	std	Y+6, r9	; 0x06
    1720:	af 82       	std	Y+7, r10	; 0x07
    1722:	b8 86       	std	Y+8, r11	; 0x08
    1724:	c9 86       	std	Y+9, r12	; 0x09
    1726:	da 86       	std	Y+10, r13	; 0x0a
    1728:	eb 86       	std	Y+11, r14	; 0x0b
    172a:	fc 86       	std	Y+12, r15	; 0x0c
    172c:	0d 87       	std	Y+13, r16	; 0x0d
    172e:	1e 87       	std	Y+14, r17	; 0x0e
    1730:	2f 87       	std	Y+15, r18	; 0x0f
    1732:	38 8b       	std	Y+16, r19	; 0x10
    1734:	49 8b       	std	Y+17, r20	; 0x11
    1736:	5a 8b       	std	Y+18, r21	; 0x12
    1738:	6b 8b       	std	Y+19, r22	; 0x13
    173a:	7c 8b       	std	Y+20, r23	; 0x14
	u8 i,Result;
	if (Type==1)
    173c:	8b a1       	ldd	r24, Y+35	; 0x23
    173e:	81 30       	cpi	r24, 0x01	; 1
    1740:	09 f5       	brne	.+66     	; 0x1784 <Check_Info+0x94>
	{
	     for(i=0;i<8;i++)
    1742:	1a 82       	std	Y+2, r1	; 0x02
    1744:	1b c0       	rjmp	.+54     	; 0x177c <Check_Info+0x8c>
	    {
	        if(strcmp(Memory_Data[i].UserName,User_Input.UserName) == 0 )
    1746:	8a 81       	ldd	r24, Y+2	; 0x02
    1748:	88 2f       	mov	r24, r24
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	9c 01       	movw	r18, r24
    174e:	22 95       	swap	r18
    1750:	32 95       	swap	r19
    1752:	30 7f       	andi	r19, 0xF0	; 240
    1754:	32 27       	eor	r19, r18
    1756:	20 7f       	andi	r18, 0xF0	; 240
    1758:	32 27       	eor	r19, r18
    175a:	8b 81       	ldd	r24, Y+3	; 0x03
    175c:	9c 81       	ldd	r25, Y+4	; 0x04
    175e:	82 0f       	add	r24, r18
    1760:	93 1f       	adc	r25, r19
    1762:	9e 01       	movw	r18, r28
    1764:	2b 5f       	subi	r18, 0xFB	; 251
    1766:	3f 4f       	sbci	r19, 0xFF	; 255
    1768:	b9 01       	movw	r22, r18
    176a:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <strcmp>
    176e:	00 97       	sbiw	r24, 0x00	; 0
    1770:	11 f4       	brne	.+4      	; 0x1776 <Check_Info+0x86>
	        {
	            Result=i;
    1772:	8a 81       	ldd	r24, Y+2	; 0x02
    1774:	89 83       	std	Y+1, r24	; 0x01
u8 Check_Info(struct User_Info Memory_Data[],struct User_Info User_Input ,u8 Type)
{
	u8 i,Result;
	if (Type==1)
	{
	     for(i=0;i<8;i++)
    1776:	8a 81       	ldd	r24, Y+2	; 0x02
    1778:	8f 5f       	subi	r24, 0xFF	; 255
    177a:	8a 83       	std	Y+2, r24	; 0x02
    177c:	8a 81       	ldd	r24, Y+2	; 0x02
    177e:	88 30       	cpi	r24, 0x08	; 8
    1780:	10 f3       	brcs	.-60     	; 0x1746 <Check_Info+0x56>
    1782:	2c c0       	rjmp	.+88     	; 0x17dc <Check_Info+0xec>
	        }

	    }

	}
	else if(Type==0)
    1784:	8b a1       	ldd	r24, Y+35	; 0x23
    1786:	88 23       	and	r24, r24
    1788:	39 f5       	brne	.+78     	; 0x17d8 <Check_Info+0xe8>
	{
	     for(i=0;i<8;i++)
    178a:	1a 82       	std	Y+2, r1	; 0x02
    178c:	21 c0       	rjmp	.+66     	; 0x17d0 <Check_Info+0xe0>
	    {
	        if(strcmp(Memory_Data[i].PassWord, User_Input.PassWord) == 0 )
    178e:	8a 81       	ldd	r24, Y+2	; 0x02
    1790:	88 2f       	mov	r24, r24
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	9c 01       	movw	r18, r24
    1796:	22 95       	swap	r18
    1798:	32 95       	swap	r19
    179a:	30 7f       	andi	r19, 0xF0	; 240
    179c:	32 27       	eor	r19, r18
    179e:	20 7f       	andi	r18, 0xF0	; 240
    17a0:	32 27       	eor	r19, r18
    17a2:	8b 81       	ldd	r24, Y+3	; 0x03
    17a4:	9c 81       	ldd	r25, Y+4	; 0x04
    17a6:	82 0f       	add	r24, r18
    17a8:	93 1f       	adc	r25, r19
    17aa:	ac 01       	movw	r20, r24
    17ac:	48 5f       	subi	r20, 0xF8	; 248
    17ae:	5f 4f       	sbci	r21, 0xFF	; 255
    17b0:	ce 01       	movw	r24, r28
    17b2:	05 96       	adiw	r24, 0x05	; 5
    17b4:	9c 01       	movw	r18, r24
    17b6:	28 5f       	subi	r18, 0xF8	; 248
    17b8:	3f 4f       	sbci	r19, 0xFF	; 255
    17ba:	ca 01       	movw	r24, r20
    17bc:	b9 01       	movw	r22, r18
    17be:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <strcmp>
    17c2:	00 97       	sbiw	r24, 0x00	; 0
    17c4:	11 f4       	brne	.+4      	; 0x17ca <Check_Info+0xda>
	        {
	        	Result=i;
    17c6:	8a 81       	ldd	r24, Y+2	; 0x02
    17c8:	89 83       	std	Y+1, r24	; 0x01
	    }

	}
	else if(Type==0)
	{
	     for(i=0;i<8;i++)
    17ca:	8a 81       	ldd	r24, Y+2	; 0x02
    17cc:	8f 5f       	subi	r24, 0xFF	; 255
    17ce:	8a 83       	std	Y+2, r24	; 0x02
    17d0:	8a 81       	ldd	r24, Y+2	; 0x02
    17d2:	88 30       	cpi	r24, 0x08	; 8
    17d4:	e0 f2       	brcs	.-72     	; 0x178e <Check_Info+0x9e>
    17d6:	02 c0       	rjmp	.+4      	; 0x17dc <Check_Info+0xec>

	    }
	}
	else
	{
		Result=-1;
    17d8:	8f ef       	ldi	r24, 0xFF	; 255
    17da:	89 83       	std	Y+1, r24	; 0x01
	}

	    return Result;
    17dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    17de:	64 96       	adiw	r28, 0x14	; 20
    17e0:	0f b6       	in	r0, 0x3f	; 63
    17e2:	f8 94       	cli
    17e4:	de bf       	out	0x3e, r29	; 62
    17e6:	0f be       	out	0x3f, r0	; 63
    17e8:	cd bf       	out	0x3d, r28	; 61
    17ea:	cf 91       	pop	r28
    17ec:	df 91       	pop	r29
    17ee:	1f 91       	pop	r17
    17f0:	0f 91       	pop	r16
    17f2:	ff 90       	pop	r15
    17f4:	ef 90       	pop	r14
    17f6:	df 90       	pop	r13
    17f8:	cf 90       	pop	r12
    17fa:	bf 90       	pop	r11
    17fc:	af 90       	pop	r10
    17fe:	9f 90       	pop	r9
    1800:	8f 90       	pop	r8
    1802:	08 95       	ret

00001804 <Waveform0_Gen_Mode>:
 * ********************************
 * *** Waveform Generation Mode function *****
 *********************************
 ***********************************/
void Waveform0_Gen_Mode()
{
    1804:	df 93       	push	r29
    1806:	cf 93       	push	r28
    1808:	cd b7       	in	r28, 0x3d	; 61
    180a:	de b7       	in	r29, 0x3e	; 62
     TCCR0 &=~(1<<3);
     TCCR0 |=(1<<6);


#elif Wave_GEN_Mode == FAst_PWM
	 TCCR0 |=(1<<3);
    180c:	a3 e5       	ldi	r26, 0x53	; 83
    180e:	b0 e0       	ldi	r27, 0x00	; 0
    1810:	e3 e5       	ldi	r30, 0x53	; 83
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	80 81       	ld	r24, Z
    1816:	88 60       	ori	r24, 0x08	; 8
    1818:	8c 93       	st	X, r24
	 TCCR0 |=(1<<6);
    181a:	a3 e5       	ldi	r26, 0x53	; 83
    181c:	b0 e0       	ldi	r27, 0x00	; 0
    181e:	e3 e5       	ldi	r30, 0x53	; 83
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	80 81       	ld	r24, Z
    1824:	80 64       	ori	r24, 0x40	; 64
    1826:	8c 93       	st	X, r24

#else
#error"Waveform_Gen has a wrong choice"
#endif
}
    1828:	cf 91       	pop	r28
    182a:	df 91       	pop	r29
    182c:	08 95       	ret

0000182e <Compare0_Match_Out_Mode>:
 * ********************************
 * *** Compare match function *****
 *********************************
 ***********************************/
void Compare0_Match_Out_Mode()
{
    182e:	df 93       	push	r29
    1830:	cf 93       	push	r28
    1832:	cd b7       	in	r28, 0x3d	; 61
    1834:	de b7       	in	r29, 0x3e	; 62
			TCCR0 |=(1<<4);
			TCCR0 &=~(1<<5);


#elif Compare0_Match_Out == Clear_OC0
			TCCR0 |=(1<<5);
    1836:	a3 e5       	ldi	r26, 0x53	; 83
    1838:	b0 e0       	ldi	r27, 0x00	; 0
    183a:	e3 e5       	ldi	r30, 0x53	; 83
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	80 81       	ld	r24, Z
    1840:	80 62       	ori	r24, 0x20	; 32
    1842:	8c 93       	st	X, r24
			TCCR0 &=~(1<<4);
    1844:	a3 e5       	ldi	r26, 0x53	; 83
    1846:	b0 e0       	ldi	r27, 0x00	; 0
    1848:	e3 e5       	ldi	r30, 0x53	; 83
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	80 81       	ld	r24, Z
    184e:	8f 7e       	andi	r24, 0xEF	; 239
    1850:	8c 93       	st	X, r24
			TCCR0 |=(1<<5);
			TCCR0 |=(1<<4);

#else
#endif
}
    1852:	cf 91       	pop	r28
    1854:	df 91       	pop	r29
    1856:	08 95       	ret

00001858 <Clk0_Select>:
 * *** Clock source selection function
 *********************************
 ***********************************/

void Clk0_Select()
{
    1858:	df 93       	push	r29
    185a:	cf 93       	push	r28
    185c:	cd b7       	in	r28, 0x3d	; 61
    185e:	de b7       	in	r29, 0x3e	; 62
	    TCCR0 &=~(1<<1);
	    TCCR0 &=~(1<<2);


#elif Cl_Selec == cl_64
	    TCCR0 |=(1<<0);
    1860:	a3 e5       	ldi	r26, 0x53	; 83
    1862:	b0 e0       	ldi	r27, 0x00	; 0
    1864:	e3 e5       	ldi	r30, 0x53	; 83
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	80 81       	ld	r24, Z
    186a:	81 60       	ori	r24, 0x01	; 1
    186c:	8c 93       	st	X, r24
	    TCCR0 |=(1<<1);
    186e:	a3 e5       	ldi	r26, 0x53	; 83
    1870:	b0 e0       	ldi	r27, 0x00	; 0
    1872:	e3 e5       	ldi	r30, 0x53	; 83
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	80 81       	ld	r24, Z
    1878:	82 60       	ori	r24, 0x02	; 2
    187a:	8c 93       	st	X, r24
	    TCCR0 &=~(1<<2);
    187c:	a3 e5       	ldi	r26, 0x53	; 83
    187e:	b0 e0       	ldi	r27, 0x00	; 0
    1880:	e3 e5       	ldi	r30, 0x53	; 83
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	80 81       	ld	r24, Z
    1886:	8b 7f       	andi	r24, 0xFB	; 251
    1888:	8c 93       	st	X, r24
	    TCCR0 |=(1<<1);
	    TCCR0 |=(1<<2);
#else
#endif

}
    188a:	cf 91       	pop	r28
    188c:	df 91       	pop	r29
    188e:	08 95       	ret

00001890 <OCR0_Value>:

void OCR0_Value(u8 Val)
{
    1890:	df 93       	push	r29
    1892:	cf 93       	push	r28
    1894:	0f 92       	push	r0
    1896:	cd b7       	in	r28, 0x3d	; 61
    1898:	de b7       	in	r29, 0x3e	; 62
    189a:	89 83       	std	Y+1, r24	; 0x01
	OCR0 =Val;
    189c:	ec e5       	ldi	r30, 0x5C	; 92
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	89 81       	ldd	r24, Y+1	; 0x01
    18a2:	80 83       	st	Z, r24
}
    18a4:	0f 90       	pop	r0
    18a6:	cf 91       	pop	r28
    18a8:	df 91       	pop	r29
    18aa:	08 95       	ret

000018ac <MotOr_0ff>:
void MotOr_0ff()
{
    18ac:	df 93       	push	r29
    18ae:	cf 93       	push	r28
    18b0:	cd b7       	in	r28, 0x3d	; 61
    18b2:	de b7       	in	r29, 0x3e	; 62
	OCR0=0;
    18b4:	ec e5       	ldi	r30, 0x5C	; 92
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	10 82       	st	Z, r1
}
    18ba:	cf 91       	pop	r28
    18bc:	df 91       	pop	r29
    18be:	08 95       	ret

000018c0 <MotOr_On>:

void MotOr_On()
{
    18c0:	df 93       	push	r29
    18c2:	cf 93       	push	r28
    18c4:	cd b7       	in	r28, 0x3d	; 61
    18c6:	de b7       	in	r29, 0x3e	; 62
	OCR0=200;
    18c8:	ec e5       	ldi	r30, 0x5C	; 92
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	88 ec       	ldi	r24, 0xC8	; 200
    18ce:	80 83       	st	Z, r24
}
    18d0:	cf 91       	pop	r28
    18d2:	df 91       	pop	r29
    18d4:	08 95       	ret

000018d6 <TOV_EN>:
#include "Timer_Servo_Config.h"
#include "Timer_Servo_Int.h"
#include "Timer_Servo_Priv.h"

void TOV_EN(void)
{
    18d6:	df 93       	push	r29
    18d8:	cf 93       	push	r28
    18da:	cd b7       	in	r28, 0x3d	; 61
    18dc:	de b7       	in	r29, 0x3e	; 62
	TIMSK |=(1<<0);
    18de:	a9 e5       	ldi	r26, 0x59	; 89
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	e9 e5       	ldi	r30, 0x59	; 89
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	80 81       	ld	r24, Z
    18e8:	81 60       	ori	r24, 0x01	; 1
    18ea:	8c 93       	st	X, r24
}
    18ec:	cf 91       	pop	r28
    18ee:	df 91       	pop	r29
    18f0:	08 95       	ret

000018f2 <WR_TCNValue>:

void WR_TCNValue(u8 value)
{
    18f2:	df 93       	push	r29
    18f4:	cf 93       	push	r28
    18f6:	0f 92       	push	r0
    18f8:	cd b7       	in	r28, 0x3d	; 61
    18fa:	de b7       	in	r29, 0x3e	; 62
    18fc:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 =value;
    18fe:	ec e4       	ldi	r30, 0x4C	; 76
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	89 81       	ldd	r24, Y+1	; 0x01
    1904:	88 2f       	mov	r24, r24
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	91 83       	std	Z+1, r25	; 0x01
    190a:	80 83       	st	Z, r24
}
    190c:	0f 90       	pop	r0
    190e:	cf 91       	pop	r28
    1910:	df 91       	pop	r29
    1912:	08 95       	ret

00001914 <Select_Channel>:

void Select_Channel()
{
    1914:	df 93       	push	r29
    1916:	cf 93       	push	r28
    1918:	cd b7       	in	r28, 0x3d	; 61
    191a:	de b7       	in	r29, 0x3e	; 62
#if Selec_Ch == Channel_A
		TCCR1A |=(1<<6);
		TCCR1A |=(1<<7);

#elif Selec_Ch == Channel_B
		TCCR1A |=(1<<4);
    191c:	af e4       	ldi	r26, 0x4F	; 79
    191e:	b0 e0       	ldi	r27, 0x00	; 0
    1920:	ef e4       	ldi	r30, 0x4F	; 79
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	80 81       	ld	r24, Z
    1926:	80 61       	ori	r24, 0x10	; 16
    1928:	8c 93       	st	X, r24
		TCCR1A |=(1<<5);
    192a:	af e4       	ldi	r26, 0x4F	; 79
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	ef e4       	ldi	r30, 0x4F	; 79
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	80 62       	ori	r24, 0x20	; 32
    1936:	8c 93       	st	X, r24

#else
#endif
}
    1938:	cf 91       	pop	r28
    193a:	df 91       	pop	r29
    193c:	08 95       	ret

0000193e <Waveform_Gen_Mode>:
 * ********************************
 * *** Waveform Generation Mode function *****
 *********************************
 ***********************************/
void Waveform_Gen_Mode()
{
    193e:	df 93       	push	r29
    1940:	cf 93       	push	r28
    1942:	cd b7       	in	r28, 0x3d	; 61
    1944:	de b7       	in	r29, 0x3e	; 62
	 TCCR1B &=~(1<<3);
     TCCR1B &=~(1<<4);


#elif WAVE_GEN_Mode == PWM_PhCrt_MODE9
	 TCCR1A &=~(1<<1);
    1946:	af e4       	ldi	r26, 0x4F	; 79
    1948:	b0 e0       	ldi	r27, 0x00	; 0
    194a:	ef e4       	ldi	r30, 0x4F	; 79
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	80 81       	ld	r24, Z
    1950:	8d 7f       	andi	r24, 0xFD	; 253
    1952:	8c 93       	st	X, r24
     TCCR1A |=(1<<0);
    1954:	af e4       	ldi	r26, 0x4F	; 79
    1956:	b0 e0       	ldi	r27, 0x00	; 0
    1958:	ef e4       	ldi	r30, 0x4F	; 79
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	81 60       	ori	r24, 0x01	; 1
    1960:	8c 93       	st	X, r24
	 TCCR1B &=~(1<<3);
    1962:	ae e4       	ldi	r26, 0x4E	; 78
    1964:	b0 e0       	ldi	r27, 0x00	; 0
    1966:	ee e4       	ldi	r30, 0x4E	; 78
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	87 7f       	andi	r24, 0xF7	; 247
    196e:	8c 93       	st	X, r24
     TCCR1B |=(1<<4);
    1970:	ae e4       	ldi	r26, 0x4E	; 78
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	ee e4       	ldi	r30, 0x4E	; 78
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	80 61       	ori	r24, 0x10	; 16
    197c:	8c 93       	st	X, r24
     TCCR1A |=(1<<0);
	 TCCR1B |=(1<<3);
     TCCR1B |=(1<<4);
#else
#endif
}
    197e:	cf 91       	pop	r28
    1980:	df 91       	pop	r29
    1982:	08 95       	ret

00001984 <CompareMode_Phase_correct>:
 * ********************************
 * *** Compare match function *****
 *********************************
 ***********************************/
void CompareMode_Phase_correct()
{
    1984:	df 93       	push	r29
    1986:	cf 93       	push	r28
    1988:	cd b7       	in	r28, 0x3d	; 61
    198a:	de b7       	in	r29, 0x3e	; 62
			TCCR1A &=~(1<<5);
			TCCR1B |=(1<<6);
			TCCR1B &=~(1<<7);

#elif CompareMode_Ph_Corr ==  Clear_OC1
			TCCR1A &=~(1<<4);
    198c:	af e4       	ldi	r26, 0x4F	; 79
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	ef e4       	ldi	r30, 0x4F	; 79
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	8f 7e       	andi	r24, 0xEF	; 239
    1998:	8c 93       	st	X, r24
			TCCR1A |=(1<<5);
    199a:	af e4       	ldi	r26, 0x4F	; 79
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	ef e4       	ldi	r30, 0x4F	; 79
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	80 81       	ld	r24, Z
    19a4:	80 62       	ori	r24, 0x20	; 32
    19a6:	8c 93       	st	X, r24
			TCCR1B &=~(1<<6);
    19a8:	ae e4       	ldi	r26, 0x4E	; 78
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	ee e4       	ldi	r30, 0x4E	; 78
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	8f 7b       	andi	r24, 0xBF	; 191
    19b4:	8c 93       	st	X, r24
			TCCR1B |=(1<<7);
    19b6:	ae e4       	ldi	r26, 0x4E	; 78
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	ee e4       	ldi	r30, 0x4E	; 78
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	80 68       	ori	r24, 0x80	; 128
    19c2:	8c 93       	st	X, r24
			TCCR1A |=(1<<5);
			TCCR1B |=(1<<6);
			TCCR1B |=(1<<7);
#else
#endif
	}
    19c4:	cf 91       	pop	r28
    19c6:	df 91       	pop	r29
    19c8:	08 95       	ret

000019ca <Clk_Select>:
 * ********************************
 * *** Clock source selection function
 *********************************
 ***********************************/
void Clk_Select()
{
    19ca:	df 93       	push	r29
    19cc:	cf 93       	push	r28
    19ce:	cd b7       	in	r28, 0x3d	; 61
    19d0:	de b7       	in	r29, 0x3e	; 62
		TCCR1B |=(1<<1);
		TCCR1B &=~(1<<2);


#elif Clk_Selec ==  clk_64
		TCCR1B |=(1<<0);
    19d2:	ae e4       	ldi	r26, 0x4E	; 78
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	ee e4       	ldi	r30, 0x4E	; 78
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	81 60       	ori	r24, 0x01	; 1
    19de:	8c 93       	st	X, r24
		TCCR1B |=(1<<1);
    19e0:	ae e4       	ldi	r26, 0x4E	; 78
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	ee e4       	ldi	r30, 0x4E	; 78
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	80 81       	ld	r24, Z
    19ea:	82 60       	ori	r24, 0x02	; 2
    19ec:	8c 93       	st	X, r24
		TCCR1B &=~(1<<2);
    19ee:	ae e4       	ldi	r26, 0x4E	; 78
    19f0:	b0 e0       	ldi	r27, 0x00	; 0
    19f2:	ee e4       	ldi	r30, 0x4E	; 78
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	8b 7f       	andi	r24, 0xFB	; 251
    19fa:	8c 93       	st	X, r24
		TCCR1B &=~(1<<0);
		TCCR1B |=(1<<1);
		TCCR1B |=(1<<2);
#else
#endif
}
    19fc:	cf 91       	pop	r28
    19fe:	df 91       	pop	r29
    1a00:	08 95       	ret

00001a02 <OCR1AH_OCR1ALValue>:


void OCR1AH_OCR1ALValue(u16 Val1)
{
    1a02:	df 93       	push	r29
    1a04:	cf 93       	push	r28
    1a06:	00 d0       	rcall	.+0      	; 0x1a08 <OCR1AH_OCR1ALValue+0x6>
    1a08:	cd b7       	in	r28, 0x3d	; 61
    1a0a:	de b7       	in	r29, 0x3e	; 62
    1a0c:	9a 83       	std	Y+2, r25	; 0x02
    1a0e:	89 83       	std	Y+1, r24	; 0x01
	OCR1AH =(Val1)>>8;
    1a10:	eb e4       	ldi	r30, 0x4B	; 75
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	89 81       	ldd	r24, Y+1	; 0x01
    1a16:	9a 81       	ldd	r25, Y+2	; 0x02
    1a18:	89 2f       	mov	r24, r25
    1a1a:	99 27       	eor	r25, r25
    1a1c:	80 83       	st	Z, r24
	OCR1AL =(u8)Val1;
    1a1e:	ea e4       	ldi	r30, 0x4A	; 74
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	89 81       	ldd	r24, Y+1	; 0x01
    1a24:	80 83       	st	Z, r24
}
    1a26:	0f 90       	pop	r0
    1a28:	0f 90       	pop	r0
    1a2a:	cf 91       	pop	r28
    1a2c:	df 91       	pop	r29
    1a2e:	08 95       	ret

00001a30 <OCR1AL_Value>:


void OCR1AL_Value(u8 Val1)
{
    1a30:	df 93       	push	r29
    1a32:	cf 93       	push	r28
    1a34:	0f 92       	push	r0
    1a36:	cd b7       	in	r28, 0x3d	; 61
    1a38:	de b7       	in	r29, 0x3e	; 62
    1a3a:	89 83       	std	Y+1, r24	; 0x01
	OCR1AL=(u8)Val1;
    1a3c:	ea e4       	ldi	r30, 0x4A	; 74
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	89 81       	ldd	r24, Y+1	; 0x01
    1a42:	80 83       	st	Z, r24
}
    1a44:	0f 90       	pop	r0
    1a46:	cf 91       	pop	r28
    1a48:	df 91       	pop	r29
    1a4a:	08 95       	ret

00001a4c <OCR1AH_Value>:


void OCR1AH_Value(u8 Val2)
{
    1a4c:	df 93       	push	r29
    1a4e:	cf 93       	push	r28
    1a50:	0f 92       	push	r0
    1a52:	cd b7       	in	r28, 0x3d	; 61
    1a54:	de b7       	in	r29, 0x3e	; 62
    1a56:	89 83       	std	Y+1, r24	; 0x01
	OCR1AH=(u8)Val2;
    1a58:	eb e4       	ldi	r30, 0x4B	; 75
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	89 81       	ldd	r24, Y+1	; 0x01
    1a5e:	80 83       	st	Z, r24
}
    1a60:	0f 90       	pop	r0
    1a62:	cf 91       	pop	r28
    1a64:	df 91       	pop	r29
    1a66:	08 95       	ret

00001a68 <Motor_180_DEG>:


void Motor_180_DEG()
{
    1a68:	df 93       	push	r29
    1a6a:	cf 93       	push	r28
    1a6c:	cd b7       	in	r28, 0x3d	; 61
    1a6e:	de b7       	in	r29, 0x3e	; 62
    OCR1BH=0 ;
    1a70:	e9 e4       	ldi	r30, 0x49	; 73
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	10 82       	st	Z, r1
    OCR1BL=250;
    1a76:	e8 e4       	ldi	r30, 0x48	; 72
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	8a ef       	ldi	r24, 0xFA	; 250
    1a7c:	80 83       	st	Z, r24
}
    1a7e:	cf 91       	pop	r28
    1a80:	df 91       	pop	r29
    1a82:	08 95       	ret

00001a84 <Motor_90_DEG>:


void Motor_90_DEG()
{
    1a84:	df 93       	push	r29
    1a86:	cf 93       	push	r28
    1a88:	cd b7       	in	r28, 0x3d	; 61
    1a8a:	de b7       	in	r29, 0x3e	; 62
    OCR1BH=0;
    1a8c:	e9 e4       	ldi	r30, 0x49	; 73
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	10 82       	st	Z, r1
    OCR1BL=125;
    1a92:	e8 e4       	ldi	r30, 0x48	; 72
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	8d e7       	ldi	r24, 0x7D	; 125
    1a98:	80 83       	st	Z, r24
}
    1a9a:	cf 91       	pop	r28
    1a9c:	df 91       	pop	r29
    1a9e:	08 95       	ret

00001aa0 <Motor_0_DEG>:

void Motor_0_DEG()
{
    1aa0:	df 93       	push	r29
    1aa2:	cf 93       	push	r28
    1aa4:	cd b7       	in	r28, 0x3d	; 61
    1aa6:	de b7       	in	r29, 0x3e	; 62
 DDRD&=~(1<<4);
    1aa8:	a1 e3       	ldi	r26, 0x31	; 49
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	e1 e3       	ldi	r30, 0x31	; 49
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	8f 7e       	andi	r24, 0xEF	; 239
    1ab4:	8c 93       	st	X, r24
}
    1ab6:	cf 91       	pop	r28
    1ab8:	df 91       	pop	r29
    1aba:	08 95       	ret

00001abc <USART_Init>:
#include "USART_Config.h"
#include "USART_Private.h"
#include "util/delay.h"
u8 State = 1;
void USART_Init(u8 Mode,u8 Parity,u8 Stop_Bits,u8 Charcter_Size)
{
    1abc:	df 93       	push	r29
    1abe:	cf 93       	push	r28
    1ac0:	cd b7       	in	r28, 0x3d	; 61
    1ac2:	de b7       	in	r29, 0x3e	; 62
    1ac4:	2d 97       	sbiw	r28, 0x0d	; 13
    1ac6:	0f b6       	in	r0, 0x3f	; 63
    1ac8:	f8 94       	cli
    1aca:	de bf       	out	0x3e, r29	; 62
    1acc:	0f be       	out	0x3f, r0	; 63
    1ace:	cd bf       	out	0x3d, r28	; 61
    1ad0:	8a 83       	std	Y+2, r24	; 0x02
    1ad2:	6b 83       	std	Y+3, r22	; 0x03
    1ad4:	4c 83       	std	Y+4, r20	; 0x04
    1ad6:	2d 83       	std	Y+5, r18	; 0x05
	u8 Result=0x00;
    1ad8:	19 82       	std	Y+1, r1	; 0x01
	switch(Mode)
    1ada:	8a 81       	ldd	r24, Y+2	; 0x02
    1adc:	28 2f       	mov	r18, r24
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	3d 87       	std	Y+13, r19	; 0x0d
    1ae2:	2c 87       	std	Y+12, r18	; 0x0c
    1ae4:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ae6:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ae8:	81 30       	cpi	r24, 0x01	; 1
    1aea:	91 05       	cpc	r25, r1
    1aec:	51 f0       	breq	.+20     	; 0x1b02 <USART_Init+0x46>
    1aee:	2c 85       	ldd	r18, Y+12	; 0x0c
    1af0:	3d 85       	ldd	r19, Y+13	; 0x0d
    1af2:	22 30       	cpi	r18, 0x02	; 2
    1af4:	31 05       	cpc	r19, r1
    1af6:	61 f0       	breq	.+24     	; 0x1b10 <USART_Init+0x54>
    1af8:	8c 85       	ldd	r24, Y+12	; 0x0c
    1afa:	9d 85       	ldd	r25, Y+13	; 0x0d
    1afc:	00 97       	sbiw	r24, 0x00	; 0
    1afe:	b1 f0       	breq	.+44     	; 0x1b2c <USART_Init+0x70>
    1b00:	18 c0       	rjmp	.+48     	; 0x1b32 <USART_Init+0x76>
	{
	case Asynch_Noraml_Mode:
		Result &=~(1<<UMSEL);
    1b02:	89 81       	ldd	r24, Y+1	; 0x01
    1b04:	8f 7b       	andi	r24, 0xBF	; 191
    1b06:	89 83       	std	Y+1, r24	; 0x01
		State = Asynch_Noraml_Mode;
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	80 93 a9 03 	sts	0x03A9, r24
    1b0e:	11 c0       	rjmp	.+34     	; 0x1b32 <USART_Init+0x76>
		break;
	case Asynch_Double_Speed_Mode:
		Result &=~(1<<UMSEL);
    1b10:	89 81       	ldd	r24, Y+1	; 0x01
    1b12:	8f 7b       	andi	r24, 0xBF	; 191
    1b14:	89 83       	std	Y+1, r24	; 0x01
		UCSRA  |= (1<<U2X);
    1b16:	ab e2       	ldi	r26, 0x2B	; 43
    1b18:	b0 e0       	ldi	r27, 0x00	; 0
    1b1a:	eb e2       	ldi	r30, 0x2B	; 43
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	80 81       	ld	r24, Z
    1b20:	82 60       	ori	r24, 0x02	; 2
    1b22:	8c 93       	st	X, r24
		State = Asynch_Double_Speed_Mode;
    1b24:	82 e0       	ldi	r24, 0x02	; 2
    1b26:	80 93 a9 03 	sts	0x03A9, r24
    1b2a:	03 c0       	rjmp	.+6      	; 0x1b32 <USART_Init+0x76>
		break;
	case Synch:
		Result |=(1<<UMSEL);
    1b2c:	89 81       	ldd	r24, Y+1	; 0x01
    1b2e:	80 64       	ori	r24, 0x40	; 64
    1b30:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}
	switch(Parity)
    1b32:	8b 81       	ldd	r24, Y+3	; 0x03
    1b34:	28 2f       	mov	r18, r24
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	3b 87       	std	Y+11, r19	; 0x0b
    1b3a:	2a 87       	std	Y+10, r18	; 0x0a
    1b3c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b3e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b40:	81 30       	cpi	r24, 0x01	; 1
    1b42:	91 05       	cpc	r25, r1
    1b44:	b9 f0       	breq	.+46     	; 0x1b74 <USART_Init+0xb8>
    1b46:	2a 85       	ldd	r18, Y+10	; 0x0a
    1b48:	3b 85       	ldd	r19, Y+11	; 0x0b
    1b4a:	22 30       	cpi	r18, 0x02	; 2
    1b4c:	31 05       	cpc	r19, r1
    1b4e:	59 f0       	breq	.+22     	; 0x1b66 <USART_Init+0xaa>
    1b50:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b52:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b54:	00 97       	sbiw	r24, 0x00	; 0
    1b56:	a1 f4       	brne	.+40     	; 0x1b80 <USART_Init+0xc4>
	{
	case DISABLE:
		Result &=~(1<<UPM0);
    1b58:	89 81       	ldd	r24, Y+1	; 0x01
    1b5a:	8f 7e       	andi	r24, 0xEF	; 239
    1b5c:	89 83       	std	Y+1, r24	; 0x01
		Result &=~(1<<UPM1);
    1b5e:	89 81       	ldd	r24, Y+1	; 0x01
    1b60:	8f 7d       	andi	r24, 0xDF	; 223
    1b62:	89 83       	std	Y+1, r24	; 0x01
    1b64:	0d c0       	rjmp	.+26     	; 0x1b80 <USART_Init+0xc4>
		break;
	case EVEN:
		Result &=~(1<<UPM0);
    1b66:	89 81       	ldd	r24, Y+1	; 0x01
    1b68:	8f 7e       	andi	r24, 0xEF	; 239
    1b6a:	89 83       	std	Y+1, r24	; 0x01
		Result |= (1<<UPM1);
    1b6c:	89 81       	ldd	r24, Y+1	; 0x01
    1b6e:	80 62       	ori	r24, 0x20	; 32
    1b70:	89 83       	std	Y+1, r24	; 0x01
    1b72:	06 c0       	rjmp	.+12     	; 0x1b80 <USART_Init+0xc4>
		break;
	case ODD:
		Result |= (1<<UPM0);
    1b74:	89 81       	ldd	r24, Y+1	; 0x01
    1b76:	80 61       	ori	r24, 0x10	; 16
    1b78:	89 83       	std	Y+1, r24	; 0x01
		Result |= (1<<UPM1);
    1b7a:	89 81       	ldd	r24, Y+1	; 0x01
    1b7c:	80 62       	ori	r24, 0x20	; 32
    1b7e:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}
	switch(Stop_Bits)
    1b80:	8c 81       	ldd	r24, Y+4	; 0x04
    1b82:	28 2f       	mov	r18, r24
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	39 87       	std	Y+9, r19	; 0x09
    1b88:	28 87       	std	Y+8, r18	; 0x08
    1b8a:	88 85       	ldd	r24, Y+8	; 0x08
    1b8c:	99 85       	ldd	r25, Y+9	; 0x09
    1b8e:	81 30       	cpi	r24, 0x01	; 1
    1b90:	91 05       	cpc	r25, r1
    1b92:	31 f0       	breq	.+12     	; 0x1ba0 <USART_Init+0xe4>
    1b94:	28 85       	ldd	r18, Y+8	; 0x08
    1b96:	39 85       	ldd	r19, Y+9	; 0x09
    1b98:	22 30       	cpi	r18, 0x02	; 2
    1b9a:	31 05       	cpc	r19, r1
    1b9c:	29 f0       	breq	.+10     	; 0x1ba8 <USART_Init+0xec>
    1b9e:	07 c0       	rjmp	.+14     	; 0x1bae <USART_Init+0xf2>
	{
	case 1 :
		Result &=~(1<<USBS);
    1ba0:	89 81       	ldd	r24, Y+1	; 0x01
    1ba2:	87 7f       	andi	r24, 0xF7	; 247
    1ba4:	89 83       	std	Y+1, r24	; 0x01
    1ba6:	03 c0       	rjmp	.+6      	; 0x1bae <USART_Init+0xf2>
		break;
	case 2 :
		Result |= (1<<USBS);
    1ba8:	89 81       	ldd	r24, Y+1	; 0x01
    1baa:	88 60       	ori	r24, 0x08	; 8
    1bac:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}
   switch(Charcter_Size)
    1bae:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb0:	28 2f       	mov	r18, r24
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	3f 83       	std	Y+7, r19	; 0x07
    1bb6:	2e 83       	std	Y+6, r18	; 0x06
    1bb8:	8e 81       	ldd	r24, Y+6	; 0x06
    1bba:	9f 81       	ldd	r25, Y+7	; 0x07
    1bbc:	87 30       	cpi	r24, 0x07	; 7
    1bbe:	91 05       	cpc	r25, r1
    1bc0:	b9 f1       	breq	.+110    	; 0x1c30 <USART_Init+0x174>
    1bc2:	2e 81       	ldd	r18, Y+6	; 0x06
    1bc4:	3f 81       	ldd	r19, Y+7	; 0x07
    1bc6:	28 30       	cpi	r18, 0x08	; 8
    1bc8:	31 05       	cpc	r19, r1
    1bca:	5c f4       	brge	.+22     	; 0x1be2 <USART_Init+0x126>
    1bcc:	8e 81       	ldd	r24, Y+6	; 0x06
    1bce:	9f 81       	ldd	r25, Y+7	; 0x07
    1bd0:	85 30       	cpi	r24, 0x05	; 5
    1bd2:	91 05       	cpc	r25, r1
    1bd4:	89 f0       	breq	.+34     	; 0x1bf8 <USART_Init+0x13c>
    1bd6:	2e 81       	ldd	r18, Y+6	; 0x06
    1bd8:	3f 81       	ldd	r19, Y+7	; 0x07
    1bda:	26 30       	cpi	r18, 0x06	; 6
    1bdc:	31 05       	cpc	r19, r1
    1bde:	d1 f0       	breq	.+52     	; 0x1c14 <USART_Init+0x158>
    1be0:	50 c0       	rjmp	.+160    	; 0x1c82 <USART_Init+0x1c6>
    1be2:	8e 81       	ldd	r24, Y+6	; 0x06
    1be4:	9f 81       	ldd	r25, Y+7	; 0x07
    1be6:	88 30       	cpi	r24, 0x08	; 8
    1be8:	91 05       	cpc	r25, r1
    1bea:	81 f1       	breq	.+96     	; 0x1c4c <USART_Init+0x190>
    1bec:	2e 81       	ldd	r18, Y+6	; 0x06
    1bee:	3f 81       	ldd	r19, Y+7	; 0x07
    1bf0:	29 30       	cpi	r18, 0x09	; 9
    1bf2:	31 05       	cpc	r19, r1
    1bf4:	c9 f1       	breq	.+114    	; 0x1c68 <USART_Init+0x1ac>
    1bf6:	45 c0       	rjmp	.+138    	; 0x1c82 <USART_Init+0x1c6>
   {
   case 5:
	   Result &=~(1<<UCSZ0);
    1bf8:	89 81       	ldd	r24, Y+1	; 0x01
    1bfa:	8d 7f       	andi	r24, 0xFD	; 253
    1bfc:	89 83       	std	Y+1, r24	; 0x01
	   Result &=~(1<<UCSZ1);
    1bfe:	89 81       	ldd	r24, Y+1	; 0x01
    1c00:	8b 7f       	andi	r24, 0xFB	; 251
    1c02:	89 83       	std	Y+1, r24	; 0x01
	   UCSRB  &=~(1<<UCSZ2);
    1c04:	aa e2       	ldi	r26, 0x2A	; 42
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	ea e2       	ldi	r30, 0x2A	; 42
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	8b 7f       	andi	r24, 0xFB	; 251
    1c10:	8c 93       	st	X, r24
    1c12:	37 c0       	rjmp	.+110    	; 0x1c82 <USART_Init+0x1c6>
	   break;
   case 6:
	   Result |= (1<<UCSZ0);
    1c14:	89 81       	ldd	r24, Y+1	; 0x01
    1c16:	82 60       	ori	r24, 0x02	; 2
    1c18:	89 83       	std	Y+1, r24	; 0x01
	   Result &=~(1<<UCSZ1);
    1c1a:	89 81       	ldd	r24, Y+1	; 0x01
    1c1c:	8b 7f       	andi	r24, 0xFB	; 251
    1c1e:	89 83       	std	Y+1, r24	; 0x01
	   UCSRB  &=~(1<<UCSZ2);
    1c20:	aa e2       	ldi	r26, 0x2A	; 42
    1c22:	b0 e0       	ldi	r27, 0x00	; 0
    1c24:	ea e2       	ldi	r30, 0x2A	; 42
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	80 81       	ld	r24, Z
    1c2a:	8b 7f       	andi	r24, 0xFB	; 251
    1c2c:	8c 93       	st	X, r24
    1c2e:	29 c0       	rjmp	.+82     	; 0x1c82 <USART_Init+0x1c6>
	   break;
   case 7:
	   Result &=~(1<<UCSZ0);
    1c30:	89 81       	ldd	r24, Y+1	; 0x01
    1c32:	8d 7f       	andi	r24, 0xFD	; 253
    1c34:	89 83       	std	Y+1, r24	; 0x01
	   Result |= (1<<UCSZ1);
    1c36:	89 81       	ldd	r24, Y+1	; 0x01
    1c38:	84 60       	ori	r24, 0x04	; 4
    1c3a:	89 83       	std	Y+1, r24	; 0x01
	   UCSRB  &=~(1<<UCSZ2);
    1c3c:	aa e2       	ldi	r26, 0x2A	; 42
    1c3e:	b0 e0       	ldi	r27, 0x00	; 0
    1c40:	ea e2       	ldi	r30, 0x2A	; 42
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	80 81       	ld	r24, Z
    1c46:	8b 7f       	andi	r24, 0xFB	; 251
    1c48:	8c 93       	st	X, r24
    1c4a:	1b c0       	rjmp	.+54     	; 0x1c82 <USART_Init+0x1c6>
	   break;
   case 8:
	   Result |= (1<<UCSZ0);
    1c4c:	89 81       	ldd	r24, Y+1	; 0x01
    1c4e:	82 60       	ori	r24, 0x02	; 2
    1c50:	89 83       	std	Y+1, r24	; 0x01
	   Result |= (1<<UCSZ1);
    1c52:	89 81       	ldd	r24, Y+1	; 0x01
    1c54:	84 60       	ori	r24, 0x04	; 4
    1c56:	89 83       	std	Y+1, r24	; 0x01
	   UCSRB  &=~(1<<UCSZ2);
    1c58:	aa e2       	ldi	r26, 0x2A	; 42
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	ea e2       	ldi	r30, 0x2A	; 42
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	8b 7f       	andi	r24, 0xFB	; 251
    1c64:	8c 93       	st	X, r24
    1c66:	0d c0       	rjmp	.+26     	; 0x1c82 <USART_Init+0x1c6>
	   break;
   case 9:
	   Result |= (1<<UCSZ0);
    1c68:	89 81       	ldd	r24, Y+1	; 0x01
    1c6a:	82 60       	ori	r24, 0x02	; 2
    1c6c:	89 83       	std	Y+1, r24	; 0x01
	   Result |= (1<<UCSZ1);
    1c6e:	89 81       	ldd	r24, Y+1	; 0x01
    1c70:	84 60       	ori	r24, 0x04	; 4
    1c72:	89 83       	std	Y+1, r24	; 0x01
	   UCSRB  |= (1<<UCSZ2);
    1c74:	aa e2       	ldi	r26, 0x2A	; 42
    1c76:	b0 e0       	ldi	r27, 0x00	; 0
    1c78:	ea e2       	ldi	r30, 0x2A	; 42
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 81       	ld	r24, Z
    1c7e:	84 60       	ori	r24, 0x04	; 4
    1c80:	8c 93       	st	X, r24
	   break;
   default:
	   break;
   }
   Result |=(1<<USREL);
    1c82:	89 81       	ldd	r24, Y+1	; 0x01
    1c84:	80 68       	ori	r24, 0x80	; 128
    1c86:	89 83       	std	Y+1, r24	; 0x01
   UCSRC=Result;
    1c88:	e0 e4       	ldi	r30, 0x40	; 64
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	89 81       	ldd	r24, Y+1	; 0x01
    1c8e:	80 83       	st	Z, r24
}
    1c90:	2d 96       	adiw	r28, 0x0d	; 13
    1c92:	0f b6       	in	r0, 0x3f	; 63
    1c94:	f8 94       	cli
    1c96:	de bf       	out	0x3e, r29	; 62
    1c98:	0f be       	out	0x3f, r0	; 63
    1c9a:	cd bf       	out	0x3d, r28	; 61
    1c9c:	cf 91       	pop	r28
    1c9e:	df 91       	pop	r29
    1ca0:	08 95       	ret

00001ca2 <USART_TX_Enabel>:
void USART_TX_Enabel()
{
    1ca2:	df 93       	push	r29
    1ca4:	cf 93       	push	r28
    1ca6:	cd b7       	in	r28, 0x3d	; 61
    1ca8:	de b7       	in	r29, 0x3e	; 62
	UCSRB |=(1<<TXEN);
    1caa:	aa e2       	ldi	r26, 0x2A	; 42
    1cac:	b0 e0       	ldi	r27, 0x00	; 0
    1cae:	ea e2       	ldi	r30, 0x2A	; 42
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	88 60       	ori	r24, 0x08	; 8
    1cb6:	8c 93       	st	X, r24
}
    1cb8:	cf 91       	pop	r28
    1cba:	df 91       	pop	r29
    1cbc:	08 95       	ret

00001cbe <USART_RX_Enabel>:
void USART_RX_Enabel()
{
    1cbe:	df 93       	push	r29
    1cc0:	cf 93       	push	r28
    1cc2:	cd b7       	in	r28, 0x3d	; 61
    1cc4:	de b7       	in	r29, 0x3e	; 62
	UCSRB |=(1<<RXEN);
    1cc6:	aa e2       	ldi	r26, 0x2A	; 42
    1cc8:	b0 e0       	ldi	r27, 0x00	; 0
    1cca:	ea e2       	ldi	r30, 0x2A	; 42
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	80 81       	ld	r24, Z
    1cd0:	80 61       	ori	r24, 0x10	; 16
    1cd2:	8c 93       	st	X, r24
}
    1cd4:	cf 91       	pop	r28
    1cd6:	df 91       	pop	r29
    1cd8:	08 95       	ret

00001cda <USART_TX_IE>:
void USART_TX_IE()
{
    1cda:	df 93       	push	r29
    1cdc:	cf 93       	push	r28
    1cde:	cd b7       	in	r28, 0x3d	; 61
    1ce0:	de b7       	in	r29, 0x3e	; 62
	UCSRB |=(1<<TXCIE);
    1ce2:	aa e2       	ldi	r26, 0x2A	; 42
    1ce4:	b0 e0       	ldi	r27, 0x00	; 0
    1ce6:	ea e2       	ldi	r30, 0x2A	; 42
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	80 81       	ld	r24, Z
    1cec:	80 64       	ori	r24, 0x40	; 64
    1cee:	8c 93       	st	X, r24
}
    1cf0:	cf 91       	pop	r28
    1cf2:	df 91       	pop	r29
    1cf4:	08 95       	ret

00001cf6 <USART_RX_IE>:
void USART_RX_IE()
{
    1cf6:	df 93       	push	r29
    1cf8:	cf 93       	push	r28
    1cfa:	cd b7       	in	r28, 0x3d	; 61
    1cfc:	de b7       	in	r29, 0x3e	; 62
	UCSRB |=(1<<RXCIE);
    1cfe:	aa e2       	ldi	r26, 0x2A	; 42
    1d00:	b0 e0       	ldi	r27, 0x00	; 0
    1d02:	ea e2       	ldi	r30, 0x2A	; 42
    1d04:	f0 e0       	ldi	r31, 0x00	; 0
    1d06:	80 81       	ld	r24, Z
    1d08:	80 68       	ori	r24, 0x80	; 128
    1d0a:	8c 93       	st	X, r24
}
    1d0c:	cf 91       	pop	r28
    1d0e:	df 91       	pop	r29
    1d10:	08 95       	ret

00001d12 <USART_RX_ID>:
void USART_RX_ID()
{
    1d12:	df 93       	push	r29
    1d14:	cf 93       	push	r28
    1d16:	cd b7       	in	r28, 0x3d	; 61
    1d18:	de b7       	in	r29, 0x3e	; 62
	UCSRB &=~(1<<RXCIE);
    1d1a:	aa e2       	ldi	r26, 0x2A	; 42
    1d1c:	b0 e0       	ldi	r27, 0x00	; 0
    1d1e:	ea e2       	ldi	r30, 0x2A	; 42
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	80 81       	ld	r24, Z
    1d24:	8f 77       	andi	r24, 0x7F	; 127
    1d26:	8c 93       	st	X, r24
}
    1d28:	cf 91       	pop	r28
    1d2a:	df 91       	pop	r29
    1d2c:	08 95       	ret

00001d2e <USART_UDRE_IE>:
void USART_UDRE_IE()
{
    1d2e:	df 93       	push	r29
    1d30:	cf 93       	push	r28
    1d32:	cd b7       	in	r28, 0x3d	; 61
    1d34:	de b7       	in	r29, 0x3e	; 62
	UCSRB |=(1<<UDRIE);
    1d36:	aa e2       	ldi	r26, 0x2A	; 42
    1d38:	b0 e0       	ldi	r27, 0x00	; 0
    1d3a:	ea e2       	ldi	r30, 0x2A	; 42
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	80 81       	ld	r24, Z
    1d40:	80 62       	ori	r24, 0x20	; 32
    1d42:	8c 93       	st	X, r24
}
    1d44:	cf 91       	pop	r28
    1d46:	df 91       	pop	r29
    1d48:	08 95       	ret

00001d4a <USART_Baud_Rate>:
void USART_Baud_Rate()
{
    1d4a:	df 93       	push	r29
    1d4c:	cf 93       	push	r28
    1d4e:	cd b7       	in	r28, 0x3d	; 61
    1d50:	de b7       	in	r29, 0x3e	; 62
	UBRRL =103;
    1d52:	e9 e2       	ldi	r30, 0x29	; 41
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	87 e6       	ldi	r24, 0x67	; 103
    1d58:	80 83       	st	Z, r24
	UBRRH =0x00;
    1d5a:	e0 e4       	ldi	r30, 0x40	; 64
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	10 82       	st	Z, r1
}
    1d60:	cf 91       	pop	r28
    1d62:	df 91       	pop	r29
    1d64:	08 95       	ret

00001d66 <USART_Send_Char>:
void USART_Send_Char(u8 Data)
{
    1d66:	df 93       	push	r29
    1d68:	cf 93       	push	r28
    1d6a:	0f 92       	push	r0
    1d6c:	cd b7       	in	r28, 0x3d	; 61
    1d6e:	de b7       	in	r29, 0x3e	; 62
    1d70:	89 83       	std	Y+1, r24	; 0x01
	while(!((UCSRA>>5)&1)); /*UDR Empty Register Method*/
    1d72:	eb e2       	ldi	r30, 0x2B	; 43
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 81       	ld	r24, Z
    1d78:	82 95       	swap	r24
    1d7a:	86 95       	lsr	r24
    1d7c:	87 70       	andi	r24, 0x07	; 7
    1d7e:	88 2f       	mov	r24, r24
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	81 70       	andi	r24, 0x01	; 1
    1d84:	90 70       	andi	r25, 0x00	; 0
    1d86:	00 97       	sbiw	r24, 0x00	; 0
    1d88:	a1 f3       	breq	.-24     	; 0x1d72 <USART_Send_Char+0xc>
	UDR = Data;
    1d8a:	ec e2       	ldi	r30, 0x2C	; 44
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	89 81       	ldd	r24, Y+1	; 0x01
    1d90:	80 83       	st	Z, r24


}
    1d92:	0f 90       	pop	r0
    1d94:	cf 91       	pop	r28
    1d96:	df 91       	pop	r29
    1d98:	08 95       	ret

00001d9a <USART_Recive_Char>:
u8 USART_Recive_Char()
{
    1d9a:	df 93       	push	r29
    1d9c:	cf 93       	push	r28
    1d9e:	cd b7       	in	r28, 0x3d	; 61
    1da0:	de b7       	in	r29, 0x3e	; 62
	while(((UCSRA>>7)&1)==0);
    1da2:	eb e2       	ldi	r30, 0x2B	; 43
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	88 23       	and	r24, r24
    1daa:	dc f7       	brge	.-10     	; 0x1da2 <USART_Recive_Char+0x8>
	return UDR;
    1dac:	ec e2       	ldi	r30, 0x2C	; 44
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	80 81       	ld	r24, Z

}
    1db2:	cf 91       	pop	r28
    1db4:	df 91       	pop	r29
    1db6:	08 95       	ret

00001db8 <USART_Send_String>:
void USART_Send_String(char *T_Data)
{
    1db8:	df 93       	push	r29
    1dba:	cf 93       	push	r28
    1dbc:	00 d0       	rcall	.+0      	; 0x1dbe <USART_Send_String+0x6>
    1dbe:	0f 92       	push	r0
    1dc0:	cd b7       	in	r28, 0x3d	; 61
    1dc2:	de b7       	in	r29, 0x3e	; 62
    1dc4:	9b 83       	std	Y+3, r25	; 0x03
    1dc6:	8a 83       	std	Y+2, r24	; 0x02

	u8 Str_Size = 0;
    1dc8:	19 82       	std	Y+1, r1	; 0x01
    1dca:	1b c0       	rjmp	.+54     	; 0x1e02 <USART_Send_String+0x4a>
	while(T_Data[Str_Size] != 0)
	{
		while(!((UCSRA>>5)&1)); /*UDR Empty Register Method*/
    1dcc:	eb e2       	ldi	r30, 0x2B	; 43
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	80 81       	ld	r24, Z
    1dd2:	82 95       	swap	r24
    1dd4:	86 95       	lsr	r24
    1dd6:	87 70       	andi	r24, 0x07	; 7
    1dd8:	88 2f       	mov	r24, r24
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	81 70       	andi	r24, 0x01	; 1
    1dde:	90 70       	andi	r25, 0x00	; 0
    1de0:	00 97       	sbiw	r24, 0x00	; 0
    1de2:	a1 f3       	breq	.-24     	; 0x1dcc <USART_Send_String+0x14>
		UDR = T_Data[Str_Size];
    1de4:	ac e2       	ldi	r26, 0x2C	; 44
    1de6:	b0 e0       	ldi	r27, 0x00	; 0
    1de8:	89 81       	ldd	r24, Y+1	; 0x01
    1dea:	28 2f       	mov	r18, r24
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	8a 81       	ldd	r24, Y+2	; 0x02
    1df0:	9b 81       	ldd	r25, Y+3	; 0x03
    1df2:	fc 01       	movw	r30, r24
    1df4:	e2 0f       	add	r30, r18
    1df6:	f3 1f       	adc	r31, r19
    1df8:	80 81       	ld	r24, Z
    1dfa:	8c 93       	st	X, r24
		Str_Size ++;
    1dfc:	89 81       	ldd	r24, Y+1	; 0x01
    1dfe:	8f 5f       	subi	r24, 0xFF	; 255
    1e00:	89 83       	std	Y+1, r24	; 0x01
}
void USART_Send_String(char *T_Data)
{

	u8 Str_Size = 0;
	while(T_Data[Str_Size] != 0)
    1e02:	89 81       	ldd	r24, Y+1	; 0x01
    1e04:	28 2f       	mov	r18, r24
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e0c:	fc 01       	movw	r30, r24
    1e0e:	e2 0f       	add	r30, r18
    1e10:	f3 1f       	adc	r31, r19
    1e12:	80 81       	ld	r24, Z
    1e14:	88 23       	and	r24, r24
    1e16:	d1 f6       	brne	.-76     	; 0x1dcc <USART_Send_String+0x14>
	{
		while(!((UCSRA>>5)&1)); /*UDR Empty Register Method*/
		UDR = T_Data[Str_Size];
		Str_Size ++;
	}
}
    1e18:	0f 90       	pop	r0
    1e1a:	0f 90       	pop	r0
    1e1c:	0f 90       	pop	r0
    1e1e:	cf 91       	pop	r28
    1e20:	df 91       	pop	r29
    1e22:	08 95       	ret

00001e24 <USART_Recive_String>:
void USART_Recive_String(u8 *R_Data)
{
    1e24:	df 93       	push	r29
    1e26:	cf 93       	push	r28
    1e28:	00 d0       	rcall	.+0      	; 0x1e2a <USART_Recive_String+0x6>
    1e2a:	00 d0       	rcall	.+0      	; 0x1e2c <USART_Recive_String+0x8>
    1e2c:	0f 92       	push	r0
    1e2e:	cd b7       	in	r28, 0x3d	; 61
    1e30:	de b7       	in	r29, 0x3e	; 62
    1e32:	9d 83       	std	Y+5, r25	; 0x05
    1e34:	8c 83       	std	Y+4, r24	; 0x04
	u8 End,Str_Size = 0,New_Data;
    1e36:	1a 82       	std	Y+2, r1	; 0x02
	while(((UCSRA>>7)&1)==0);
    1e38:	eb e2       	ldi	r30, 0x2B	; 43
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	80 81       	ld	r24, Z
    1e3e:	88 23       	and	r24, r24
    1e40:	dc f7       	brge	.-10     	; 0x1e38 <USART_Recive_String+0x14>
	End = UDR;
    1e42:	ec e2       	ldi	r30, 0x2C	; 44
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	80 81       	ld	r24, Z
    1e48:	8b 83       	std	Y+3, r24	; 0x03
	while(1)
	{
		while(((UCSRA>>7)&1)==0);
    1e4a:	eb e2       	ldi	r30, 0x2B	; 43
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
    1e50:	88 23       	and	r24, r24
    1e52:	dc f7       	brge	.-10     	; 0x1e4a <USART_Recive_String+0x26>
		New_Data = UDR;
    1e54:	ec e2       	ldi	r30, 0x2C	; 44
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	80 81       	ld	r24, Z
    1e5a:	89 83       	std	Y+1, r24	; 0x01
		if(New_Data==End)
    1e5c:	99 81       	ldd	r25, Y+1	; 0x01
    1e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e60:	98 17       	cp	r25, r24
    1e62:	89 f4       	brne	.+34     	; 0x1e86 <USART_Recive_String+0x62>
		{
			R_Data[Str_Size]=0;
    1e64:	8a 81       	ldd	r24, Y+2	; 0x02
    1e66:	28 2f       	mov	r18, r24
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e6c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e6e:	fc 01       	movw	r30, r24
    1e70:	e2 0f       	add	r30, r18
    1e72:	f3 1f       	adc	r31, r19
    1e74:	10 82       	st	Z, r1
			break;
		}
		R_Data[Str_Size++]=New_Data;
		}
}
    1e76:	0f 90       	pop	r0
    1e78:	0f 90       	pop	r0
    1e7a:	0f 90       	pop	r0
    1e7c:	0f 90       	pop	r0
    1e7e:	0f 90       	pop	r0
    1e80:	cf 91       	pop	r28
    1e82:	df 91       	pop	r29
    1e84:	08 95       	ret
		if(New_Data==End)
		{
			R_Data[Str_Size]=0;
			break;
		}
		R_Data[Str_Size++]=New_Data;
    1e86:	8a 81       	ldd	r24, Y+2	; 0x02
    1e88:	28 2f       	mov	r18, r24
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e8e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e90:	fc 01       	movw	r30, r24
    1e92:	e2 0f       	add	r30, r18
    1e94:	f3 1f       	adc	r31, r19
    1e96:	89 81       	ldd	r24, Y+1	; 0x01
    1e98:	80 83       	st	Z, r24
    1e9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9c:	8f 5f       	subi	r24, 0xFF	; 255
    1e9e:	8a 83       	std	Y+2, r24	; 0x02
    1ea0:	d4 cf       	rjmp	.-88     	; 0x1e4a <USART_Recive_String+0x26>

00001ea2 <AC_On>:
 */
#include "../MCAL/AVR_REG.h"
#include "../MCAL/Timer0_Int.h"

void AC_On()
{
    1ea2:	df 93       	push	r29
    1ea4:	cf 93       	push	r28
    1ea6:	cd b7       	in	r28, 0x3d	; 61
    1ea8:	de b7       	in	r29, 0x3e	; 62
	MotOr_On();
    1eaa:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <MotOr_On>

}
    1eae:	cf 91       	pop	r28
    1eb0:	df 91       	pop	r29
    1eb2:	08 95       	ret

00001eb4 <AC_Off>:
void AC_Off()
{
    1eb4:	df 93       	push	r29
    1eb6:	cf 93       	push	r28
    1eb8:	cd b7       	in	r28, 0x3d	; 61
    1eba:	de b7       	in	r29, 0x3e	; 62
	 MotOr_0ff();
    1ebc:	0e 94 56 0c 	call	0x18ac	; 0x18ac <MotOr_0ff>
}
    1ec0:	cf 91       	pop	r28
    1ec2:	df 91       	pop	r29
    1ec4:	08 95       	ret

00001ec6 <AC_Init>:
void AC_Init()
{
    1ec6:	df 93       	push	r29
    1ec8:	cf 93       	push	r28
    1eca:	cd b7       	in	r28, 0x3d	; 61
    1ecc:	de b7       	in	r29, 0x3e	; 62
	DDRB|=(1<<3);
    1ece:	a7 e3       	ldi	r26, 0x37	; 55
    1ed0:	b0 e0       	ldi	r27, 0x00	; 0
    1ed2:	e7 e3       	ldi	r30, 0x37	; 55
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	80 81       	ld	r24, Z
    1ed8:	88 60       	ori	r24, 0x08	; 8
    1eda:	8c 93       	st	X, r24
	Waveform0_Gen_Mode();
    1edc:	0e 94 02 0c 	call	0x1804	; 0x1804 <Waveform0_Gen_Mode>
	Compare0_Match_Out_Mode();
    1ee0:	0e 94 17 0c 	call	0x182e	; 0x182e <Compare0_Match_Out_Mode>
	Clk0_Select();
    1ee4:	0e 94 2c 0c 	call	0x1858	; 0x1858 <Clk0_Select>

}
    1ee8:	cf 91       	pop	r28
    1eea:	df 91       	pop	r29
    1eec:	08 95       	ret

00001eee <Door_Open>:
#include "../MCAL/Timer_Servo_Int.h"
#include "../MCAL/AVR_REG.h"


void Door_Open()
{
    1eee:	df 93       	push	r29
    1ef0:	cf 93       	push	r28
    1ef2:	cd b7       	in	r28, 0x3d	; 61
    1ef4:	de b7       	in	r29, 0x3e	; 62
	Motor_180_DEG();
    1ef6:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <Motor_180_DEG>
}
    1efa:	cf 91       	pop	r28
    1efc:	df 91       	pop	r29
    1efe:	08 95       	ret

00001f00 <Door_Close>:
void Door_Close()
{
    1f00:	df 93       	push	r29
    1f02:	cf 93       	push	r28
    1f04:	cd b7       	in	r28, 0x3d	; 61
    1f06:	de b7       	in	r29, 0x3e	; 62
	Motor_90_DEG();
    1f08:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <Motor_90_DEG>

}
    1f0c:	cf 91       	pop	r28
    1f0e:	df 91       	pop	r29
    1f10:	08 95       	ret

00001f12 <Door_Ini>:
void Door_Ini()
{
    1f12:	df 93       	push	r29
    1f14:	cf 93       	push	r28
    1f16:	cd b7       	in	r28, 0x3d	; 61
    1f18:	de b7       	in	r29, 0x3e	; 62
	DDRD|=(1<<4);
    1f1a:	a1 e3       	ldi	r26, 0x31	; 49
    1f1c:	b0 e0       	ldi	r27, 0x00	; 0
    1f1e:	e1 e3       	ldi	r30, 0x31	; 49
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	80 81       	ld	r24, Z
    1f24:	80 61       	ori	r24, 0x10	; 16
    1f26:	8c 93       	st	X, r24
	 Waveform_Gen_Mode();
    1f28:	0e 94 9f 0c 	call	0x193e	; 0x193e <Waveform_Gen_Mode>
		 CompareMode_Phase_correct();
    1f2c:	0e 94 c2 0c 	call	0x1984	; 0x1984 <CompareMode_Phase_correct>
		 Clk_Select();
    1f30:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <Clk_Select>
			OCR1AH=(u8)((2500)>>8);
    1f34:	eb e4       	ldi	r30, 0x4B	; 75
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	89 e0       	ldi	r24, 0x09	; 9
    1f3a:	80 83       	st	Z, r24
			OCR1AL=(u8)2500;
    1f3c:	ea e4       	ldi	r30, 0x4A	; 74
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	84 ec       	ldi	r24, 0xC4	; 196
    1f42:	80 83       	st	Z, r24
}
    1f44:	cf 91       	pop	r28
    1f46:	df 91       	pop	r29
    1f48:	08 95       	ret

00001f4a <Keypad_enuInit>:

		}

}*/
ES_t Keypad_enuInit(void)
{
    1f4a:	df 93       	push	r29
    1f4c:	cf 93       	push	r28
    1f4e:	0f 92       	push	r0
    1f50:	cd b7       	in	r28, 0x3d	; 61
    1f52:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1f54:	19 82       	std	Y+1, r1	; 0x01

	DIO_enuSetPinDirection(C1_PORT , C1_PIN , DIO_u8OUTPUT);
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	64 e0       	ldi	r22, 0x04	; 4
    1f5a:	41 e0       	ldi	r20, 0x01	; 1
    1f5c:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(C2_PORT , C2_PIN , DIO_u8OUTPUT);
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	65 e0       	ldi	r22, 0x05	; 5
    1f64:	41 e0       	ldi	r20, 0x01	; 1
    1f66:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(C3_PORT , C3_PIN , DIO_u8OUTPUT);
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	66 e0       	ldi	r22, 0x06	; 6
    1f6e:	41 e0       	ldi	r20, 0x01	; 1
    1f70:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(C4_PORT , C4_PIN , DIO_u8OUTPUT);
    1f74:	81 e0       	ldi	r24, 0x01	; 1
    1f76:	67 e0       	ldi	r22, 0x07	; 7
    1f78:	41 e0       	ldi	r20, 0x01	; 1
    1f7a:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(R1_PORT , R1_PIN , DIO_u8INPUT);
    1f7e:	82 e0       	ldi	r24, 0x02	; 2
    1f80:	63 e0       	ldi	r22, 0x03	; 3
    1f82:	40 e0       	ldi	r20, 0x00	; 0
    1f84:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(R2_PORT , R2_PIN , DIO_u8INPUT);
    1f88:	82 e0       	ldi	r24, 0x02	; 2
    1f8a:	64 e0       	ldi	r22, 0x04	; 4
    1f8c:	40 e0       	ldi	r20, 0x00	; 0
    1f8e:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(R3_PORT , R3_PIN , DIO_u8INPUT);
    1f92:	82 e0       	ldi	r24, 0x02	; 2
    1f94:	65 e0       	ldi	r22, 0x05	; 5
    1f96:	40 e0       	ldi	r20, 0x00	; 0
    1f98:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(R4_PORT , R4_PIN , DIO_u8INPUT);
    1f9c:	82 e0       	ldi	r24, 0x02	; 2
    1f9e:	66 e0       	ldi	r22, 0x06	; 6
    1fa0:	40 e0       	ldi	r20, 0x00	; 0
    1fa2:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_enuSetPinDirection>

	DIO_enuSetPinValue(C1_PORT , C1_PIN , DIO_u8HIGH);
    1fa6:	81 e0       	ldi	r24, 0x01	; 1
    1fa8:	64 e0       	ldi	r22, 0x04	; 4
    1faa:	41 e0       	ldi	r20, 0x01	; 1
    1fac:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C2_PORT , C2_PIN , DIO_u8HIGH);
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	65 e0       	ldi	r22, 0x05	; 5
    1fb4:	41 e0       	ldi	r20, 0x01	; 1
    1fb6:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C3_PORT , C3_PIN , DIO_u8HIGH);
    1fba:	81 e0       	ldi	r24, 0x01	; 1
    1fbc:	66 e0       	ldi	r22, 0x06	; 6
    1fbe:	41 e0       	ldi	r20, 0x01	; 1
    1fc0:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C4_PORT , C4_PIN , DIO_u8HIGH);
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	67 e0       	ldi	r22, 0x07	; 7
    1fc8:	41 e0       	ldi	r20, 0x01	; 1
    1fca:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(R1_PORT , R1_PIN , DIO_u8PULL_UP);
    1fce:	82 e0       	ldi	r24, 0x02	; 2
    1fd0:	63 e0       	ldi	r22, 0x03	; 3
    1fd2:	41 e0       	ldi	r20, 0x01	; 1
    1fd4:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R2_PORT , R2_PIN , DIO_u8PULL_UP);
    1fd8:	82 e0       	ldi	r24, 0x02	; 2
    1fda:	64 e0       	ldi	r22, 0x04	; 4
    1fdc:	41 e0       	ldi	r20, 0x01	; 1
    1fde:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R3_PORT , R3_PIN , DIO_u8PULL_UP);
    1fe2:	82 e0       	ldi	r24, 0x02	; 2
    1fe4:	65 e0       	ldi	r22, 0x05	; 5
    1fe6:	41 e0       	ldi	r20, 0x01	; 1
    1fe8:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R4_PORT , R4_PIN , DIO_u8PULL_UP);
    1fec:	82 e0       	ldi	r24, 0x02	; 2
    1fee:	66 e0       	ldi	r22, 0x06	; 6
    1ff0:	41 e0       	ldi	r20, 0x01	; 1
    1ff2:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_enuSetPinValue>

	return Local_enuErrorState;
    1ff6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ff8:	0f 90       	pop	r0
    1ffa:	cf 91       	pop	r28
    1ffc:	df 91       	pop	r29
    1ffe:	08 95       	ret

00002000 <Keypad_enuGetPressedKey>:

ES_t Keypad_enuGetPressedKey(u8 * Copy_pu8KeyValue)
{
    2000:	df 93       	push	r29
    2002:	cf 93       	push	r28
    2004:	cd b7       	in	r28, 0x3d	; 61
    2006:	de b7       	in	r29, 0x3e	; 62
    2008:	ea 97       	sbiw	r28, 0x3a	; 58
    200a:	0f b6       	in	r0, 0x3f	; 63
    200c:	f8 94       	cli
    200e:	de bf       	out	0x3e, r29	; 62
    2010:	0f be       	out	0x3f, r0	; 63
    2012:	cd bf       	out	0x3d, r28	; 61
    2014:	9c ab       	std	Y+52, r25	; 0x34
    2016:	8b ab       	std	Y+51, r24	; 0x33
	ES_t Local_enuErrorState = ES_NOK;
    2018:	19 8a       	std	Y+17, r1	; 0x11

	u8 Local_Au8ColPorts [COL_NUM] = {C1_PORT,C2_PORT,C3_PORT,C4_PORT};
    201a:	81 e0       	ldi	r24, 0x01	; 1
    201c:	8a 8b       	std	Y+18, r24	; 0x12
    201e:	81 e0       	ldi	r24, 0x01	; 1
    2020:	8b 8b       	std	Y+19, r24	; 0x13
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	8c 8b       	std	Y+20, r24	; 0x14
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	8d 8b       	std	Y+21, r24	; 0x15
	u8 Local_Au8ColPins  [COL_NUM] = {C1_PIN, C2_PIN, C3_PIN, C4_PIN};
    202a:	84 e0       	ldi	r24, 0x04	; 4
    202c:	8e 8b       	std	Y+22, r24	; 0x16
    202e:	85 e0       	ldi	r24, 0x05	; 5
    2030:	8f 8b       	std	Y+23, r24	; 0x17
    2032:	86 e0       	ldi	r24, 0x06	; 6
    2034:	88 8f       	std	Y+24, r24	; 0x18
    2036:	87 e0       	ldi	r24, 0x07	; 7
    2038:	89 8f       	std	Y+25, r24	; 0x19

	u8 Local_Au8RowPorts [ROW_NUM] = {R1_PORT,R2_PORT,R3_PORT,R4_PORT};
    203a:	82 e0       	ldi	r24, 0x02	; 2
    203c:	8a 8f       	std	Y+26, r24	; 0x1a
    203e:	82 e0       	ldi	r24, 0x02	; 2
    2040:	8b 8f       	std	Y+27, r24	; 0x1b
    2042:	82 e0       	ldi	r24, 0x02	; 2
    2044:	8c 8f       	std	Y+28, r24	; 0x1c
    2046:	82 e0       	ldi	r24, 0x02	; 2
    2048:	8d 8f       	std	Y+29, r24	; 0x1d
	u8 Local_Au8RowPins  [ROW_NUM] = {R1_PIN, R2_PIN, R3_PIN, R4_PIN};
    204a:	83 e0       	ldi	r24, 0x03	; 3
    204c:	8e 8f       	std	Y+30, r24	; 0x1e
    204e:	84 e0       	ldi	r24, 0x04	; 4
    2050:	8f 8f       	std	Y+31, r24	; 0x1f
    2052:	85 e0       	ldi	r24, 0x05	; 5
    2054:	88 a3       	std	Y+32, r24	; 0x20
    2056:	86 e0       	ldi	r24, 0x06	; 6
    2058:	89 a3       	std	Y+33, r24	; 0x21

	u8 Local_u8ColIter , Local_u8RowIter , Local_u8PinValue;

	for (Local_u8ColIter=0; Local_u8ColIter < COL_NUM ; Local_u8ColIter++ )
    205a:	18 8a       	std	Y+16, r1	; 0x10
    205c:	3f c1       	rjmp	.+638    	; 0x22dc <Keypad_enuGetPressedKey+0x2dc>
	{
		DIO_enuSetPinValue(Local_Au8ColPorts[Local_u8ColIter], Local_Au8ColPins[Local_u8ColIter], DIO_u8LOW);
    205e:	88 89       	ldd	r24, Y+16	; 0x10
    2060:	28 2f       	mov	r18, r24
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	ce 01       	movw	r24, r28
    2066:	42 96       	adiw	r24, 0x12	; 18
    2068:	fc 01       	movw	r30, r24
    206a:	e2 0f       	add	r30, r18
    206c:	f3 1f       	adc	r31, r19
    206e:	40 81       	ld	r20, Z
    2070:	88 89       	ldd	r24, Y+16	; 0x10
    2072:	28 2f       	mov	r18, r24
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	ce 01       	movw	r24, r28
    2078:	46 96       	adiw	r24, 0x16	; 22
    207a:	fc 01       	movw	r30, r24
    207c:	e2 0f       	add	r30, r18
    207e:	f3 1f       	adc	r31, r19
    2080:	90 81       	ld	r25, Z
    2082:	84 2f       	mov	r24, r20
    2084:	69 2f       	mov	r22, r25
    2086:	40 e0       	ldi	r20, 0x00	; 0
    2088:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_enuSetPinValue>
		for (Local_u8RowIter=0; Local_u8RowIter < ROW_NUM ; Local_u8RowIter++)
    208c:	1f 86       	std	Y+15, r1	; 0x0f
    208e:	08 c1       	rjmp	.+528    	; 0x22a0 <Keypad_enuGetPressedKey+0x2a0>
		{
			DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);
    2090:	8f 85       	ldd	r24, Y+15	; 0x0f
    2092:	28 2f       	mov	r18, r24
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	ce 01       	movw	r24, r28
    2098:	4a 96       	adiw	r24, 0x1a	; 26
    209a:	fc 01       	movw	r30, r24
    209c:	e2 0f       	add	r30, r18
    209e:	f3 1f       	adc	r31, r19
    20a0:	40 81       	ld	r20, Z
    20a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    20a4:	28 2f       	mov	r18, r24
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	ce 01       	movw	r24, r28
    20aa:	4e 96       	adiw	r24, 0x1e	; 30
    20ac:	fc 01       	movw	r30, r24
    20ae:	e2 0f       	add	r30, r18
    20b0:	f3 1f       	adc	r31, r19
    20b2:	90 81       	ld	r25, Z
    20b4:	9e 01       	movw	r18, r28
    20b6:	2e 5d       	subi	r18, 0xDE	; 222
    20b8:	3f 4f       	sbci	r19, 0xFF	; 255
    20ba:	84 2f       	mov	r24, r20
    20bc:	69 2f       	mov	r22, r25
    20be:	a9 01       	movw	r20, r18
    20c0:	0e 94 07 0a 	call	0x140e	; 0x140e <DIO_enuGetPinValue>
			if (! Local_u8PinValue)
    20c4:	8a a1       	ldd	r24, Y+34	; 0x22
    20c6:	88 23       	and	r24, r24
    20c8:	09 f0       	breq	.+2      	; 0x20cc <Keypad_enuGetPressedKey+0xcc>
    20ca:	e7 c0       	rjmp	.+462    	; 0x229a <Keypad_enuGetPressedKey+0x29a>
    20cc:	80 e0       	ldi	r24, 0x00	; 0
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	a0 e2       	ldi	r26, 0x20	; 32
    20d2:	b1 e4       	ldi	r27, 0x41	; 65
    20d4:	8b 87       	std	Y+11, r24	; 0x0b
    20d6:	9c 87       	std	Y+12, r25	; 0x0c
    20d8:	ad 87       	std	Y+13, r26	; 0x0d
    20da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    20de:	7c 85       	ldd	r23, Y+12	; 0x0c
    20e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20e4:	20 e0       	ldi	r18, 0x00	; 0
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	4a e7       	ldi	r20, 0x7A	; 122
    20ea:	55 e4       	ldi	r21, 0x45	; 69
    20ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f0:	dc 01       	movw	r26, r24
    20f2:	cb 01       	movw	r24, r22
    20f4:	8f 83       	std	Y+7, r24	; 0x07
    20f6:	98 87       	std	Y+8, r25	; 0x08
    20f8:	a9 87       	std	Y+9, r26	; 0x09
    20fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20fc:	6f 81       	ldd	r22, Y+7	; 0x07
    20fe:	78 85       	ldd	r23, Y+8	; 0x08
    2100:	89 85       	ldd	r24, Y+9	; 0x09
    2102:	9a 85       	ldd	r25, Y+10	; 0x0a
    2104:	20 e0       	ldi	r18, 0x00	; 0
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	40 e8       	ldi	r20, 0x80	; 128
    210a:	5f e3       	ldi	r21, 0x3F	; 63
    210c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2110:	88 23       	and	r24, r24
    2112:	2c f4       	brge	.+10     	; 0x211e <Keypad_enuGetPressedKey+0x11e>
		__ticks = 1;
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	9e 83       	std	Y+6, r25	; 0x06
    211a:	8d 83       	std	Y+5, r24	; 0x05
    211c:	3f c0       	rjmp	.+126    	; 0x219c <Keypad_enuGetPressedKey+0x19c>
	else if (__tmp > 65535)
    211e:	6f 81       	ldd	r22, Y+7	; 0x07
    2120:	78 85       	ldd	r23, Y+8	; 0x08
    2122:	89 85       	ldd	r24, Y+9	; 0x09
    2124:	9a 85       	ldd	r25, Y+10	; 0x0a
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	3f ef       	ldi	r19, 0xFF	; 255
    212a:	4f e7       	ldi	r20, 0x7F	; 127
    212c:	57 e4       	ldi	r21, 0x47	; 71
    212e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2132:	18 16       	cp	r1, r24
    2134:	4c f5       	brge	.+82     	; 0x2188 <Keypad_enuGetPressedKey+0x188>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2136:	6b 85       	ldd	r22, Y+11	; 0x0b
    2138:	7c 85       	ldd	r23, Y+12	; 0x0c
    213a:	8d 85       	ldd	r24, Y+13	; 0x0d
    213c:	9e 85       	ldd	r25, Y+14	; 0x0e
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	40 e2       	ldi	r20, 0x20	; 32
    2144:	51 e4       	ldi	r21, 0x41	; 65
    2146:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	bc 01       	movw	r22, r24
    2150:	cd 01       	movw	r24, r26
    2152:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2156:	dc 01       	movw	r26, r24
    2158:	cb 01       	movw	r24, r22
    215a:	9e 83       	std	Y+6, r25	; 0x06
    215c:	8d 83       	std	Y+5, r24	; 0x05
    215e:	0f c0       	rjmp	.+30     	; 0x217e <Keypad_enuGetPressedKey+0x17e>
    2160:	80 e9       	ldi	r24, 0x90	; 144
    2162:	91 e0       	ldi	r25, 0x01	; 1
    2164:	9c 83       	std	Y+4, r25	; 0x04
    2166:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2168:	8b 81       	ldd	r24, Y+3	; 0x03
    216a:	9c 81       	ldd	r25, Y+4	; 0x04
    216c:	01 97       	sbiw	r24, 0x01	; 1
    216e:	f1 f7       	brne	.-4      	; 0x216c <Keypad_enuGetPressedKey+0x16c>
    2170:	9c 83       	std	Y+4, r25	; 0x04
    2172:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2174:	8d 81       	ldd	r24, Y+5	; 0x05
    2176:	9e 81       	ldd	r25, Y+6	; 0x06
    2178:	01 97       	sbiw	r24, 0x01	; 1
    217a:	9e 83       	std	Y+6, r25	; 0x06
    217c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    217e:	8d 81       	ldd	r24, Y+5	; 0x05
    2180:	9e 81       	ldd	r25, Y+6	; 0x06
    2182:	00 97       	sbiw	r24, 0x00	; 0
    2184:	69 f7       	brne	.-38     	; 0x2160 <Keypad_enuGetPressedKey+0x160>
    2186:	14 c0       	rjmp	.+40     	; 0x21b0 <Keypad_enuGetPressedKey+0x1b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2188:	6f 81       	ldd	r22, Y+7	; 0x07
    218a:	78 85       	ldd	r23, Y+8	; 0x08
    218c:	89 85       	ldd	r24, Y+9	; 0x09
    218e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2190:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2194:	dc 01       	movw	r26, r24
    2196:	cb 01       	movw	r24, r22
    2198:	9e 83       	std	Y+6, r25	; 0x06
    219a:	8d 83       	std	Y+5, r24	; 0x05
    219c:	8d 81       	ldd	r24, Y+5	; 0x05
    219e:	9e 81       	ldd	r25, Y+6	; 0x06
    21a0:	9a 83       	std	Y+2, r25	; 0x02
    21a2:	89 83       	std	Y+1, r24	; 0x01
    21a4:	89 81       	ldd	r24, Y+1	; 0x01
    21a6:	9a 81       	ldd	r25, Y+2	; 0x02
    21a8:	01 97       	sbiw	r24, 0x01	; 1
    21aa:	f1 f7       	brne	.-4      	; 0x21a8 <Keypad_enuGetPressedKey+0x1a8>
    21ac:	9a 83       	std	Y+2, r25	; 0x02
    21ae:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(10);
				DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);
    21b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    21b2:	28 2f       	mov	r18, r24
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	ce 01       	movw	r24, r28
    21b8:	4a 96       	adiw	r24, 0x1a	; 26
    21ba:	fc 01       	movw	r30, r24
    21bc:	e2 0f       	add	r30, r18
    21be:	f3 1f       	adc	r31, r19
    21c0:	40 81       	ld	r20, Z
    21c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    21c4:	28 2f       	mov	r18, r24
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	ce 01       	movw	r24, r28
    21ca:	4e 96       	adiw	r24, 0x1e	; 30
    21cc:	fc 01       	movw	r30, r24
    21ce:	e2 0f       	add	r30, r18
    21d0:	f3 1f       	adc	r31, r19
    21d2:	90 81       	ld	r25, Z
    21d4:	9e 01       	movw	r18, r28
    21d6:	2e 5d       	subi	r18, 0xDE	; 222
    21d8:	3f 4f       	sbci	r19, 0xFF	; 255
    21da:	84 2f       	mov	r24, r20
    21dc:	69 2f       	mov	r22, r25
    21de:	a9 01       	movw	r20, r18
    21e0:	0e 94 07 0a 	call	0x140e	; 0x140e <DIO_enuGetPinValue>
				if (! Local_u8PinValue)
    21e4:	8a a1       	ldd	r24, Y+34	; 0x22
    21e6:	88 23       	and	r24, r24
    21e8:	09 f0       	breq	.+2      	; 0x21ec <Keypad_enuGetPressedKey+0x1ec>
    21ea:	57 c0       	rjmp	.+174    	; 0x229a <Keypad_enuGetPressedKey+0x29a>
    21ec:	1a c0       	rjmp	.+52     	; 0x2222 <Keypad_enuGetPressedKey+0x222>
				{
					while (! Local_u8PinValue)
						DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);
    21ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    21f0:	28 2f       	mov	r18, r24
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	ce 01       	movw	r24, r28
    21f6:	4a 96       	adiw	r24, 0x1a	; 26
    21f8:	fc 01       	movw	r30, r24
    21fa:	e2 0f       	add	r30, r18
    21fc:	f3 1f       	adc	r31, r19
    21fe:	40 81       	ld	r20, Z
    2200:	8f 85       	ldd	r24, Y+15	; 0x0f
    2202:	28 2f       	mov	r18, r24
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	ce 01       	movw	r24, r28
    2208:	4e 96       	adiw	r24, 0x1e	; 30
    220a:	fc 01       	movw	r30, r24
    220c:	e2 0f       	add	r30, r18
    220e:	f3 1f       	adc	r31, r19
    2210:	90 81       	ld	r25, Z
    2212:	9e 01       	movw	r18, r28
    2214:	2e 5d       	subi	r18, 0xDE	; 222
    2216:	3f 4f       	sbci	r19, 0xFF	; 255
    2218:	84 2f       	mov	r24, r20
    221a:	69 2f       	mov	r22, r25
    221c:	a9 01       	movw	r20, r18
    221e:	0e 94 07 0a 	call	0x140e	; 0x140e <DIO_enuGetPinValue>
			{
				_delay_ms(10);
				DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);
				if (! Local_u8PinValue)
				{
					while (! Local_u8PinValue)
    2222:	8a a1       	ldd	r24, Y+34	; 0x22
    2224:	88 23       	and	r24, r24
    2226:	19 f3       	breq	.-58     	; 0x21ee <Keypad_enuGetPressedKey+0x1ee>
						DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);

					u8 Local_Au8Values[ROW_NUM][COL_NUM] = KEYPAD_VALUES;
    2228:	ce 01       	movw	r24, r28
    222a:	83 96       	adiw	r24, 0x23	; 35
    222c:	9f ab       	std	Y+55, r25	; 0x37
    222e:	8e ab       	std	Y+54, r24	; 0x36
    2230:	ea ea       	ldi	r30, 0xAA	; 170
    2232:	f3 e0       	ldi	r31, 0x03	; 3
    2234:	f9 af       	std	Y+57, r31	; 0x39
    2236:	e8 af       	std	Y+56, r30	; 0x38
    2238:	f0 e1       	ldi	r31, 0x10	; 16
    223a:	fa af       	std	Y+58, r31	; 0x3a
    223c:	e8 ad       	ldd	r30, Y+56	; 0x38
    223e:	f9 ad       	ldd	r31, Y+57	; 0x39
    2240:	00 80       	ld	r0, Z
    2242:	88 ad       	ldd	r24, Y+56	; 0x38
    2244:	99 ad       	ldd	r25, Y+57	; 0x39
    2246:	01 96       	adiw	r24, 0x01	; 1
    2248:	99 af       	std	Y+57, r25	; 0x39
    224a:	88 af       	std	Y+56, r24	; 0x38
    224c:	ee a9       	ldd	r30, Y+54	; 0x36
    224e:	ff a9       	ldd	r31, Y+55	; 0x37
    2250:	00 82       	st	Z, r0
    2252:	8e a9       	ldd	r24, Y+54	; 0x36
    2254:	9f a9       	ldd	r25, Y+55	; 0x37
    2256:	01 96       	adiw	r24, 0x01	; 1
    2258:	9f ab       	std	Y+55, r25	; 0x37
    225a:	8e ab       	std	Y+54, r24	; 0x36
    225c:	9a ad       	ldd	r25, Y+58	; 0x3a
    225e:	91 50       	subi	r25, 0x01	; 1
    2260:	9a af       	std	Y+58, r25	; 0x3a
    2262:	ea ad       	ldd	r30, Y+58	; 0x3a
    2264:	ee 23       	and	r30, r30
    2266:	51 f7       	brne	.-44     	; 0x223c <Keypad_enuGetPressedKey+0x23c>

					*Copy_pu8KeyValue = Local_Au8Values[Local_u8RowIter][Local_u8ColIter];
    2268:	8f 85       	ldd	r24, Y+15	; 0x0f
    226a:	28 2f       	mov	r18, r24
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	88 89       	ldd	r24, Y+16	; 0x10
    2270:	48 2f       	mov	r20, r24
    2272:	50 e0       	ldi	r21, 0x00	; 0
    2274:	22 0f       	add	r18, r18
    2276:	33 1f       	adc	r19, r19
    2278:	22 0f       	add	r18, r18
    227a:	33 1f       	adc	r19, r19
    227c:	ce 01       	movw	r24, r28
    227e:	01 96       	adiw	r24, 0x01	; 1
    2280:	82 0f       	add	r24, r18
    2282:	93 1f       	adc	r25, r19
    2284:	84 0f       	add	r24, r20
    2286:	95 1f       	adc	r25, r21
    2288:	fc 01       	movw	r30, r24
    228a:	b2 96       	adiw	r30, 0x22	; 34
    228c:	80 81       	ld	r24, Z
    228e:	eb a9       	ldd	r30, Y+51	; 0x33
    2290:	fc a9       	ldd	r31, Y+52	; 0x34
    2292:	80 83       	st	Z, r24
					return ES_OK;
    2294:	f1 e0       	ldi	r31, 0x01	; 1
    2296:	fd ab       	std	Y+53, r31	; 0x35
    2298:	2b c0       	rjmp	.+86     	; 0x22f0 <Keypad_enuGetPressedKey+0x2f0>
	u8 Local_u8ColIter , Local_u8RowIter , Local_u8PinValue;

	for (Local_u8ColIter=0; Local_u8ColIter < COL_NUM ; Local_u8ColIter++ )
	{
		DIO_enuSetPinValue(Local_Au8ColPorts[Local_u8ColIter], Local_Au8ColPins[Local_u8ColIter], DIO_u8LOW);
		for (Local_u8RowIter=0; Local_u8RowIter < ROW_NUM ; Local_u8RowIter++)
    229a:	8f 85       	ldd	r24, Y+15	; 0x0f
    229c:	8f 5f       	subi	r24, 0xFF	; 255
    229e:	8f 87       	std	Y+15, r24	; 0x0f
    22a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    22a2:	84 30       	cpi	r24, 0x04	; 4
    22a4:	08 f4       	brcc	.+2      	; 0x22a8 <Keypad_enuGetPressedKey+0x2a8>
    22a6:	f4 ce       	rjmp	.-536    	; 0x2090 <Keypad_enuGetPressedKey+0x90>
					*Copy_pu8KeyValue = Local_Au8Values[Local_u8RowIter][Local_u8ColIter];
					return ES_OK;
				}
			}
		}
		DIO_enuSetPinValue(Local_Au8ColPorts[Local_u8ColIter], Local_Au8ColPins[Local_u8ColIter], DIO_u8HIGH);
    22a8:	88 89       	ldd	r24, Y+16	; 0x10
    22aa:	28 2f       	mov	r18, r24
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	ce 01       	movw	r24, r28
    22b0:	42 96       	adiw	r24, 0x12	; 18
    22b2:	fc 01       	movw	r30, r24
    22b4:	e2 0f       	add	r30, r18
    22b6:	f3 1f       	adc	r31, r19
    22b8:	40 81       	ld	r20, Z
    22ba:	88 89       	ldd	r24, Y+16	; 0x10
    22bc:	28 2f       	mov	r18, r24
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	ce 01       	movw	r24, r28
    22c2:	46 96       	adiw	r24, 0x16	; 22
    22c4:	fc 01       	movw	r30, r24
    22c6:	e2 0f       	add	r30, r18
    22c8:	f3 1f       	adc	r31, r19
    22ca:	90 81       	ld	r25, Z
    22cc:	84 2f       	mov	r24, r20
    22ce:	69 2f       	mov	r22, r25
    22d0:	41 e0       	ldi	r20, 0x01	; 1
    22d2:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_enuSetPinValue>
	u8 Local_Au8RowPorts [ROW_NUM] = {R1_PORT,R2_PORT,R3_PORT,R4_PORT};
	u8 Local_Au8RowPins  [ROW_NUM] = {R1_PIN, R2_PIN, R3_PIN, R4_PIN};

	u8 Local_u8ColIter , Local_u8RowIter , Local_u8PinValue;

	for (Local_u8ColIter=0; Local_u8ColIter < COL_NUM ; Local_u8ColIter++ )
    22d6:	88 89       	ldd	r24, Y+16	; 0x10
    22d8:	8f 5f       	subi	r24, 0xFF	; 255
    22da:	88 8b       	std	Y+16, r24	; 0x10
    22dc:	88 89       	ldd	r24, Y+16	; 0x10
    22de:	84 30       	cpi	r24, 0x04	; 4
    22e0:	08 f4       	brcc	.+2      	; 0x22e4 <Keypad_enuGetPressedKey+0x2e4>
    22e2:	bd ce       	rjmp	.-646    	; 0x205e <Keypad_enuGetPressedKey+0x5e>
				}
			}
		}
		DIO_enuSetPinValue(Local_Au8ColPorts[Local_u8ColIter], Local_Au8ColPins[Local_u8ColIter], DIO_u8HIGH);
	}
	*Copy_pu8KeyValue = KEYPAD_NOT_PRESSED;
    22e4:	eb a9       	ldd	r30, Y+51	; 0x33
    22e6:	fc a9       	ldd	r31, Y+52	; 0x34
    22e8:	8f ef       	ldi	r24, 0xFF	; 255
    22ea:	80 83       	st	Z, r24
	return Local_enuErrorState;
    22ec:	89 89       	ldd	r24, Y+17	; 0x11
    22ee:	8d ab       	std	Y+53, r24	; 0x35
    22f0:	8d a9       	ldd	r24, Y+53	; 0x35
}
    22f2:	ea 96       	adiw	r28, 0x3a	; 58
    22f4:	0f b6       	in	r0, 0x3f	; 63
    22f6:	f8 94       	cli
    22f8:	de bf       	out	0x3e, r29	; 62
    22fa:	0f be       	out	0x3f, r0	; 63
    22fc:	cd bf       	out	0x3d, r28	; 61
    22fe:	cf 91       	pop	r28
    2300:	df 91       	pop	r29
    2302:	08 95       	ret

00002304 <KeyPad_Press_Check>:

u8 KeyPad_Press_Check(void)
{
    2304:	df 93       	push	r29
    2306:	cf 93       	push	r28
    2308:	00 d0       	rcall	.+0      	; 0x230a <KeyPad_Press_Check+0x6>
    230a:	cd b7       	in	r28, 0x3d	; 61
    230c:	de b7       	in	r29, 0x3e	; 62
	u8 key;
	Keypad_enuGetPressedKey(&key);
    230e:	ce 01       	movw	r24, r28
    2310:	01 96       	adiw	r24, 0x01	; 1
    2312:	0e 94 00 10 	call	0x2000	; 0x2000 <Keypad_enuGetPressedKey>
	if (key != KEYPAD_NOT_PRESSED)
    2316:	89 81       	ldd	r24, Y+1	; 0x01
    2318:	8f 3f       	cpi	r24, 0xFF	; 255
    231a:	19 f0       	breq	.+6      	; 0x2322 <KeyPad_Press_Check+0x1e>
	{
		return 1;
    231c:	81 e0       	ldi	r24, 0x01	; 1
    231e:	8a 83       	std	Y+2, r24	; 0x02
    2320:	02 c0       	rjmp	.+4      	; 0x2326 <KeyPad_Press_Check+0x22>
	}
	else
	{
		return KEYPAD_NOT_PRESSED;
    2322:	8f ef       	ldi	r24, 0xFF	; 255
    2324:	8a 83       	std	Y+2, r24	; 0x02
    2326:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    2328:	0f 90       	pop	r0
    232a:	0f 90       	pop	r0
    232c:	cf 91       	pop	r28
    232e:	df 91       	pop	r29
    2330:	08 95       	ret

00002332 <LCD_enuInit>:
{
	DIO_enuSetPinValue(RS_PORT,RS_PIN,DIO_u8LOW);
	LCD_enuWriteNLatch(0x01);
}*/
ES_t LCD_enuInit(void)
{
    2332:	df 93       	push	r29
    2334:	cf 93       	push	r28
    2336:	cd b7       	in	r28, 0x3d	; 61
    2338:	de b7       	in	r29, 0x3e	; 62
    233a:	e9 97       	sbiw	r28, 0x39	; 57
    233c:	0f b6       	in	r0, 0x3f	; 63
    233e:	f8 94       	cli
    2340:	de bf       	out	0x3e, r29	; 62
    2342:	0f be       	out	0x3f, r0	; 63
    2344:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_u8ErrorState = ES_NOK;
    2346:	19 ae       	std	Y+57, r1	; 0x39

	DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    2348:	81 e0       	ldi	r24, 0x01	; 1
    234a:	61 e0       	ldi	r22, 0x01	; 1
    234c:	41 e0       	ldi	r20, 0x01	; 1
    234e:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RW_PORT, RW_PIN, DIO_u8OUTPUT);
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	62 e0       	ldi	r22, 0x02	; 2
    2356:	41 e0       	ldi	r20, 0x01	; 1
    2358:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(EN_PORT, EN_PIN, DIO_u8OUTPUT);
    235c:	80 e0       	ldi	r24, 0x00	; 0
    235e:	61 e0       	ldi	r22, 0x01	; 1
    2360:	41 e0       	ldi	r20, 0x01	; 1
    2362:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(D7_PORT, D7_PIN, DIO_u8OUTPUT);
    2366:	80 e0       	ldi	r24, 0x00	; 0
    2368:	67 e0       	ldi	r22, 0x07	; 7
    236a:	41 e0       	ldi	r20, 0x01	; 1
    236c:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D6_PORT, D6_PIN, DIO_u8OUTPUT);
    2370:	80 e0       	ldi	r24, 0x00	; 0
    2372:	66 e0       	ldi	r22, 0x06	; 6
    2374:	41 e0       	ldi	r20, 0x01	; 1
    2376:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D5_PORT, D5_PIN, DIO_u8OUTPUT);
    237a:	80 e0       	ldi	r24, 0x00	; 0
    237c:	65 e0       	ldi	r22, 0x05	; 5
    237e:	41 e0       	ldi	r20, 0x01	; 1
    2380:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D4_PORT, D4_PIN, DIO_u8OUTPUT);
    2384:	80 e0       	ldi	r24, 0x00	; 0
    2386:	64 e0       	ldi	r22, 0x04	; 4
    2388:	41 e0       	ldi	r20, 0x01	; 1
    238a:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_enuSetPinDirection>
    238e:	80 e0       	ldi	r24, 0x00	; 0
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	ac e0       	ldi	r26, 0x0C	; 12
    2394:	b2 e4       	ldi	r27, 0x42	; 66
    2396:	8d ab       	std	Y+53, r24	; 0x35
    2398:	9e ab       	std	Y+54, r25	; 0x36
    239a:	af ab       	std	Y+55, r26	; 0x37
    239c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    239e:	6d a9       	ldd	r22, Y+53	; 0x35
    23a0:	7e a9       	ldd	r23, Y+54	; 0x36
    23a2:	8f a9       	ldd	r24, Y+55	; 0x37
    23a4:	98 ad       	ldd	r25, Y+56	; 0x38
    23a6:	20 e0       	ldi	r18, 0x00	; 0
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	4a e7       	ldi	r20, 0x7A	; 122
    23ac:	55 e4       	ldi	r21, 0x45	; 69
    23ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b2:	dc 01       	movw	r26, r24
    23b4:	cb 01       	movw	r24, r22
    23b6:	89 ab       	std	Y+49, r24	; 0x31
    23b8:	9a ab       	std	Y+50, r25	; 0x32
    23ba:	ab ab       	std	Y+51, r26	; 0x33
    23bc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    23be:	69 a9       	ldd	r22, Y+49	; 0x31
    23c0:	7a a9       	ldd	r23, Y+50	; 0x32
    23c2:	8b a9       	ldd	r24, Y+51	; 0x33
    23c4:	9c a9       	ldd	r25, Y+52	; 0x34
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	40 e8       	ldi	r20, 0x80	; 128
    23cc:	5f e3       	ldi	r21, 0x3F	; 63
    23ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23d2:	88 23       	and	r24, r24
    23d4:	2c f4       	brge	.+10     	; 0x23e0 <LCD_enuInit+0xae>
		__ticks = 1;
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	98 ab       	std	Y+48, r25	; 0x30
    23dc:	8f a7       	std	Y+47, r24	; 0x2f
    23de:	3f c0       	rjmp	.+126    	; 0x245e <LCD_enuInit+0x12c>
	else if (__tmp > 65535)
    23e0:	69 a9       	ldd	r22, Y+49	; 0x31
    23e2:	7a a9       	ldd	r23, Y+50	; 0x32
    23e4:	8b a9       	ldd	r24, Y+51	; 0x33
    23e6:	9c a9       	ldd	r25, Y+52	; 0x34
    23e8:	20 e0       	ldi	r18, 0x00	; 0
    23ea:	3f ef       	ldi	r19, 0xFF	; 255
    23ec:	4f e7       	ldi	r20, 0x7F	; 127
    23ee:	57 e4       	ldi	r21, 0x47	; 71
    23f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23f4:	18 16       	cp	r1, r24
    23f6:	4c f5       	brge	.+82     	; 0x244a <LCD_enuInit+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23f8:	6d a9       	ldd	r22, Y+53	; 0x35
    23fa:	7e a9       	ldd	r23, Y+54	; 0x36
    23fc:	8f a9       	ldd	r24, Y+55	; 0x37
    23fe:	98 ad       	ldd	r25, Y+56	; 0x38
    2400:	20 e0       	ldi	r18, 0x00	; 0
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	40 e2       	ldi	r20, 0x20	; 32
    2406:	51 e4       	ldi	r21, 0x41	; 65
    2408:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    240c:	dc 01       	movw	r26, r24
    240e:	cb 01       	movw	r24, r22
    2410:	bc 01       	movw	r22, r24
    2412:	cd 01       	movw	r24, r26
    2414:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2418:	dc 01       	movw	r26, r24
    241a:	cb 01       	movw	r24, r22
    241c:	98 ab       	std	Y+48, r25	; 0x30
    241e:	8f a7       	std	Y+47, r24	; 0x2f
    2420:	0f c0       	rjmp	.+30     	; 0x2440 <LCD_enuInit+0x10e>
    2422:	80 e9       	ldi	r24, 0x90	; 144
    2424:	91 e0       	ldi	r25, 0x01	; 1
    2426:	9e a7       	std	Y+46, r25	; 0x2e
    2428:	8d a7       	std	Y+45, r24	; 0x2d
    242a:	8d a5       	ldd	r24, Y+45	; 0x2d
    242c:	9e a5       	ldd	r25, Y+46	; 0x2e
    242e:	01 97       	sbiw	r24, 0x01	; 1
    2430:	f1 f7       	brne	.-4      	; 0x242e <LCD_enuInit+0xfc>
    2432:	9e a7       	std	Y+46, r25	; 0x2e
    2434:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2436:	8f a5       	ldd	r24, Y+47	; 0x2f
    2438:	98 a9       	ldd	r25, Y+48	; 0x30
    243a:	01 97       	sbiw	r24, 0x01	; 1
    243c:	98 ab       	std	Y+48, r25	; 0x30
    243e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2440:	8f a5       	ldd	r24, Y+47	; 0x2f
    2442:	98 a9       	ldd	r25, Y+48	; 0x30
    2444:	00 97       	sbiw	r24, 0x00	; 0
    2446:	69 f7       	brne	.-38     	; 0x2422 <LCD_enuInit+0xf0>
    2448:	14 c0       	rjmp	.+40     	; 0x2472 <LCD_enuInit+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    244a:	69 a9       	ldd	r22, Y+49	; 0x31
    244c:	7a a9       	ldd	r23, Y+50	; 0x32
    244e:	8b a9       	ldd	r24, Y+51	; 0x33
    2450:	9c a9       	ldd	r25, Y+52	; 0x34
    2452:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2456:	dc 01       	movw	r26, r24
    2458:	cb 01       	movw	r24, r22
    245a:	98 ab       	std	Y+48, r25	; 0x30
    245c:	8f a7       	std	Y+47, r24	; 0x2f
    245e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2460:	98 a9       	ldd	r25, Y+48	; 0x30
    2462:	9c a7       	std	Y+44, r25	; 0x2c
    2464:	8b a7       	std	Y+43, r24	; 0x2b
    2466:	8b a5       	ldd	r24, Y+43	; 0x2b
    2468:	9c a5       	ldd	r25, Y+44	; 0x2c
    246a:	01 97       	sbiw	r24, 0x01	; 1
    246c:	f1 f7       	brne	.-4      	; 0x246a <LCD_enuInit+0x138>
    246e:	9c a7       	std	Y+44, r25	; 0x2c
    2470:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(35);
#if LCD_MODE == FOUR_BIT

	DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8LOW);
    2472:	81 e0       	ldi	r24, 0x01	; 1
    2474:	61 e0       	ldi	r22, 0x01	; 1
    2476:	40 e0       	ldi	r20, 0x00	; 0
    2478:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch(0x28);
    247c:	88 e2       	ldi	r24, 0x28	; 40
    247e:	0e 94 09 14 	call	0x2812	; 0x2812 <LCD_enuWriteNLatch>
    2482:	80 e0       	ldi	r24, 0x00	; 0
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	a0 e8       	ldi	r26, 0x80	; 128
    2488:	bf e3       	ldi	r27, 0x3F	; 63
    248a:	8f a3       	std	Y+39, r24	; 0x27
    248c:	98 a7       	std	Y+40, r25	; 0x28
    248e:	a9 a7       	std	Y+41, r26	; 0x29
    2490:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2492:	6f a1       	ldd	r22, Y+39	; 0x27
    2494:	78 a5       	ldd	r23, Y+40	; 0x28
    2496:	89 a5       	ldd	r24, Y+41	; 0x29
    2498:	9a a5       	ldd	r25, Y+42	; 0x2a
    249a:	20 e0       	ldi	r18, 0x00	; 0
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	4a e7       	ldi	r20, 0x7A	; 122
    24a0:	55 e4       	ldi	r21, 0x45	; 69
    24a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a6:	dc 01       	movw	r26, r24
    24a8:	cb 01       	movw	r24, r22
    24aa:	8b a3       	std	Y+35, r24	; 0x23
    24ac:	9c a3       	std	Y+36, r25	; 0x24
    24ae:	ad a3       	std	Y+37, r26	; 0x25
    24b0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    24b2:	6b a1       	ldd	r22, Y+35	; 0x23
    24b4:	7c a1       	ldd	r23, Y+36	; 0x24
    24b6:	8d a1       	ldd	r24, Y+37	; 0x25
    24b8:	9e a1       	ldd	r25, Y+38	; 0x26
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	40 e8       	ldi	r20, 0x80	; 128
    24c0:	5f e3       	ldi	r21, 0x3F	; 63
    24c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24c6:	88 23       	and	r24, r24
    24c8:	2c f4       	brge	.+10     	; 0x24d4 <LCD_enuInit+0x1a2>
		__ticks = 1;
    24ca:	81 e0       	ldi	r24, 0x01	; 1
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	9a a3       	std	Y+34, r25	; 0x22
    24d0:	89 a3       	std	Y+33, r24	; 0x21
    24d2:	3f c0       	rjmp	.+126    	; 0x2552 <LCD_enuInit+0x220>
	else if (__tmp > 65535)
    24d4:	6b a1       	ldd	r22, Y+35	; 0x23
    24d6:	7c a1       	ldd	r23, Y+36	; 0x24
    24d8:	8d a1       	ldd	r24, Y+37	; 0x25
    24da:	9e a1       	ldd	r25, Y+38	; 0x26
    24dc:	20 e0       	ldi	r18, 0x00	; 0
    24de:	3f ef       	ldi	r19, 0xFF	; 255
    24e0:	4f e7       	ldi	r20, 0x7F	; 127
    24e2:	57 e4       	ldi	r21, 0x47	; 71
    24e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24e8:	18 16       	cp	r1, r24
    24ea:	4c f5       	brge	.+82     	; 0x253e <LCD_enuInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ec:	6f a1       	ldd	r22, Y+39	; 0x27
    24ee:	78 a5       	ldd	r23, Y+40	; 0x28
    24f0:	89 a5       	ldd	r24, Y+41	; 0x29
    24f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    24f4:	20 e0       	ldi	r18, 0x00	; 0
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	40 e2       	ldi	r20, 0x20	; 32
    24fa:	51 e4       	ldi	r21, 0x41	; 65
    24fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2500:	dc 01       	movw	r26, r24
    2502:	cb 01       	movw	r24, r22
    2504:	bc 01       	movw	r22, r24
    2506:	cd 01       	movw	r24, r26
    2508:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    250c:	dc 01       	movw	r26, r24
    250e:	cb 01       	movw	r24, r22
    2510:	9a a3       	std	Y+34, r25	; 0x22
    2512:	89 a3       	std	Y+33, r24	; 0x21
    2514:	0f c0       	rjmp	.+30     	; 0x2534 <LCD_enuInit+0x202>
    2516:	80 e9       	ldi	r24, 0x90	; 144
    2518:	91 e0       	ldi	r25, 0x01	; 1
    251a:	98 a3       	std	Y+32, r25	; 0x20
    251c:	8f 8f       	std	Y+31, r24	; 0x1f
    251e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2520:	98 a1       	ldd	r25, Y+32	; 0x20
    2522:	01 97       	sbiw	r24, 0x01	; 1
    2524:	f1 f7       	brne	.-4      	; 0x2522 <LCD_enuInit+0x1f0>
    2526:	98 a3       	std	Y+32, r25	; 0x20
    2528:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    252a:	89 a1       	ldd	r24, Y+33	; 0x21
    252c:	9a a1       	ldd	r25, Y+34	; 0x22
    252e:	01 97       	sbiw	r24, 0x01	; 1
    2530:	9a a3       	std	Y+34, r25	; 0x22
    2532:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2534:	89 a1       	ldd	r24, Y+33	; 0x21
    2536:	9a a1       	ldd	r25, Y+34	; 0x22
    2538:	00 97       	sbiw	r24, 0x00	; 0
    253a:	69 f7       	brne	.-38     	; 0x2516 <LCD_enuInit+0x1e4>
    253c:	14 c0       	rjmp	.+40     	; 0x2566 <LCD_enuInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    253e:	6b a1       	ldd	r22, Y+35	; 0x23
    2540:	7c a1       	ldd	r23, Y+36	; 0x24
    2542:	8d a1       	ldd	r24, Y+37	; 0x25
    2544:	9e a1       	ldd	r25, Y+38	; 0x26
    2546:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254a:	dc 01       	movw	r26, r24
    254c:	cb 01       	movw	r24, r22
    254e:	9a a3       	std	Y+34, r25	; 0x22
    2550:	89 a3       	std	Y+33, r24	; 0x21
    2552:	89 a1       	ldd	r24, Y+33	; 0x21
    2554:	9a a1       	ldd	r25, Y+34	; 0x22
    2556:	9e 8f       	std	Y+30, r25	; 0x1e
    2558:	8d 8f       	std	Y+29, r24	; 0x1d
    255a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    255c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    255e:	01 97       	sbiw	r24, 0x01	; 1
    2560:	f1 f7       	brne	.-4      	; 0x255e <LCD_enuInit+0x22c>
    2562:	9e 8f       	std	Y+30, r25	; 0x1e
    2564:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD_enuWriteNLatch(0x38);

#endif

	_delay_ms(1);
	DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8LOW);
    2566:	81 e0       	ldi	r24, 0x01	; 1
    2568:	61 e0       	ldi	r22, 0x01	; 1
    256a:	40 e0       	ldi	r20, 0x00	; 0
    256c:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch(0x0f);
    2570:	8f e0       	ldi	r24, 0x0F	; 15
    2572:	0e 94 09 14 	call	0x2812	; 0x2812 <LCD_enuWriteNLatch>
    2576:	80 e0       	ldi	r24, 0x00	; 0
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	a0 e8       	ldi	r26, 0x80	; 128
    257c:	bf e3       	ldi	r27, 0x3F	; 63
    257e:	89 8f       	std	Y+25, r24	; 0x19
    2580:	9a 8f       	std	Y+26, r25	; 0x1a
    2582:	ab 8f       	std	Y+27, r26	; 0x1b
    2584:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2586:	69 8d       	ldd	r22, Y+25	; 0x19
    2588:	7a 8d       	ldd	r23, Y+26	; 0x1a
    258a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    258c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    258e:	20 e0       	ldi	r18, 0x00	; 0
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	4a e7       	ldi	r20, 0x7A	; 122
    2594:	55 e4       	ldi	r21, 0x45	; 69
    2596:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    259a:	dc 01       	movw	r26, r24
    259c:	cb 01       	movw	r24, r22
    259e:	8d 8b       	std	Y+21, r24	; 0x15
    25a0:	9e 8b       	std	Y+22, r25	; 0x16
    25a2:	af 8b       	std	Y+23, r26	; 0x17
    25a4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25a6:	6d 89       	ldd	r22, Y+21	; 0x15
    25a8:	7e 89       	ldd	r23, Y+22	; 0x16
    25aa:	8f 89       	ldd	r24, Y+23	; 0x17
    25ac:	98 8d       	ldd	r25, Y+24	; 0x18
    25ae:	20 e0       	ldi	r18, 0x00	; 0
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	40 e8       	ldi	r20, 0x80	; 128
    25b4:	5f e3       	ldi	r21, 0x3F	; 63
    25b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25ba:	88 23       	and	r24, r24
    25bc:	2c f4       	brge	.+10     	; 0x25c8 <LCD_enuInit+0x296>
		__ticks = 1;
    25be:	81 e0       	ldi	r24, 0x01	; 1
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	9c 8b       	std	Y+20, r25	; 0x14
    25c4:	8b 8b       	std	Y+19, r24	; 0x13
    25c6:	3f c0       	rjmp	.+126    	; 0x2646 <LCD_enuInit+0x314>
	else if (__tmp > 65535)
    25c8:	6d 89       	ldd	r22, Y+21	; 0x15
    25ca:	7e 89       	ldd	r23, Y+22	; 0x16
    25cc:	8f 89       	ldd	r24, Y+23	; 0x17
    25ce:	98 8d       	ldd	r25, Y+24	; 0x18
    25d0:	20 e0       	ldi	r18, 0x00	; 0
    25d2:	3f ef       	ldi	r19, 0xFF	; 255
    25d4:	4f e7       	ldi	r20, 0x7F	; 127
    25d6:	57 e4       	ldi	r21, 0x47	; 71
    25d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25dc:	18 16       	cp	r1, r24
    25de:	4c f5       	brge	.+82     	; 0x2632 <LCD_enuInit+0x300>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25e0:	69 8d       	ldd	r22, Y+25	; 0x19
    25e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25e8:	20 e0       	ldi	r18, 0x00	; 0
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	40 e2       	ldi	r20, 0x20	; 32
    25ee:	51 e4       	ldi	r21, 0x41	; 65
    25f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f4:	dc 01       	movw	r26, r24
    25f6:	cb 01       	movw	r24, r22
    25f8:	bc 01       	movw	r22, r24
    25fa:	cd 01       	movw	r24, r26
    25fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2600:	dc 01       	movw	r26, r24
    2602:	cb 01       	movw	r24, r22
    2604:	9c 8b       	std	Y+20, r25	; 0x14
    2606:	8b 8b       	std	Y+19, r24	; 0x13
    2608:	0f c0       	rjmp	.+30     	; 0x2628 <LCD_enuInit+0x2f6>
    260a:	80 e9       	ldi	r24, 0x90	; 144
    260c:	91 e0       	ldi	r25, 0x01	; 1
    260e:	9a 8b       	std	Y+18, r25	; 0x12
    2610:	89 8b       	std	Y+17, r24	; 0x11
    2612:	89 89       	ldd	r24, Y+17	; 0x11
    2614:	9a 89       	ldd	r25, Y+18	; 0x12
    2616:	01 97       	sbiw	r24, 0x01	; 1
    2618:	f1 f7       	brne	.-4      	; 0x2616 <LCD_enuInit+0x2e4>
    261a:	9a 8b       	std	Y+18, r25	; 0x12
    261c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    261e:	8b 89       	ldd	r24, Y+19	; 0x13
    2620:	9c 89       	ldd	r25, Y+20	; 0x14
    2622:	01 97       	sbiw	r24, 0x01	; 1
    2624:	9c 8b       	std	Y+20, r25	; 0x14
    2626:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2628:	8b 89       	ldd	r24, Y+19	; 0x13
    262a:	9c 89       	ldd	r25, Y+20	; 0x14
    262c:	00 97       	sbiw	r24, 0x00	; 0
    262e:	69 f7       	brne	.-38     	; 0x260a <LCD_enuInit+0x2d8>
    2630:	14 c0       	rjmp	.+40     	; 0x265a <LCD_enuInit+0x328>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2632:	6d 89       	ldd	r22, Y+21	; 0x15
    2634:	7e 89       	ldd	r23, Y+22	; 0x16
    2636:	8f 89       	ldd	r24, Y+23	; 0x17
    2638:	98 8d       	ldd	r25, Y+24	; 0x18
    263a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    263e:	dc 01       	movw	r26, r24
    2640:	cb 01       	movw	r24, r22
    2642:	9c 8b       	std	Y+20, r25	; 0x14
    2644:	8b 8b       	std	Y+19, r24	; 0x13
    2646:	8b 89       	ldd	r24, Y+19	; 0x13
    2648:	9c 89       	ldd	r25, Y+20	; 0x14
    264a:	98 8b       	std	Y+16, r25	; 0x10
    264c:	8f 87       	std	Y+15, r24	; 0x0f
    264e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2650:	98 89       	ldd	r25, Y+16	; 0x10
    2652:	01 97       	sbiw	r24, 0x01	; 1
    2654:	f1 f7       	brne	.-4      	; 0x2652 <LCD_enuInit+0x320>
    2656:	98 8b       	std	Y+16, r25	; 0x10
    2658:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);
	DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8LOW);
    265a:	81 e0       	ldi	r24, 0x01	; 1
    265c:	61 e0       	ldi	r22, 0x01	; 1
    265e:	40 e0       	ldi	r20, 0x00	; 0
    2660:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch(0x01);
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	0e 94 09 14 	call	0x2812	; 0x2812 <LCD_enuWriteNLatch>
    266a:	80 e0       	ldi	r24, 0x00	; 0
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	a0 e0       	ldi	r26, 0x00	; 0
    2670:	b0 e4       	ldi	r27, 0x40	; 64
    2672:	8b 87       	std	Y+11, r24	; 0x0b
    2674:	9c 87       	std	Y+12, r25	; 0x0c
    2676:	ad 87       	std	Y+13, r26	; 0x0d
    2678:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    267a:	6b 85       	ldd	r22, Y+11	; 0x0b
    267c:	7c 85       	ldd	r23, Y+12	; 0x0c
    267e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2680:	9e 85       	ldd	r25, Y+14	; 0x0e
    2682:	20 e0       	ldi	r18, 0x00	; 0
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	4a e7       	ldi	r20, 0x7A	; 122
    2688:	55 e4       	ldi	r21, 0x45	; 69
    268a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    268e:	dc 01       	movw	r26, r24
    2690:	cb 01       	movw	r24, r22
    2692:	8f 83       	std	Y+7, r24	; 0x07
    2694:	98 87       	std	Y+8, r25	; 0x08
    2696:	a9 87       	std	Y+9, r26	; 0x09
    2698:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    269a:	6f 81       	ldd	r22, Y+7	; 0x07
    269c:	78 85       	ldd	r23, Y+8	; 0x08
    269e:	89 85       	ldd	r24, Y+9	; 0x09
    26a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a2:	20 e0       	ldi	r18, 0x00	; 0
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	40 e8       	ldi	r20, 0x80	; 128
    26a8:	5f e3       	ldi	r21, 0x3F	; 63
    26aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26ae:	88 23       	and	r24, r24
    26b0:	2c f4       	brge	.+10     	; 0x26bc <LCD_enuInit+0x38a>
		__ticks = 1;
    26b2:	81 e0       	ldi	r24, 0x01	; 1
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	9e 83       	std	Y+6, r25	; 0x06
    26b8:	8d 83       	std	Y+5, r24	; 0x05
    26ba:	3f c0       	rjmp	.+126    	; 0x273a <LCD_enuInit+0x408>
	else if (__tmp > 65535)
    26bc:	6f 81       	ldd	r22, Y+7	; 0x07
    26be:	78 85       	ldd	r23, Y+8	; 0x08
    26c0:	89 85       	ldd	r24, Y+9	; 0x09
    26c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	3f ef       	ldi	r19, 0xFF	; 255
    26c8:	4f e7       	ldi	r20, 0x7F	; 127
    26ca:	57 e4       	ldi	r21, 0x47	; 71
    26cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26d0:	18 16       	cp	r1, r24
    26d2:	4c f5       	brge	.+82     	; 0x2726 <LCD_enuInit+0x3f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    26d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    26d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    26da:	9e 85       	ldd	r25, Y+14	; 0x0e
    26dc:	20 e0       	ldi	r18, 0x00	; 0
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	40 e2       	ldi	r20, 0x20	; 32
    26e2:	51 e4       	ldi	r21, 0x41	; 65
    26e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e8:	dc 01       	movw	r26, r24
    26ea:	cb 01       	movw	r24, r22
    26ec:	bc 01       	movw	r22, r24
    26ee:	cd 01       	movw	r24, r26
    26f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f4:	dc 01       	movw	r26, r24
    26f6:	cb 01       	movw	r24, r22
    26f8:	9e 83       	std	Y+6, r25	; 0x06
    26fa:	8d 83       	std	Y+5, r24	; 0x05
    26fc:	0f c0       	rjmp	.+30     	; 0x271c <LCD_enuInit+0x3ea>
    26fe:	80 e9       	ldi	r24, 0x90	; 144
    2700:	91 e0       	ldi	r25, 0x01	; 1
    2702:	9c 83       	std	Y+4, r25	; 0x04
    2704:	8b 83       	std	Y+3, r24	; 0x03
    2706:	8b 81       	ldd	r24, Y+3	; 0x03
    2708:	9c 81       	ldd	r25, Y+4	; 0x04
    270a:	01 97       	sbiw	r24, 0x01	; 1
    270c:	f1 f7       	brne	.-4      	; 0x270a <LCD_enuInit+0x3d8>
    270e:	9c 83       	std	Y+4, r25	; 0x04
    2710:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2712:	8d 81       	ldd	r24, Y+5	; 0x05
    2714:	9e 81       	ldd	r25, Y+6	; 0x06
    2716:	01 97       	sbiw	r24, 0x01	; 1
    2718:	9e 83       	std	Y+6, r25	; 0x06
    271a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    271c:	8d 81       	ldd	r24, Y+5	; 0x05
    271e:	9e 81       	ldd	r25, Y+6	; 0x06
    2720:	00 97       	sbiw	r24, 0x00	; 0
    2722:	69 f7       	brne	.-38     	; 0x26fe <LCD_enuInit+0x3cc>
    2724:	14 c0       	rjmp	.+40     	; 0x274e <LCD_enuInit+0x41c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2726:	6f 81       	ldd	r22, Y+7	; 0x07
    2728:	78 85       	ldd	r23, Y+8	; 0x08
    272a:	89 85       	ldd	r24, Y+9	; 0x09
    272c:	9a 85       	ldd	r25, Y+10	; 0x0a
    272e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2732:	dc 01       	movw	r26, r24
    2734:	cb 01       	movw	r24, r22
    2736:	9e 83       	std	Y+6, r25	; 0x06
    2738:	8d 83       	std	Y+5, r24	; 0x05
    273a:	8d 81       	ldd	r24, Y+5	; 0x05
    273c:	9e 81       	ldd	r25, Y+6	; 0x06
    273e:	9a 83       	std	Y+2, r25	; 0x02
    2740:	89 83       	std	Y+1, r24	; 0x01
    2742:	89 81       	ldd	r24, Y+1	; 0x01
    2744:	9a 81       	ldd	r25, Y+2	; 0x02
    2746:	01 97       	sbiw	r24, 0x01	; 1
    2748:	f1 f7       	brne	.-4      	; 0x2746 <LCD_enuInit+0x414>
    274a:	9a 83       	std	Y+2, r25	; 0x02
    274c:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);
	DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8LOW);
    274e:	81 e0       	ldi	r24, 0x01	; 1
    2750:	61 e0       	ldi	r22, 0x01	; 1
    2752:	40 e0       	ldi	r20, 0x00	; 0
    2754:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch(0x06);
    2758:	86 e0       	ldi	r24, 0x06	; 6
    275a:	0e 94 09 14 	call	0x2812	; 0x2812 <LCD_enuWriteNLatch>

	return Local_u8ErrorState;
    275e:	89 ad       	ldd	r24, Y+57	; 0x39
}
    2760:	e9 96       	adiw	r28, 0x39	; 57
    2762:	0f b6       	in	r0, 0x3f	; 63
    2764:	f8 94       	cli
    2766:	de bf       	out	0x3e, r29	; 62
    2768:	0f be       	out	0x3f, r0	; 63
    276a:	cd bf       	out	0x3d, r28	; 61
    276c:	cf 91       	pop	r28
    276e:	df 91       	pop	r29
    2770:	08 95       	ret

00002772 <LCD_enuSendData>:

ES_t LCD_enuSendData(u8 Copy_u8Data)
{
    2772:	df 93       	push	r29
    2774:	cf 93       	push	r28
    2776:	00 d0       	rcall	.+0      	; 0x2778 <LCD_enuSendData+0x6>
    2778:	cd b7       	in	r28, 0x3d	; 61
    277a:	de b7       	in	r29, 0x3e	; 62
    277c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_u8ErrorState = ES_NOK;
    277e:	19 82       	std	Y+1, r1	; 0x01

	DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8HIGH);
    2780:	81 e0       	ldi	r24, 0x01	; 1
    2782:	61 e0       	ldi	r22, 0x01	; 1
    2784:	41 e0       	ldi	r20, 0x01	; 1
    2786:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch(Copy_u8Data);
    278a:	8a 81       	ldd	r24, Y+2	; 0x02
    278c:	0e 94 09 14 	call	0x2812	; 0x2812 <LCD_enuWriteNLatch>


	return Local_u8ErrorState;
    2790:	89 81       	ldd	r24, Y+1	; 0x01
}
    2792:	0f 90       	pop	r0
    2794:	0f 90       	pop	r0
    2796:	cf 91       	pop	r28
    2798:	df 91       	pop	r29
    279a:	08 95       	ret

0000279c <LCD_enuSendCommand>:

ES_t LCD_enuSendCommand(u8 Copy_u8Command)
{
    279c:	df 93       	push	r29
    279e:	cf 93       	push	r28
    27a0:	00 d0       	rcall	.+0      	; 0x27a2 <LCD_enuSendCommand+0x6>
    27a2:	cd b7       	in	r28, 0x3d	; 61
    27a4:	de b7       	in	r29, 0x3e	; 62
    27a6:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_u8ErrorState = ES_NOK;
    27a8:	19 82       	std	Y+1, r1	; 0x01

	DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8LOW);
    27aa:	81 e0       	ldi	r24, 0x01	; 1
    27ac:	61 e0       	ldi	r22, 0x01	; 1
    27ae:	40 e0       	ldi	r20, 0x00	; 0
    27b0:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch(Copy_u8Command);
    27b4:	8a 81       	ldd	r24, Y+2	; 0x02
    27b6:	0e 94 09 14 	call	0x2812	; 0x2812 <LCD_enuWriteNLatch>

	return Local_u8ErrorState;
    27ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    27bc:	0f 90       	pop	r0
    27be:	0f 90       	pop	r0
    27c0:	cf 91       	pop	r28
    27c2:	df 91       	pop	r29
    27c4:	08 95       	ret

000027c6 <LCD_enuSendString>:


ES_t LCD_enuSendString(const char * Copy_pcString)
{
    27c6:	df 93       	push	r29
    27c8:	cf 93       	push	r28
    27ca:	00 d0       	rcall	.+0      	; 0x27cc <LCD_enuSendString+0x6>
    27cc:	0f 92       	push	r0
    27ce:	cd b7       	in	r28, 0x3d	; 61
    27d0:	de b7       	in	r29, 0x3e	; 62
    27d2:	9b 83       	std	Y+3, r25	; 0x03
    27d4:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_u8ErrorState = ES_NOK;
    27d6:	19 82       	std	Y+1, r1	; 0x01
    27d8:	10 c0       	rjmp	.+32     	; 0x27fa <LCD_enuSendString+0x34>

	while (*Copy_pcString)//'\0' ,'0'
	{
		DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8HIGH);
    27da:	81 e0       	ldi	r24, 0x01	; 1
    27dc:	61 e0       	ldi	r22, 0x01	; 1
    27de:	41 e0       	ldi	r20, 0x01	; 1
    27e0:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_enuSetPinValue>
		LCD_enuWriteNLatch(*Copy_pcString++);
    27e4:	ea 81       	ldd	r30, Y+2	; 0x02
    27e6:	fb 81       	ldd	r31, Y+3	; 0x03
    27e8:	20 81       	ld	r18, Z
    27ea:	8a 81       	ldd	r24, Y+2	; 0x02
    27ec:	9b 81       	ldd	r25, Y+3	; 0x03
    27ee:	01 96       	adiw	r24, 0x01	; 1
    27f0:	9b 83       	std	Y+3, r25	; 0x03
    27f2:	8a 83       	std	Y+2, r24	; 0x02
    27f4:	82 2f       	mov	r24, r18
    27f6:	0e 94 09 14 	call	0x2812	; 0x2812 <LCD_enuWriteNLatch>

ES_t LCD_enuSendString(const char * Copy_pcString)
{
	ES_t Local_u8ErrorState = ES_NOK;

	while (*Copy_pcString)//'\0' ,'0'
    27fa:	ea 81       	ldd	r30, Y+2	; 0x02
    27fc:	fb 81       	ldd	r31, Y+3	; 0x03
    27fe:	80 81       	ld	r24, Z
    2800:	88 23       	and	r24, r24
    2802:	59 f7       	brne	.-42     	; 0x27da <LCD_enuSendString+0x14>
	{
		DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8HIGH);
		LCD_enuWriteNLatch(*Copy_pcString++);
	}

	return Local_u8ErrorState;
    2804:	89 81       	ldd	r24, Y+1	; 0x01
}
    2806:	0f 90       	pop	r0
    2808:	0f 90       	pop	r0
    280a:	0f 90       	pop	r0
    280c:	cf 91       	pop	r28
    280e:	df 91       	pop	r29
    2810:	08 95       	ret

00002812 <LCD_enuWriteNLatch>:


static ES_t LCD_enuWriteNLatch(u8 Copy_u8Data)
{
    2812:	0f 93       	push	r16
    2814:	1f 93       	push	r17
    2816:	df 93       	push	r29
    2818:	cf 93       	push	r28
    281a:	cd b7       	in	r28, 0x3d	; 61
    281c:	de b7       	in	r29, 0x3e	; 62
    281e:	c6 55       	subi	r28, 0x56	; 86
    2820:	d0 40       	sbci	r29, 0x00	; 0
    2822:	0f b6       	in	r0, 0x3f	; 63
    2824:	f8 94       	cli
    2826:	de bf       	out	0x3e, r29	; 62
    2828:	0f be       	out	0x3f, r0	; 63
    282a:	cd bf       	out	0x3d, r28	; 61
    282c:	fe 01       	movw	r30, r28
    282e:	ea 5a       	subi	r30, 0xAA	; 170
    2830:	ff 4f       	sbci	r31, 0xFF	; 255
    2832:	80 83       	st	Z, r24
	ES_t Local_u8ErrorState = ES_NOK;
    2834:	fe 01       	movw	r30, r28
    2836:	eb 5a       	subi	r30, 0xAB	; 171
    2838:	ff 4f       	sbci	r31, 0xFF	; 255
    283a:	10 82       	st	Z, r1

	DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
    283c:	80 e0       	ldi	r24, 0x00	; 0
    283e:	61 e0       	ldi	r22, 0x01	; 1
    2840:	40 e0       	ldi	r20, 0x00	; 0
    2842:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_u8LOW);
    2846:	81 e0       	ldi	r24, 0x01	; 1
    2848:	62 e0       	ldi	r22, 0x02	; 2
    284a:	40 e0       	ldi	r20, 0x00	; 0
    284c:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_enuSetPinValue>

	if (Copy_u8Data == 0x28)//'('
    2850:	fe 01       	movw	r30, r28
    2852:	ea 5a       	subi	r30, 0xAA	; 170
    2854:	ff 4f       	sbci	r31, 0xFF	; 255
    2856:	80 81       	ld	r24, Z
    2858:	88 32       	cpi	r24, 0x28	; 40
    285a:	09 f0       	breq	.+2      	; 0x285e <LCD_enuWriteNLatch+0x4c>
    285c:	79 c1       	rjmp	.+754    	; 0x2b50 <LCD_enuWriteNLatch+0x33e>
		//u8 Local_u8RS_Val;
		//DIO_enuGetPinValue(RS_PORT, RS_PIN, &Local_u8RS_Val);

		//if (Local_u8RS_Val == DIO_u8LOW)
		{
			DIO_enuSetPinValue(D7_PORT, D7_PIN , ((Copy_u8Data>>7)&1));
    285e:	fe 01       	movw	r30, r28
    2860:	ea 5a       	subi	r30, 0xAA	; 170
    2862:	ff 4f       	sbci	r31, 0xFF	; 255
    2864:	80 81       	ld	r24, Z
    2866:	98 2f       	mov	r25, r24
    2868:	99 1f       	adc	r25, r25
    286a:	99 27       	eor	r25, r25
    286c:	99 1f       	adc	r25, r25
    286e:	80 e0       	ldi	r24, 0x00	; 0
    2870:	67 e0       	ldi	r22, 0x07	; 7
    2872:	49 2f       	mov	r20, r25
    2874:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(D6_PORT, D6_PIN , ((Copy_u8Data>>6)&1));
    2878:	fe 01       	movw	r30, r28
    287a:	ea 5a       	subi	r30, 0xAA	; 170
    287c:	ff 4f       	sbci	r31, 0xFF	; 255
    287e:	80 81       	ld	r24, Z
    2880:	82 95       	swap	r24
    2882:	86 95       	lsr	r24
    2884:	86 95       	lsr	r24
    2886:	83 70       	andi	r24, 0x03	; 3
    2888:	98 2f       	mov	r25, r24
    288a:	91 70       	andi	r25, 0x01	; 1
    288c:	80 e0       	ldi	r24, 0x00	; 0
    288e:	66 e0       	ldi	r22, 0x06	; 6
    2890:	49 2f       	mov	r20, r25
    2892:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(D5_PORT, D5_PIN , ((Copy_u8Data>>5)&1));
    2896:	fe 01       	movw	r30, r28
    2898:	ea 5a       	subi	r30, 0xAA	; 170
    289a:	ff 4f       	sbci	r31, 0xFF	; 255
    289c:	80 81       	ld	r24, Z
    289e:	82 95       	swap	r24
    28a0:	86 95       	lsr	r24
    28a2:	87 70       	andi	r24, 0x07	; 7
    28a4:	98 2f       	mov	r25, r24
    28a6:	91 70       	andi	r25, 0x01	; 1
    28a8:	80 e0       	ldi	r24, 0x00	; 0
    28aa:	65 e0       	ldi	r22, 0x05	; 5
    28ac:	49 2f       	mov	r20, r25
    28ae:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(D4_PORT, D4_PIN , ((Copy_u8Data>>4)&1));
    28b2:	fe 01       	movw	r30, r28
    28b4:	ea 5a       	subi	r30, 0xAA	; 170
    28b6:	ff 4f       	sbci	r31, 0xFF	; 255
    28b8:	80 81       	ld	r24, Z
    28ba:	82 95       	swap	r24
    28bc:	8f 70       	andi	r24, 0x0F	; 15
    28be:	98 2f       	mov	r25, r24
    28c0:	91 70       	andi	r25, 0x01	; 1
    28c2:	80 e0       	ldi	r24, 0x00	; 0
    28c4:	64 e0       	ldi	r22, 0x04	; 4
    28c6:	49 2f       	mov	r20, r25
    28c8:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_enuSetPinValue>

			DIO_enuSetPinValue(EN_PORT, EN_PIN , DIO_u8HIGH);
    28cc:	80 e0       	ldi	r24, 0x00	; 0
    28ce:	61 e0       	ldi	r22, 0x01	; 1
    28d0:	41 e0       	ldi	r20, 0x01	; 1
    28d2:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_enuSetPinValue>
    28d6:	fe 01       	movw	r30, r28
    28d8:	ef 5a       	subi	r30, 0xAF	; 175
    28da:	ff 4f       	sbci	r31, 0xFF	; 255
    28dc:	80 e0       	ldi	r24, 0x00	; 0
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	a0 ea       	ldi	r26, 0xA0	; 160
    28e2:	b0 e4       	ldi	r27, 0x40	; 64
    28e4:	80 83       	st	Z, r24
    28e6:	91 83       	std	Z+1, r25	; 0x01
    28e8:	a2 83       	std	Z+2, r26	; 0x02
    28ea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ec:	8e 01       	movw	r16, r28
    28ee:	03 5b       	subi	r16, 0xB3	; 179
    28f0:	1f 4f       	sbci	r17, 0xFF	; 255
    28f2:	fe 01       	movw	r30, r28
    28f4:	ef 5a       	subi	r30, 0xAF	; 175
    28f6:	ff 4f       	sbci	r31, 0xFF	; 255
    28f8:	60 81       	ld	r22, Z
    28fa:	71 81       	ldd	r23, Z+1	; 0x01
    28fc:	82 81       	ldd	r24, Z+2	; 0x02
    28fe:	93 81       	ldd	r25, Z+3	; 0x03
    2900:	20 e0       	ldi	r18, 0x00	; 0
    2902:	30 e0       	ldi	r19, 0x00	; 0
    2904:	4a e7       	ldi	r20, 0x7A	; 122
    2906:	55 e4       	ldi	r21, 0x45	; 69
    2908:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    290c:	dc 01       	movw	r26, r24
    290e:	cb 01       	movw	r24, r22
    2910:	f8 01       	movw	r30, r16
    2912:	80 83       	st	Z, r24
    2914:	91 83       	std	Z+1, r25	; 0x01
    2916:	a2 83       	std	Z+2, r26	; 0x02
    2918:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    291a:	fe 01       	movw	r30, r28
    291c:	e3 5b       	subi	r30, 0xB3	; 179
    291e:	ff 4f       	sbci	r31, 0xFF	; 255
    2920:	60 81       	ld	r22, Z
    2922:	71 81       	ldd	r23, Z+1	; 0x01
    2924:	82 81       	ldd	r24, Z+2	; 0x02
    2926:	93 81       	ldd	r25, Z+3	; 0x03
    2928:	20 e0       	ldi	r18, 0x00	; 0
    292a:	30 e0       	ldi	r19, 0x00	; 0
    292c:	40 e8       	ldi	r20, 0x80	; 128
    292e:	5f e3       	ldi	r21, 0x3F	; 63
    2930:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2934:	88 23       	and	r24, r24
    2936:	44 f4       	brge	.+16     	; 0x2948 <LCD_enuWriteNLatch+0x136>
		__ticks = 1;
    2938:	fe 01       	movw	r30, r28
    293a:	e5 5b       	subi	r30, 0xB5	; 181
    293c:	ff 4f       	sbci	r31, 0xFF	; 255
    293e:	81 e0       	ldi	r24, 0x01	; 1
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	91 83       	std	Z+1, r25	; 0x01
    2944:	80 83       	st	Z, r24
    2946:	64 c0       	rjmp	.+200    	; 0x2a10 <LCD_enuWriteNLatch+0x1fe>
	else if (__tmp > 65535)
    2948:	fe 01       	movw	r30, r28
    294a:	e3 5b       	subi	r30, 0xB3	; 179
    294c:	ff 4f       	sbci	r31, 0xFF	; 255
    294e:	60 81       	ld	r22, Z
    2950:	71 81       	ldd	r23, Z+1	; 0x01
    2952:	82 81       	ldd	r24, Z+2	; 0x02
    2954:	93 81       	ldd	r25, Z+3	; 0x03
    2956:	20 e0       	ldi	r18, 0x00	; 0
    2958:	3f ef       	ldi	r19, 0xFF	; 255
    295a:	4f e7       	ldi	r20, 0x7F	; 127
    295c:	57 e4       	ldi	r21, 0x47	; 71
    295e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2962:	18 16       	cp	r1, r24
    2964:	0c f0       	brlt	.+2      	; 0x2968 <LCD_enuWriteNLatch+0x156>
    2966:	43 c0       	rjmp	.+134    	; 0x29ee <LCD_enuWriteNLatch+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2968:	fe 01       	movw	r30, r28
    296a:	ef 5a       	subi	r30, 0xAF	; 175
    296c:	ff 4f       	sbci	r31, 0xFF	; 255
    296e:	60 81       	ld	r22, Z
    2970:	71 81       	ldd	r23, Z+1	; 0x01
    2972:	82 81       	ldd	r24, Z+2	; 0x02
    2974:	93 81       	ldd	r25, Z+3	; 0x03
    2976:	20 e0       	ldi	r18, 0x00	; 0
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	40 e2       	ldi	r20, 0x20	; 32
    297c:	51 e4       	ldi	r21, 0x41	; 65
    297e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2982:	dc 01       	movw	r26, r24
    2984:	cb 01       	movw	r24, r22
    2986:	8e 01       	movw	r16, r28
    2988:	05 5b       	subi	r16, 0xB5	; 181
    298a:	1f 4f       	sbci	r17, 0xFF	; 255
    298c:	bc 01       	movw	r22, r24
    298e:	cd 01       	movw	r24, r26
    2990:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2994:	dc 01       	movw	r26, r24
    2996:	cb 01       	movw	r24, r22
    2998:	f8 01       	movw	r30, r16
    299a:	91 83       	std	Z+1, r25	; 0x01
    299c:	80 83       	st	Z, r24
    299e:	1f c0       	rjmp	.+62     	; 0x29de <LCD_enuWriteNLatch+0x1cc>
    29a0:	fe 01       	movw	r30, r28
    29a2:	e7 5b       	subi	r30, 0xB7	; 183
    29a4:	ff 4f       	sbci	r31, 0xFF	; 255
    29a6:	80 e9       	ldi	r24, 0x90	; 144
    29a8:	91 e0       	ldi	r25, 0x01	; 1
    29aa:	91 83       	std	Z+1, r25	; 0x01
    29ac:	80 83       	st	Z, r24
    29ae:	fe 01       	movw	r30, r28
    29b0:	e7 5b       	subi	r30, 0xB7	; 183
    29b2:	ff 4f       	sbci	r31, 0xFF	; 255
    29b4:	80 81       	ld	r24, Z
    29b6:	91 81       	ldd	r25, Z+1	; 0x01
    29b8:	01 97       	sbiw	r24, 0x01	; 1
    29ba:	f1 f7       	brne	.-4      	; 0x29b8 <LCD_enuWriteNLatch+0x1a6>
    29bc:	fe 01       	movw	r30, r28
    29be:	e7 5b       	subi	r30, 0xB7	; 183
    29c0:	ff 4f       	sbci	r31, 0xFF	; 255
    29c2:	91 83       	std	Z+1, r25	; 0x01
    29c4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29c6:	de 01       	movw	r26, r28
    29c8:	a5 5b       	subi	r26, 0xB5	; 181
    29ca:	bf 4f       	sbci	r27, 0xFF	; 255
    29cc:	fe 01       	movw	r30, r28
    29ce:	e5 5b       	subi	r30, 0xB5	; 181
    29d0:	ff 4f       	sbci	r31, 0xFF	; 255
    29d2:	80 81       	ld	r24, Z
    29d4:	91 81       	ldd	r25, Z+1	; 0x01
    29d6:	01 97       	sbiw	r24, 0x01	; 1
    29d8:	11 96       	adiw	r26, 0x01	; 1
    29da:	9c 93       	st	X, r25
    29dc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29de:	fe 01       	movw	r30, r28
    29e0:	e5 5b       	subi	r30, 0xB5	; 181
    29e2:	ff 4f       	sbci	r31, 0xFF	; 255
    29e4:	80 81       	ld	r24, Z
    29e6:	91 81       	ldd	r25, Z+1	; 0x01
    29e8:	00 97       	sbiw	r24, 0x00	; 0
    29ea:	d1 f6       	brne	.-76     	; 0x29a0 <LCD_enuWriteNLatch+0x18e>
    29ec:	27 c0       	rjmp	.+78     	; 0x2a3c <LCD_enuWriteNLatch+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ee:	8e 01       	movw	r16, r28
    29f0:	05 5b       	subi	r16, 0xB5	; 181
    29f2:	1f 4f       	sbci	r17, 0xFF	; 255
    29f4:	fe 01       	movw	r30, r28
    29f6:	e3 5b       	subi	r30, 0xB3	; 179
    29f8:	ff 4f       	sbci	r31, 0xFF	; 255
    29fa:	60 81       	ld	r22, Z
    29fc:	71 81       	ldd	r23, Z+1	; 0x01
    29fe:	82 81       	ldd	r24, Z+2	; 0x02
    2a00:	93 81       	ldd	r25, Z+3	; 0x03
    2a02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a06:	dc 01       	movw	r26, r24
    2a08:	cb 01       	movw	r24, r22
    2a0a:	f8 01       	movw	r30, r16
    2a0c:	91 83       	std	Z+1, r25	; 0x01
    2a0e:	80 83       	st	Z, r24
    2a10:	de 01       	movw	r26, r28
    2a12:	a9 5b       	subi	r26, 0xB9	; 185
    2a14:	bf 4f       	sbci	r27, 0xFF	; 255
    2a16:	fe 01       	movw	r30, r28
    2a18:	e5 5b       	subi	r30, 0xB5	; 181
    2a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1c:	80 81       	ld	r24, Z
    2a1e:	91 81       	ldd	r25, Z+1	; 0x01
    2a20:	8d 93       	st	X+, r24
    2a22:	9c 93       	st	X, r25
    2a24:	fe 01       	movw	r30, r28
    2a26:	e9 5b       	subi	r30, 0xB9	; 185
    2a28:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2a:	80 81       	ld	r24, Z
    2a2c:	91 81       	ldd	r25, Z+1	; 0x01
    2a2e:	01 97       	sbiw	r24, 0x01	; 1
    2a30:	f1 f7       	brne	.-4      	; 0x2a2e <LCD_enuWriteNLatch+0x21c>
    2a32:	fe 01       	movw	r30, r28
    2a34:	e9 5b       	subi	r30, 0xB9	; 185
    2a36:	ff 4f       	sbci	r31, 0xFF	; 255
    2a38:	91 83       	std	Z+1, r25	; 0x01
    2a3a:	80 83       	st	Z, r24
			_delay_ms(5);
			DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
    2a3c:	80 e0       	ldi	r24, 0x00	; 0
    2a3e:	61 e0       	ldi	r22, 0x01	; 1
    2a40:	40 e0       	ldi	r20, 0x00	; 0
    2a42:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_enuSetPinValue>
    2a46:	fe 01       	movw	r30, r28
    2a48:	ed 5b       	subi	r30, 0xBD	; 189
    2a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4c:	80 e0       	ldi	r24, 0x00	; 0
    2a4e:	90 e0       	ldi	r25, 0x00	; 0
    2a50:	a0 ea       	ldi	r26, 0xA0	; 160
    2a52:	b0 e4       	ldi	r27, 0x40	; 64
    2a54:	80 83       	st	Z, r24
    2a56:	91 83       	std	Z+1, r25	; 0x01
    2a58:	a2 83       	std	Z+2, r26	; 0x02
    2a5a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a5c:	8e 01       	movw	r16, r28
    2a5e:	01 5c       	subi	r16, 0xC1	; 193
    2a60:	1f 4f       	sbci	r17, 0xFF	; 255
    2a62:	fe 01       	movw	r30, r28
    2a64:	ed 5b       	subi	r30, 0xBD	; 189
    2a66:	ff 4f       	sbci	r31, 0xFF	; 255
    2a68:	60 81       	ld	r22, Z
    2a6a:	71 81       	ldd	r23, Z+1	; 0x01
    2a6c:	82 81       	ldd	r24, Z+2	; 0x02
    2a6e:	93 81       	ldd	r25, Z+3	; 0x03
    2a70:	20 e0       	ldi	r18, 0x00	; 0
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	4a e7       	ldi	r20, 0x7A	; 122
    2a76:	55 e4       	ldi	r21, 0x45	; 69
    2a78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a7c:	dc 01       	movw	r26, r24
    2a7e:	cb 01       	movw	r24, r22
    2a80:	f8 01       	movw	r30, r16
    2a82:	80 83       	st	Z, r24
    2a84:	91 83       	std	Z+1, r25	; 0x01
    2a86:	a2 83       	std	Z+2, r26	; 0x02
    2a88:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a8a:	fe 01       	movw	r30, r28
    2a8c:	ff 96       	adiw	r30, 0x3f	; 63
    2a8e:	60 81       	ld	r22, Z
    2a90:	71 81       	ldd	r23, Z+1	; 0x01
    2a92:	82 81       	ldd	r24, Z+2	; 0x02
    2a94:	93 81       	ldd	r25, Z+3	; 0x03
    2a96:	20 e0       	ldi	r18, 0x00	; 0
    2a98:	30 e0       	ldi	r19, 0x00	; 0
    2a9a:	40 e8       	ldi	r20, 0x80	; 128
    2a9c:	5f e3       	ldi	r21, 0x3F	; 63
    2a9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2aa2:	88 23       	and	r24, r24
    2aa4:	2c f4       	brge	.+10     	; 0x2ab0 <LCD_enuWriteNLatch+0x29e>
		__ticks = 1;
    2aa6:	81 e0       	ldi	r24, 0x01	; 1
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	9e af       	std	Y+62, r25	; 0x3e
    2aac:	8d af       	std	Y+61, r24	; 0x3d
    2aae:	46 c0       	rjmp	.+140    	; 0x2b3c <LCD_enuWriteNLatch+0x32a>
	else if (__tmp > 65535)
    2ab0:	fe 01       	movw	r30, r28
    2ab2:	ff 96       	adiw	r30, 0x3f	; 63
    2ab4:	60 81       	ld	r22, Z
    2ab6:	71 81       	ldd	r23, Z+1	; 0x01
    2ab8:	82 81       	ldd	r24, Z+2	; 0x02
    2aba:	93 81       	ldd	r25, Z+3	; 0x03
    2abc:	20 e0       	ldi	r18, 0x00	; 0
    2abe:	3f ef       	ldi	r19, 0xFF	; 255
    2ac0:	4f e7       	ldi	r20, 0x7F	; 127
    2ac2:	57 e4       	ldi	r21, 0x47	; 71
    2ac4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ac8:	18 16       	cp	r1, r24
    2aca:	64 f5       	brge	.+88     	; 0x2b24 <LCD_enuWriteNLatch+0x312>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2acc:	fe 01       	movw	r30, r28
    2ace:	ed 5b       	subi	r30, 0xBD	; 189
    2ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad2:	60 81       	ld	r22, Z
    2ad4:	71 81       	ldd	r23, Z+1	; 0x01
    2ad6:	82 81       	ldd	r24, Z+2	; 0x02
    2ad8:	93 81       	ldd	r25, Z+3	; 0x03
    2ada:	20 e0       	ldi	r18, 0x00	; 0
    2adc:	30 e0       	ldi	r19, 0x00	; 0
    2ade:	40 e2       	ldi	r20, 0x20	; 32
    2ae0:	51 e4       	ldi	r21, 0x41	; 65
    2ae2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae6:	dc 01       	movw	r26, r24
    2ae8:	cb 01       	movw	r24, r22
    2aea:	bc 01       	movw	r22, r24
    2aec:	cd 01       	movw	r24, r26
    2aee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af2:	dc 01       	movw	r26, r24
    2af4:	cb 01       	movw	r24, r22
    2af6:	9e af       	std	Y+62, r25	; 0x3e
    2af8:	8d af       	std	Y+61, r24	; 0x3d
    2afa:	0f c0       	rjmp	.+30     	; 0x2b1a <LCD_enuWriteNLatch+0x308>
    2afc:	80 e9       	ldi	r24, 0x90	; 144
    2afe:	91 e0       	ldi	r25, 0x01	; 1
    2b00:	9c af       	std	Y+60, r25	; 0x3c
    2b02:	8b af       	std	Y+59, r24	; 0x3b
    2b04:	8b ad       	ldd	r24, Y+59	; 0x3b
    2b06:	9c ad       	ldd	r25, Y+60	; 0x3c
    2b08:	01 97       	sbiw	r24, 0x01	; 1
    2b0a:	f1 f7       	brne	.-4      	; 0x2b08 <LCD_enuWriteNLatch+0x2f6>
    2b0c:	9c af       	std	Y+60, r25	; 0x3c
    2b0e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b10:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b12:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b14:	01 97       	sbiw	r24, 0x01	; 1
    2b16:	9e af       	std	Y+62, r25	; 0x3e
    2b18:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b1a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b1c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b1e:	00 97       	sbiw	r24, 0x00	; 0
    2b20:	69 f7       	brne	.-38     	; 0x2afc <LCD_enuWriteNLatch+0x2ea>
    2b22:	16 c0       	rjmp	.+44     	; 0x2b50 <LCD_enuWriteNLatch+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b24:	fe 01       	movw	r30, r28
    2b26:	ff 96       	adiw	r30, 0x3f	; 63
    2b28:	60 81       	ld	r22, Z
    2b2a:	71 81       	ldd	r23, Z+1	; 0x01
    2b2c:	82 81       	ldd	r24, Z+2	; 0x02
    2b2e:	93 81       	ldd	r25, Z+3	; 0x03
    2b30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b34:	dc 01       	movw	r26, r24
    2b36:	cb 01       	movw	r24, r22
    2b38:	9e af       	std	Y+62, r25	; 0x3e
    2b3a:	8d af       	std	Y+61, r24	; 0x3d
    2b3c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b3e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b40:	9a af       	std	Y+58, r25	; 0x3a
    2b42:	89 af       	std	Y+57, r24	; 0x39
    2b44:	89 ad       	ldd	r24, Y+57	; 0x39
    2b46:	9a ad       	ldd	r25, Y+58	; 0x3a
    2b48:	01 97       	sbiw	r24, 0x01	; 1
    2b4a:	f1 f7       	brne	.-4      	; 0x2b48 <LCD_enuWriteNLatch+0x336>
    2b4c:	9a af       	std	Y+58, r25	; 0x3a
    2b4e:	89 af       	std	Y+57, r24	; 0x39
		}
	}

#if LCD_MODE == FOUR_BIT //'A' =65=0b 0100  0001

	DIO_enuSetPinValue(D7_PORT, D7_PIN , ((Copy_u8Data>>7)&1));
    2b50:	fe 01       	movw	r30, r28
    2b52:	ea 5a       	subi	r30, 0xAA	; 170
    2b54:	ff 4f       	sbci	r31, 0xFF	; 255
    2b56:	80 81       	ld	r24, Z
    2b58:	98 2f       	mov	r25, r24
    2b5a:	99 1f       	adc	r25, r25
    2b5c:	99 27       	eor	r25, r25
    2b5e:	99 1f       	adc	r25, r25
    2b60:	80 e0       	ldi	r24, 0x00	; 0
    2b62:	67 e0       	ldi	r22, 0x07	; 7
    2b64:	49 2f       	mov	r20, r25
    2b66:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT, D6_PIN , ((Copy_u8Data>>6)&1));
    2b6a:	fe 01       	movw	r30, r28
    2b6c:	ea 5a       	subi	r30, 0xAA	; 170
    2b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b70:	80 81       	ld	r24, Z
    2b72:	82 95       	swap	r24
    2b74:	86 95       	lsr	r24
    2b76:	86 95       	lsr	r24
    2b78:	83 70       	andi	r24, 0x03	; 3
    2b7a:	98 2f       	mov	r25, r24
    2b7c:	91 70       	andi	r25, 0x01	; 1
    2b7e:	80 e0       	ldi	r24, 0x00	; 0
    2b80:	66 e0       	ldi	r22, 0x06	; 6
    2b82:	49 2f       	mov	r20, r25
    2b84:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT, D5_PIN , ((Copy_u8Data>>5)&1));
    2b88:	fe 01       	movw	r30, r28
    2b8a:	ea 5a       	subi	r30, 0xAA	; 170
    2b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8e:	80 81       	ld	r24, Z
    2b90:	82 95       	swap	r24
    2b92:	86 95       	lsr	r24
    2b94:	87 70       	andi	r24, 0x07	; 7
    2b96:	98 2f       	mov	r25, r24
    2b98:	91 70       	andi	r25, 0x01	; 1
    2b9a:	80 e0       	ldi	r24, 0x00	; 0
    2b9c:	65 e0       	ldi	r22, 0x05	; 5
    2b9e:	49 2f       	mov	r20, r25
    2ba0:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT, D4_PIN , ((Copy_u8Data>>4)&1));
    2ba4:	fe 01       	movw	r30, r28
    2ba6:	ea 5a       	subi	r30, 0xAA	; 170
    2ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    2baa:	80 81       	ld	r24, Z
    2bac:	82 95       	swap	r24
    2bae:	8f 70       	andi	r24, 0x0F	; 15
    2bb0:	98 2f       	mov	r25, r24
    2bb2:	91 70       	andi	r25, 0x01	; 1
    2bb4:	80 e0       	ldi	r24, 0x00	; 0
    2bb6:	64 e0       	ldi	r22, 0x04	; 4
    2bb8:	49 2f       	mov	r20, r25
    2bba:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(EN_PORT, EN_PIN , DIO_u8HIGH);
    2bbe:	80 e0       	ldi	r24, 0x00	; 0
    2bc0:	61 e0       	ldi	r22, 0x01	; 1
    2bc2:	41 e0       	ldi	r20, 0x01	; 1
    2bc4:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_enuSetPinValue>
    2bc8:	80 e0       	ldi	r24, 0x00	; 0
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	a0 ea       	ldi	r26, 0xA0	; 160
    2bce:	b0 e4       	ldi	r27, 0x40	; 64
    2bd0:	8d ab       	std	Y+53, r24	; 0x35
    2bd2:	9e ab       	std	Y+54, r25	; 0x36
    2bd4:	af ab       	std	Y+55, r26	; 0x37
    2bd6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bd8:	6d a9       	ldd	r22, Y+53	; 0x35
    2bda:	7e a9       	ldd	r23, Y+54	; 0x36
    2bdc:	8f a9       	ldd	r24, Y+55	; 0x37
    2bde:	98 ad       	ldd	r25, Y+56	; 0x38
    2be0:	20 e0       	ldi	r18, 0x00	; 0
    2be2:	30 e0       	ldi	r19, 0x00	; 0
    2be4:	4a e7       	ldi	r20, 0x7A	; 122
    2be6:	55 e4       	ldi	r21, 0x45	; 69
    2be8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bec:	dc 01       	movw	r26, r24
    2bee:	cb 01       	movw	r24, r22
    2bf0:	89 ab       	std	Y+49, r24	; 0x31
    2bf2:	9a ab       	std	Y+50, r25	; 0x32
    2bf4:	ab ab       	std	Y+51, r26	; 0x33
    2bf6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2bf8:	69 a9       	ldd	r22, Y+49	; 0x31
    2bfa:	7a a9       	ldd	r23, Y+50	; 0x32
    2bfc:	8b a9       	ldd	r24, Y+51	; 0x33
    2bfe:	9c a9       	ldd	r25, Y+52	; 0x34
    2c00:	20 e0       	ldi	r18, 0x00	; 0
    2c02:	30 e0       	ldi	r19, 0x00	; 0
    2c04:	40 e8       	ldi	r20, 0x80	; 128
    2c06:	5f e3       	ldi	r21, 0x3F	; 63
    2c08:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c0c:	88 23       	and	r24, r24
    2c0e:	2c f4       	brge	.+10     	; 0x2c1a <LCD_enuWriteNLatch+0x408>
		__ticks = 1;
    2c10:	81 e0       	ldi	r24, 0x01	; 1
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	98 ab       	std	Y+48, r25	; 0x30
    2c16:	8f a7       	std	Y+47, r24	; 0x2f
    2c18:	3f c0       	rjmp	.+126    	; 0x2c98 <LCD_enuWriteNLatch+0x486>
	else if (__tmp > 65535)
    2c1a:	69 a9       	ldd	r22, Y+49	; 0x31
    2c1c:	7a a9       	ldd	r23, Y+50	; 0x32
    2c1e:	8b a9       	ldd	r24, Y+51	; 0x33
    2c20:	9c a9       	ldd	r25, Y+52	; 0x34
    2c22:	20 e0       	ldi	r18, 0x00	; 0
    2c24:	3f ef       	ldi	r19, 0xFF	; 255
    2c26:	4f e7       	ldi	r20, 0x7F	; 127
    2c28:	57 e4       	ldi	r21, 0x47	; 71
    2c2a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c2e:	18 16       	cp	r1, r24
    2c30:	4c f5       	brge	.+82     	; 0x2c84 <LCD_enuWriteNLatch+0x472>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c32:	6d a9       	ldd	r22, Y+53	; 0x35
    2c34:	7e a9       	ldd	r23, Y+54	; 0x36
    2c36:	8f a9       	ldd	r24, Y+55	; 0x37
    2c38:	98 ad       	ldd	r25, Y+56	; 0x38
    2c3a:	20 e0       	ldi	r18, 0x00	; 0
    2c3c:	30 e0       	ldi	r19, 0x00	; 0
    2c3e:	40 e2       	ldi	r20, 0x20	; 32
    2c40:	51 e4       	ldi	r21, 0x41	; 65
    2c42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c46:	dc 01       	movw	r26, r24
    2c48:	cb 01       	movw	r24, r22
    2c4a:	bc 01       	movw	r22, r24
    2c4c:	cd 01       	movw	r24, r26
    2c4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c52:	dc 01       	movw	r26, r24
    2c54:	cb 01       	movw	r24, r22
    2c56:	98 ab       	std	Y+48, r25	; 0x30
    2c58:	8f a7       	std	Y+47, r24	; 0x2f
    2c5a:	0f c0       	rjmp	.+30     	; 0x2c7a <LCD_enuWriteNLatch+0x468>
    2c5c:	80 e9       	ldi	r24, 0x90	; 144
    2c5e:	91 e0       	ldi	r25, 0x01	; 1
    2c60:	9e a7       	std	Y+46, r25	; 0x2e
    2c62:	8d a7       	std	Y+45, r24	; 0x2d
    2c64:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c66:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c68:	01 97       	sbiw	r24, 0x01	; 1
    2c6a:	f1 f7       	brne	.-4      	; 0x2c68 <LCD_enuWriteNLatch+0x456>
    2c6c:	9e a7       	std	Y+46, r25	; 0x2e
    2c6e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c70:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c72:	98 a9       	ldd	r25, Y+48	; 0x30
    2c74:	01 97       	sbiw	r24, 0x01	; 1
    2c76:	98 ab       	std	Y+48, r25	; 0x30
    2c78:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c7a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c7c:	98 a9       	ldd	r25, Y+48	; 0x30
    2c7e:	00 97       	sbiw	r24, 0x00	; 0
    2c80:	69 f7       	brne	.-38     	; 0x2c5c <LCD_enuWriteNLatch+0x44a>
    2c82:	14 c0       	rjmp	.+40     	; 0x2cac <LCD_enuWriteNLatch+0x49a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c84:	69 a9       	ldd	r22, Y+49	; 0x31
    2c86:	7a a9       	ldd	r23, Y+50	; 0x32
    2c88:	8b a9       	ldd	r24, Y+51	; 0x33
    2c8a:	9c a9       	ldd	r25, Y+52	; 0x34
    2c8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c90:	dc 01       	movw	r26, r24
    2c92:	cb 01       	movw	r24, r22
    2c94:	98 ab       	std	Y+48, r25	; 0x30
    2c96:	8f a7       	std	Y+47, r24	; 0x2f
    2c98:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c9a:	98 a9       	ldd	r25, Y+48	; 0x30
    2c9c:	9c a7       	std	Y+44, r25	; 0x2c
    2c9e:	8b a7       	std	Y+43, r24	; 0x2b
    2ca0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ca2:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ca4:	01 97       	sbiw	r24, 0x01	; 1
    2ca6:	f1 f7       	brne	.-4      	; 0x2ca4 <LCD_enuWriteNLatch+0x492>
    2ca8:	9c a7       	std	Y+44, r25	; 0x2c
    2caa:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5);
	DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
    2cac:	80 e0       	ldi	r24, 0x00	; 0
    2cae:	61 e0       	ldi	r22, 0x01	; 1
    2cb0:	40 e0       	ldi	r20, 0x00	; 0
    2cb2:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_enuSetPinValue>
    2cb6:	80 e0       	ldi	r24, 0x00	; 0
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	a0 ea       	ldi	r26, 0xA0	; 160
    2cbc:	b0 e4       	ldi	r27, 0x40	; 64
    2cbe:	8f a3       	std	Y+39, r24	; 0x27
    2cc0:	98 a7       	std	Y+40, r25	; 0x28
    2cc2:	a9 a7       	std	Y+41, r26	; 0x29
    2cc4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cc6:	6f a1       	ldd	r22, Y+39	; 0x27
    2cc8:	78 a5       	ldd	r23, Y+40	; 0x28
    2cca:	89 a5       	ldd	r24, Y+41	; 0x29
    2ccc:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cce:	20 e0       	ldi	r18, 0x00	; 0
    2cd0:	30 e0       	ldi	r19, 0x00	; 0
    2cd2:	4a e7       	ldi	r20, 0x7A	; 122
    2cd4:	55 e4       	ldi	r21, 0x45	; 69
    2cd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cda:	dc 01       	movw	r26, r24
    2cdc:	cb 01       	movw	r24, r22
    2cde:	8b a3       	std	Y+35, r24	; 0x23
    2ce0:	9c a3       	std	Y+36, r25	; 0x24
    2ce2:	ad a3       	std	Y+37, r26	; 0x25
    2ce4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2ce6:	6b a1       	ldd	r22, Y+35	; 0x23
    2ce8:	7c a1       	ldd	r23, Y+36	; 0x24
    2cea:	8d a1       	ldd	r24, Y+37	; 0x25
    2cec:	9e a1       	ldd	r25, Y+38	; 0x26
    2cee:	20 e0       	ldi	r18, 0x00	; 0
    2cf0:	30 e0       	ldi	r19, 0x00	; 0
    2cf2:	40 e8       	ldi	r20, 0x80	; 128
    2cf4:	5f e3       	ldi	r21, 0x3F	; 63
    2cf6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cfa:	88 23       	and	r24, r24
    2cfc:	2c f4       	brge	.+10     	; 0x2d08 <LCD_enuWriteNLatch+0x4f6>
		__ticks = 1;
    2cfe:	81 e0       	ldi	r24, 0x01	; 1
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	9a a3       	std	Y+34, r25	; 0x22
    2d04:	89 a3       	std	Y+33, r24	; 0x21
    2d06:	3f c0       	rjmp	.+126    	; 0x2d86 <LCD_enuWriteNLatch+0x574>
	else if (__tmp > 65535)
    2d08:	6b a1       	ldd	r22, Y+35	; 0x23
    2d0a:	7c a1       	ldd	r23, Y+36	; 0x24
    2d0c:	8d a1       	ldd	r24, Y+37	; 0x25
    2d0e:	9e a1       	ldd	r25, Y+38	; 0x26
    2d10:	20 e0       	ldi	r18, 0x00	; 0
    2d12:	3f ef       	ldi	r19, 0xFF	; 255
    2d14:	4f e7       	ldi	r20, 0x7F	; 127
    2d16:	57 e4       	ldi	r21, 0x47	; 71
    2d18:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d1c:	18 16       	cp	r1, r24
    2d1e:	4c f5       	brge	.+82     	; 0x2d72 <LCD_enuWriteNLatch+0x560>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d20:	6f a1       	ldd	r22, Y+39	; 0x27
    2d22:	78 a5       	ldd	r23, Y+40	; 0x28
    2d24:	89 a5       	ldd	r24, Y+41	; 0x29
    2d26:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d28:	20 e0       	ldi	r18, 0x00	; 0
    2d2a:	30 e0       	ldi	r19, 0x00	; 0
    2d2c:	40 e2       	ldi	r20, 0x20	; 32
    2d2e:	51 e4       	ldi	r21, 0x41	; 65
    2d30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d34:	dc 01       	movw	r26, r24
    2d36:	cb 01       	movw	r24, r22
    2d38:	bc 01       	movw	r22, r24
    2d3a:	cd 01       	movw	r24, r26
    2d3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d40:	dc 01       	movw	r26, r24
    2d42:	cb 01       	movw	r24, r22
    2d44:	9a a3       	std	Y+34, r25	; 0x22
    2d46:	89 a3       	std	Y+33, r24	; 0x21
    2d48:	0f c0       	rjmp	.+30     	; 0x2d68 <LCD_enuWriteNLatch+0x556>
    2d4a:	80 e9       	ldi	r24, 0x90	; 144
    2d4c:	91 e0       	ldi	r25, 0x01	; 1
    2d4e:	98 a3       	std	Y+32, r25	; 0x20
    2d50:	8f 8f       	std	Y+31, r24	; 0x1f
    2d52:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d54:	98 a1       	ldd	r25, Y+32	; 0x20
    2d56:	01 97       	sbiw	r24, 0x01	; 1
    2d58:	f1 f7       	brne	.-4      	; 0x2d56 <LCD_enuWriteNLatch+0x544>
    2d5a:	98 a3       	std	Y+32, r25	; 0x20
    2d5c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d5e:	89 a1       	ldd	r24, Y+33	; 0x21
    2d60:	9a a1       	ldd	r25, Y+34	; 0x22
    2d62:	01 97       	sbiw	r24, 0x01	; 1
    2d64:	9a a3       	std	Y+34, r25	; 0x22
    2d66:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d68:	89 a1       	ldd	r24, Y+33	; 0x21
    2d6a:	9a a1       	ldd	r25, Y+34	; 0x22
    2d6c:	00 97       	sbiw	r24, 0x00	; 0
    2d6e:	69 f7       	brne	.-38     	; 0x2d4a <LCD_enuWriteNLatch+0x538>
    2d70:	14 c0       	rjmp	.+40     	; 0x2d9a <LCD_enuWriteNLatch+0x588>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d72:	6b a1       	ldd	r22, Y+35	; 0x23
    2d74:	7c a1       	ldd	r23, Y+36	; 0x24
    2d76:	8d a1       	ldd	r24, Y+37	; 0x25
    2d78:	9e a1       	ldd	r25, Y+38	; 0x26
    2d7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d7e:	dc 01       	movw	r26, r24
    2d80:	cb 01       	movw	r24, r22
    2d82:	9a a3       	std	Y+34, r25	; 0x22
    2d84:	89 a3       	std	Y+33, r24	; 0x21
    2d86:	89 a1       	ldd	r24, Y+33	; 0x21
    2d88:	9a a1       	ldd	r25, Y+34	; 0x22
    2d8a:	9e 8f       	std	Y+30, r25	; 0x1e
    2d8c:	8d 8f       	std	Y+29, r24	; 0x1d
    2d8e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d90:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d92:	01 97       	sbiw	r24, 0x01	; 1
    2d94:	f1 f7       	brne	.-4      	; 0x2d92 <LCD_enuWriteNLatch+0x580>
    2d96:	9e 8f       	std	Y+30, r25	; 0x1e
    2d98:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);


	DIO_enuSetPinValue(D7_PORT, D7_PIN , ((Copy_u8Data>>3)&1));
    2d9a:	fe 01       	movw	r30, r28
    2d9c:	ea 5a       	subi	r30, 0xAA	; 170
    2d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2da0:	80 81       	ld	r24, Z
    2da2:	86 95       	lsr	r24
    2da4:	86 95       	lsr	r24
    2da6:	86 95       	lsr	r24
    2da8:	98 2f       	mov	r25, r24
    2daa:	91 70       	andi	r25, 0x01	; 1
    2dac:	80 e0       	ldi	r24, 0x00	; 0
    2dae:	67 e0       	ldi	r22, 0x07	; 7
    2db0:	49 2f       	mov	r20, r25
    2db2:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT, D6_PIN , ((Copy_u8Data>>2)&1));
    2db6:	fe 01       	movw	r30, r28
    2db8:	ea 5a       	subi	r30, 0xAA	; 170
    2dba:	ff 4f       	sbci	r31, 0xFF	; 255
    2dbc:	80 81       	ld	r24, Z
    2dbe:	86 95       	lsr	r24
    2dc0:	86 95       	lsr	r24
    2dc2:	98 2f       	mov	r25, r24
    2dc4:	91 70       	andi	r25, 0x01	; 1
    2dc6:	80 e0       	ldi	r24, 0x00	; 0
    2dc8:	66 e0       	ldi	r22, 0x06	; 6
    2dca:	49 2f       	mov	r20, r25
    2dcc:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT, D5_PIN , ((Copy_u8Data>>1)&1));
    2dd0:	fe 01       	movw	r30, r28
    2dd2:	ea 5a       	subi	r30, 0xAA	; 170
    2dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd6:	80 81       	ld	r24, Z
    2dd8:	86 95       	lsr	r24
    2dda:	98 2f       	mov	r25, r24
    2ddc:	91 70       	andi	r25, 0x01	; 1
    2dde:	80 e0       	ldi	r24, 0x00	; 0
    2de0:	65 e0       	ldi	r22, 0x05	; 5
    2de2:	49 2f       	mov	r20, r25
    2de4:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT, D4_PIN , ((Copy_u8Data>>0)&1));
    2de8:	fe 01       	movw	r30, r28
    2dea:	ea 5a       	subi	r30, 0xAA	; 170
    2dec:	ff 4f       	sbci	r31, 0xFF	; 255
    2dee:	80 81       	ld	r24, Z
    2df0:	98 2f       	mov	r25, r24
    2df2:	91 70       	andi	r25, 0x01	; 1
    2df4:	80 e0       	ldi	r24, 0x00	; 0
    2df6:	64 e0       	ldi	r22, 0x04	; 4
    2df8:	49 2f       	mov	r20, r25
    2dfa:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(EN_PORT, EN_PIN , DIO_u8HIGH);
    2dfe:	80 e0       	ldi	r24, 0x00	; 0
    2e00:	61 e0       	ldi	r22, 0x01	; 1
    2e02:	41 e0       	ldi	r20, 0x01	; 1
    2e04:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_enuSetPinValue>
    2e08:	80 e0       	ldi	r24, 0x00	; 0
    2e0a:	90 e0       	ldi	r25, 0x00	; 0
    2e0c:	a0 ea       	ldi	r26, 0xA0	; 160
    2e0e:	b0 e4       	ldi	r27, 0x40	; 64
    2e10:	89 8f       	std	Y+25, r24	; 0x19
    2e12:	9a 8f       	std	Y+26, r25	; 0x1a
    2e14:	ab 8f       	std	Y+27, r26	; 0x1b
    2e16:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e18:	69 8d       	ldd	r22, Y+25	; 0x19
    2e1a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e20:	20 e0       	ldi	r18, 0x00	; 0
    2e22:	30 e0       	ldi	r19, 0x00	; 0
    2e24:	4a e7       	ldi	r20, 0x7A	; 122
    2e26:	55 e4       	ldi	r21, 0x45	; 69
    2e28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e2c:	dc 01       	movw	r26, r24
    2e2e:	cb 01       	movw	r24, r22
    2e30:	8d 8b       	std	Y+21, r24	; 0x15
    2e32:	9e 8b       	std	Y+22, r25	; 0x16
    2e34:	af 8b       	std	Y+23, r26	; 0x17
    2e36:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e38:	6d 89       	ldd	r22, Y+21	; 0x15
    2e3a:	7e 89       	ldd	r23, Y+22	; 0x16
    2e3c:	8f 89       	ldd	r24, Y+23	; 0x17
    2e3e:	98 8d       	ldd	r25, Y+24	; 0x18
    2e40:	20 e0       	ldi	r18, 0x00	; 0
    2e42:	30 e0       	ldi	r19, 0x00	; 0
    2e44:	40 e8       	ldi	r20, 0x80	; 128
    2e46:	5f e3       	ldi	r21, 0x3F	; 63
    2e48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e4c:	88 23       	and	r24, r24
    2e4e:	2c f4       	brge	.+10     	; 0x2e5a <LCD_enuWriteNLatch+0x648>
		__ticks = 1;
    2e50:	81 e0       	ldi	r24, 0x01	; 1
    2e52:	90 e0       	ldi	r25, 0x00	; 0
    2e54:	9c 8b       	std	Y+20, r25	; 0x14
    2e56:	8b 8b       	std	Y+19, r24	; 0x13
    2e58:	3f c0       	rjmp	.+126    	; 0x2ed8 <LCD_enuWriteNLatch+0x6c6>
	else if (__tmp > 65535)
    2e5a:	6d 89       	ldd	r22, Y+21	; 0x15
    2e5c:	7e 89       	ldd	r23, Y+22	; 0x16
    2e5e:	8f 89       	ldd	r24, Y+23	; 0x17
    2e60:	98 8d       	ldd	r25, Y+24	; 0x18
    2e62:	20 e0       	ldi	r18, 0x00	; 0
    2e64:	3f ef       	ldi	r19, 0xFF	; 255
    2e66:	4f e7       	ldi	r20, 0x7F	; 127
    2e68:	57 e4       	ldi	r21, 0x47	; 71
    2e6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e6e:	18 16       	cp	r1, r24
    2e70:	4c f5       	brge	.+82     	; 0x2ec4 <LCD_enuWriteNLatch+0x6b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e72:	69 8d       	ldd	r22, Y+25	; 0x19
    2e74:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e7a:	20 e0       	ldi	r18, 0x00	; 0
    2e7c:	30 e0       	ldi	r19, 0x00	; 0
    2e7e:	40 e2       	ldi	r20, 0x20	; 32
    2e80:	51 e4       	ldi	r21, 0x41	; 65
    2e82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e86:	dc 01       	movw	r26, r24
    2e88:	cb 01       	movw	r24, r22
    2e8a:	bc 01       	movw	r22, r24
    2e8c:	cd 01       	movw	r24, r26
    2e8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e92:	dc 01       	movw	r26, r24
    2e94:	cb 01       	movw	r24, r22
    2e96:	9c 8b       	std	Y+20, r25	; 0x14
    2e98:	8b 8b       	std	Y+19, r24	; 0x13
    2e9a:	0f c0       	rjmp	.+30     	; 0x2eba <LCD_enuWriteNLatch+0x6a8>
    2e9c:	80 e9       	ldi	r24, 0x90	; 144
    2e9e:	91 e0       	ldi	r25, 0x01	; 1
    2ea0:	9a 8b       	std	Y+18, r25	; 0x12
    2ea2:	89 8b       	std	Y+17, r24	; 0x11
    2ea4:	89 89       	ldd	r24, Y+17	; 0x11
    2ea6:	9a 89       	ldd	r25, Y+18	; 0x12
    2ea8:	01 97       	sbiw	r24, 0x01	; 1
    2eaa:	f1 f7       	brne	.-4      	; 0x2ea8 <LCD_enuWriteNLatch+0x696>
    2eac:	9a 8b       	std	Y+18, r25	; 0x12
    2eae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eb0:	8b 89       	ldd	r24, Y+19	; 0x13
    2eb2:	9c 89       	ldd	r25, Y+20	; 0x14
    2eb4:	01 97       	sbiw	r24, 0x01	; 1
    2eb6:	9c 8b       	std	Y+20, r25	; 0x14
    2eb8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eba:	8b 89       	ldd	r24, Y+19	; 0x13
    2ebc:	9c 89       	ldd	r25, Y+20	; 0x14
    2ebe:	00 97       	sbiw	r24, 0x00	; 0
    2ec0:	69 f7       	brne	.-38     	; 0x2e9c <LCD_enuWriteNLatch+0x68a>
    2ec2:	14 c0       	rjmp	.+40     	; 0x2eec <LCD_enuWriteNLatch+0x6da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ec4:	6d 89       	ldd	r22, Y+21	; 0x15
    2ec6:	7e 89       	ldd	r23, Y+22	; 0x16
    2ec8:	8f 89       	ldd	r24, Y+23	; 0x17
    2eca:	98 8d       	ldd	r25, Y+24	; 0x18
    2ecc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed0:	dc 01       	movw	r26, r24
    2ed2:	cb 01       	movw	r24, r22
    2ed4:	9c 8b       	std	Y+20, r25	; 0x14
    2ed6:	8b 8b       	std	Y+19, r24	; 0x13
    2ed8:	8b 89       	ldd	r24, Y+19	; 0x13
    2eda:	9c 89       	ldd	r25, Y+20	; 0x14
    2edc:	98 8b       	std	Y+16, r25	; 0x10
    2ede:	8f 87       	std	Y+15, r24	; 0x0f
    2ee0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ee2:	98 89       	ldd	r25, Y+16	; 0x10
    2ee4:	01 97       	sbiw	r24, 0x01	; 1
    2ee6:	f1 f7       	brne	.-4      	; 0x2ee4 <LCD_enuWriteNLatch+0x6d2>
    2ee8:	98 8b       	std	Y+16, r25	; 0x10
    2eea:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
    2eec:	80 e0       	ldi	r24, 0x00	; 0
    2eee:	61 e0       	ldi	r22, 0x01	; 1
    2ef0:	40 e0       	ldi	r20, 0x00	; 0
    2ef2:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_enuSetPinValue>
    2ef6:	80 e0       	ldi	r24, 0x00	; 0
    2ef8:	90 e0       	ldi	r25, 0x00	; 0
    2efa:	a0 ea       	ldi	r26, 0xA0	; 160
    2efc:	b0 e4       	ldi	r27, 0x40	; 64
    2efe:	8b 87       	std	Y+11, r24	; 0x0b
    2f00:	9c 87       	std	Y+12, r25	; 0x0c
    2f02:	ad 87       	std	Y+13, r26	; 0x0d
    2f04:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f06:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f08:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f0e:	20 e0       	ldi	r18, 0x00	; 0
    2f10:	30 e0       	ldi	r19, 0x00	; 0
    2f12:	4a e7       	ldi	r20, 0x7A	; 122
    2f14:	55 e4       	ldi	r21, 0x45	; 69
    2f16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f1a:	dc 01       	movw	r26, r24
    2f1c:	cb 01       	movw	r24, r22
    2f1e:	8f 83       	std	Y+7, r24	; 0x07
    2f20:	98 87       	std	Y+8, r25	; 0x08
    2f22:	a9 87       	std	Y+9, r26	; 0x09
    2f24:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f26:	6f 81       	ldd	r22, Y+7	; 0x07
    2f28:	78 85       	ldd	r23, Y+8	; 0x08
    2f2a:	89 85       	ldd	r24, Y+9	; 0x09
    2f2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f2e:	20 e0       	ldi	r18, 0x00	; 0
    2f30:	30 e0       	ldi	r19, 0x00	; 0
    2f32:	40 e8       	ldi	r20, 0x80	; 128
    2f34:	5f e3       	ldi	r21, 0x3F	; 63
    2f36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f3a:	88 23       	and	r24, r24
    2f3c:	2c f4       	brge	.+10     	; 0x2f48 <LCD_enuWriteNLatch+0x736>
		__ticks = 1;
    2f3e:	81 e0       	ldi	r24, 0x01	; 1
    2f40:	90 e0       	ldi	r25, 0x00	; 0
    2f42:	9e 83       	std	Y+6, r25	; 0x06
    2f44:	8d 83       	std	Y+5, r24	; 0x05
    2f46:	3f c0       	rjmp	.+126    	; 0x2fc6 <LCD_enuWriteNLatch+0x7b4>
	else if (__tmp > 65535)
    2f48:	6f 81       	ldd	r22, Y+7	; 0x07
    2f4a:	78 85       	ldd	r23, Y+8	; 0x08
    2f4c:	89 85       	ldd	r24, Y+9	; 0x09
    2f4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f50:	20 e0       	ldi	r18, 0x00	; 0
    2f52:	3f ef       	ldi	r19, 0xFF	; 255
    2f54:	4f e7       	ldi	r20, 0x7F	; 127
    2f56:	57 e4       	ldi	r21, 0x47	; 71
    2f58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f5c:	18 16       	cp	r1, r24
    2f5e:	4c f5       	brge	.+82     	; 0x2fb2 <LCD_enuWriteNLatch+0x7a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f60:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f62:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f64:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f66:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f68:	20 e0       	ldi	r18, 0x00	; 0
    2f6a:	30 e0       	ldi	r19, 0x00	; 0
    2f6c:	40 e2       	ldi	r20, 0x20	; 32
    2f6e:	51 e4       	ldi	r21, 0x41	; 65
    2f70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f74:	dc 01       	movw	r26, r24
    2f76:	cb 01       	movw	r24, r22
    2f78:	bc 01       	movw	r22, r24
    2f7a:	cd 01       	movw	r24, r26
    2f7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f80:	dc 01       	movw	r26, r24
    2f82:	cb 01       	movw	r24, r22
    2f84:	9e 83       	std	Y+6, r25	; 0x06
    2f86:	8d 83       	std	Y+5, r24	; 0x05
    2f88:	0f c0       	rjmp	.+30     	; 0x2fa8 <LCD_enuWriteNLatch+0x796>
    2f8a:	80 e9       	ldi	r24, 0x90	; 144
    2f8c:	91 e0       	ldi	r25, 0x01	; 1
    2f8e:	9c 83       	std	Y+4, r25	; 0x04
    2f90:	8b 83       	std	Y+3, r24	; 0x03
    2f92:	8b 81       	ldd	r24, Y+3	; 0x03
    2f94:	9c 81       	ldd	r25, Y+4	; 0x04
    2f96:	01 97       	sbiw	r24, 0x01	; 1
    2f98:	f1 f7       	brne	.-4      	; 0x2f96 <LCD_enuWriteNLatch+0x784>
    2f9a:	9c 83       	std	Y+4, r25	; 0x04
    2f9c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f9e:	8d 81       	ldd	r24, Y+5	; 0x05
    2fa0:	9e 81       	ldd	r25, Y+6	; 0x06
    2fa2:	01 97       	sbiw	r24, 0x01	; 1
    2fa4:	9e 83       	std	Y+6, r25	; 0x06
    2fa6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fa8:	8d 81       	ldd	r24, Y+5	; 0x05
    2faa:	9e 81       	ldd	r25, Y+6	; 0x06
    2fac:	00 97       	sbiw	r24, 0x00	; 0
    2fae:	69 f7       	brne	.-38     	; 0x2f8a <LCD_enuWriteNLatch+0x778>
    2fb0:	14 c0       	rjmp	.+40     	; 0x2fda <LCD_enuWriteNLatch+0x7c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fb2:	6f 81       	ldd	r22, Y+7	; 0x07
    2fb4:	78 85       	ldd	r23, Y+8	; 0x08
    2fb6:	89 85       	ldd	r24, Y+9	; 0x09
    2fb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fbe:	dc 01       	movw	r26, r24
    2fc0:	cb 01       	movw	r24, r22
    2fc2:	9e 83       	std	Y+6, r25	; 0x06
    2fc4:	8d 83       	std	Y+5, r24	; 0x05
    2fc6:	8d 81       	ldd	r24, Y+5	; 0x05
    2fc8:	9e 81       	ldd	r25, Y+6	; 0x06
    2fca:	9a 83       	std	Y+2, r25	; 0x02
    2fcc:	89 83       	std	Y+1, r24	; 0x01
    2fce:	89 81       	ldd	r24, Y+1	; 0x01
    2fd0:	9a 81       	ldd	r25, Y+2	; 0x02
    2fd2:	01 97       	sbiw	r24, 0x01	; 1
    2fd4:	f1 f7       	brne	.-4      	; 0x2fd2 <LCD_enuWriteNLatch+0x7c0>
    2fd6:	9a 83       	std	Y+2, r25	; 0x02
    2fd8:	89 83       	std	Y+1, r24	; 0x01
#else
#error"LCD mode is wrong"
#endif


	return Local_u8ErrorState;
    2fda:	fe 01       	movw	r30, r28
    2fdc:	eb 5a       	subi	r30, 0xAB	; 171
    2fde:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe0:	80 81       	ld	r24, Z
}
    2fe2:	ca 5a       	subi	r28, 0xAA	; 170
    2fe4:	df 4f       	sbci	r29, 0xFF	; 255
    2fe6:	0f b6       	in	r0, 0x3f	; 63
    2fe8:	f8 94       	cli
    2fea:	de bf       	out	0x3e, r29	; 62
    2fec:	0f be       	out	0x3f, r0	; 63
    2fee:	cd bf       	out	0x3d, r28	; 61
    2ff0:	cf 91       	pop	r28
    2ff2:	df 91       	pop	r29
    2ff4:	1f 91       	pop	r17
    2ff6:	0f 91       	pop	r16
    2ff8:	08 95       	ret

00002ffa <LCD_DisplayUser>:
void LCD_DisplayUser(void)
{
    2ffa:	df 93       	push	r29
    2ffc:	cf 93       	push	r28
    2ffe:	0f 92       	push	r0
    3000:	cd b7       	in	r28, 0x3d	; 61
    3002:	de b7       	in	r29, 0x3e	; 62
	u8 key;

	Keypad_enuGetPressedKey(&key);
    3004:	ce 01       	movw	r24, r28
    3006:	01 96       	adiw	r24, 0x01	; 1
    3008:	0e 94 00 10 	call	0x2000	; 0x2000 <Keypad_enuGetPressedKey>

	if (key != KEYPAD_NOT_PRESSED)
    300c:	89 81       	ldd	r24, Y+1	; 0x01
    300e:	8f 3f       	cpi	r24, 0xFF	; 255
    3010:	19 f0       	breq	.+6      	; 0x3018 <LCD_DisplayUser+0x1e>
	{
		LCD_enuSendData(key);
    3012:	89 81       	ldd	r24, Y+1	; 0x01
    3014:	0e 94 b9 13 	call	0x2772	; 0x2772 <LCD_enuSendData>
	}
}
    3018:	0f 90       	pop	r0
    301a:	cf 91       	pop	r28
    301c:	df 91       	pop	r29
    301e:	08 95       	ret

00003020 <LCD_DisplayPassword>:

void LCD_DisplayPassword(void)
{
    3020:	df 93       	push	r29
    3022:	cf 93       	push	r28
    3024:	0f 92       	push	r0
    3026:	cd b7       	in	r28, 0x3d	; 61
    3028:	de b7       	in	r29, 0x3e	; 62
		u8 key;

		Keypad_enuGetPressedKey(&key);
    302a:	ce 01       	movw	r24, r28
    302c:	01 96       	adiw	r24, 0x01	; 1
    302e:	0e 94 00 10 	call	0x2000	; 0x2000 <Keypad_enuGetPressedKey>
		if (key != KEYPAD_NOT_PRESSED)
    3032:	89 81       	ldd	r24, Y+1	; 0x01
    3034:	8f 3f       	cpi	r24, 0xFF	; 255
    3036:	29 f0       	breq	.+10     	; 0x3042 <LCD_DisplayPassword+0x22>
		{
			key = '*';
    3038:	8a e2       	ldi	r24, 0x2A	; 42
    303a:	89 83       	std	Y+1, r24	; 0x01
			LCD_enuSendData(key);
    303c:	89 81       	ldd	r24, Y+1	; 0x01
    303e:	0e 94 b9 13 	call	0x2772	; 0x2772 <LCD_enuSendData>
		}

}
    3042:	0f 90       	pop	r0
    3044:	cf 91       	pop	r28
    3046:	df 91       	pop	r29
    3048:	08 95       	ret

0000304a <LCD_ClearDisplay>:
void LCD_ClearDisplay(void)
{
    304a:	df 93       	push	r29
    304c:	cf 93       	push	r28
    304e:	cd b7       	in	r28, 0x3d	; 61
    3050:	de b7       	in	r29, 0x3e	; 62
	DIO_enuSetPinValue(RS_PORT,RS_PIN,DIO_u8LOW);
    3052:	81 e0       	ldi	r24, 0x01	; 1
    3054:	61 e0       	ldi	r22, 0x01	; 1
    3056:	40 e0       	ldi	r20, 0x00	; 0
    3058:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch(0x01);
    305c:	81 e0       	ldi	r24, 0x01	; 1
    305e:	0e 94 09 14 	call	0x2812	; 0x2812 <LCD_enuWriteNLatch>
}
    3062:	cf 91       	pop	r28
    3064:	df 91       	pop	r29
    3066:	08 95       	ret

00003068 <leds_vON>:
#include "util/delay.h"


/* choosing led to turn it on*/
void leds_vON(void)
{
    3068:	df 93       	push	r29
    306a:	cf 93       	push	r28
    306c:	cd b7       	in	r28, 0x3d	; 61
    306e:	de b7       	in	r29, 0x3e	; 62
		DIO_enuSetPinDirection(DIO_u8GROUP_A, DIO_u8PIN2, DIO_u8OUTPUT);
    3070:	80 e0       	ldi	r24, 0x00	; 0
    3072:	62 e0       	ldi	r22, 0x02	; 2
    3074:	41 e0       	ldi	r20, 0x01	; 1
    3076:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_enuSetPinDirection>
		DIO_enuSetPinValue(DIO_u8GROUP_A,DIO_u8PIN2,DIO_u8HIGH);
    307a:	80 e0       	ldi	r24, 0x00	; 0
    307c:	62 e0       	ldi	r22, 0x02	; 2
    307e:	41 e0       	ldi	r20, 0x01	; 1
    3080:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_enuSetPinValue>

		DIO_enuSetPinDirection(DIO_u8GROUP_A, DIO_u8PIN3, DIO_u8OUTPUT);
    3084:	80 e0       	ldi	r24, 0x00	; 0
    3086:	63 e0       	ldi	r22, 0x03	; 3
    3088:	41 e0       	ldi	r20, 0x01	; 1
    308a:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_enuSetPinDirection>
		DIO_enuSetPinValue(DIO_u8GROUP_A,DIO_u8PIN3,DIO_u8HIGH);
    308e:	80 e0       	ldi	r24, 0x00	; 0
    3090:	63 e0       	ldi	r22, 0x03	; 3
    3092:	41 e0       	ldi	r20, 0x01	; 1
    3094:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_enuSetPinValue>

		DIO_enuSetPinDirection(DIO_u8GROUP_D, DIO_u8PIN2, DIO_u8OUTPUT);
    3098:	83 e0       	ldi	r24, 0x03	; 3
    309a:	62 e0       	ldi	r22, 0x02	; 2
    309c:	41 e0       	ldi	r20, 0x01	; 1
    309e:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_enuSetPinDirection>
		DIO_enuSetPinValue(DIO_u8GROUP_D,DIO_u8PIN2,DIO_u8HIGH);
    30a2:	83 e0       	ldi	r24, 0x03	; 3
    30a4:	62 e0       	ldi	r22, 0x02	; 2
    30a6:	41 e0       	ldi	r20, 0x01	; 1
    30a8:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_enuSetPinValue>

		DIO_enuSetPinDirection(DIO_u8GROUP_C, DIO_u8PIN2, DIO_u8OUTPUT);
    30ac:	82 e0       	ldi	r24, 0x02	; 2
    30ae:	62 e0       	ldi	r22, 0x02	; 2
    30b0:	41 e0       	ldi	r20, 0x01	; 1
    30b2:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_enuSetPinDirection>
		DIO_enuSetPinValue(DIO_u8GROUP_C,DIO_u8PIN2,DIO_u8HIGH);
    30b6:	82 e0       	ldi	r24, 0x02	; 2
    30b8:	62 e0       	ldi	r22, 0x02	; 2
    30ba:	41 e0       	ldi	r20, 0x01	; 1
    30bc:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_enuSetPinValue>

		DIO_enuSetPinDirection(DIO_u8GROUP_D, DIO_u8PIN6, DIO_u8OUTPUT);
    30c0:	83 e0       	ldi	r24, 0x03	; 3
    30c2:	66 e0       	ldi	r22, 0x06	; 6
    30c4:	41 e0       	ldi	r20, 0x01	; 1
    30c6:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_enuSetPinDirection>
		DIO_enuSetPinValue(DIO_u8GROUP_D,DIO_u8PIN6,DIO_u8HIGH);
    30ca:	83 e0       	ldi	r24, 0x03	; 3
    30cc:	66 e0       	ldi	r22, 0x06	; 6
    30ce:	41 e0       	ldi	r20, 0x01	; 1
    30d0:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_enuSetPinValue>
}
    30d4:	cf 91       	pop	r28
    30d6:	df 91       	pop	r29
    30d8:	08 95       	ret

000030da <leds_vOFF>:


/* choosing led to turn it off*/
void leds_vOFF(void)
{
    30da:	df 93       	push	r29
    30dc:	cf 93       	push	r28
    30de:	cd b7       	in	r28, 0x3d	; 61
    30e0:	de b7       	in	r29, 0x3e	; 62
		DIO_enuSetPinDirection(DIO_u8GROUP_A, DIO_u8PIN2, DIO_u8OUTPUT);
    30e2:	80 e0       	ldi	r24, 0x00	; 0
    30e4:	62 e0       	ldi	r22, 0x02	; 2
    30e6:	41 e0       	ldi	r20, 0x01	; 1
    30e8:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_enuSetPinDirection>
		DIO_enuSetPinValue(DIO_u8GROUP_A,DIO_u8PIN2,DIO_u8LOW);
    30ec:	80 e0       	ldi	r24, 0x00	; 0
    30ee:	62 e0       	ldi	r22, 0x02	; 2
    30f0:	40 e0       	ldi	r20, 0x00	; 0
    30f2:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_enuSetPinValue>

		DIO_enuSetPinDirection(DIO_u8GROUP_A, DIO_u8PIN3, DIO_u8OUTPUT);
    30f6:	80 e0       	ldi	r24, 0x00	; 0
    30f8:	63 e0       	ldi	r22, 0x03	; 3
    30fa:	41 e0       	ldi	r20, 0x01	; 1
    30fc:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_enuSetPinDirection>
		DIO_enuSetPinValue(DIO_u8GROUP_A,DIO_u8PIN3,DIO_u8LOW);
    3100:	80 e0       	ldi	r24, 0x00	; 0
    3102:	63 e0       	ldi	r22, 0x03	; 3
    3104:	40 e0       	ldi	r20, 0x00	; 0
    3106:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_enuSetPinValue>

		DIO_enuSetPinDirection(DIO_u8GROUP_D, DIO_u8PIN2, DIO_u8OUTPUT);
    310a:	83 e0       	ldi	r24, 0x03	; 3
    310c:	62 e0       	ldi	r22, 0x02	; 2
    310e:	41 e0       	ldi	r20, 0x01	; 1
    3110:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_enuSetPinDirection>
		DIO_enuSetPinValue(DIO_u8GROUP_D,DIO_u8PIN2,DIO_u8LOW);
    3114:	83 e0       	ldi	r24, 0x03	; 3
    3116:	62 e0       	ldi	r22, 0x02	; 2
    3118:	40 e0       	ldi	r20, 0x00	; 0
    311a:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_enuSetPinValue>

		DIO_enuSetPinDirection(DIO_u8GROUP_C, DIO_u8PIN2, DIO_u8OUTPUT);
    311e:	82 e0       	ldi	r24, 0x02	; 2
    3120:	62 e0       	ldi	r22, 0x02	; 2
    3122:	41 e0       	ldi	r20, 0x01	; 1
    3124:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_enuSetPinDirection>
		DIO_enuSetPinValue(DIO_u8GROUP_C,DIO_u8PIN2,DIO_u8LOW);
    3128:	82 e0       	ldi	r24, 0x02	; 2
    312a:	62 e0       	ldi	r22, 0x02	; 2
    312c:	40 e0       	ldi	r20, 0x00	; 0
    312e:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_enuSetPinValue>

		DIO_enuSetPinDirection(DIO_u8GROUP_D, DIO_u8PIN6, DIO_u8OUTPUT);
    3132:	83 e0       	ldi	r24, 0x03	; 3
    3134:	66 e0       	ldi	r22, 0x06	; 6
    3136:	41 e0       	ldi	r20, 0x01	; 1
    3138:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_enuSetPinDirection>
		DIO_enuSetPinValue(DIO_u8GROUP_D,DIO_u8PIN6,DIO_u8LOW);
    313c:	83 e0       	ldi	r24, 0x03	; 3
    313e:	66 e0       	ldi	r22, 0x06	; 6
    3140:	40 e0       	ldi	r20, 0x00	; 0
    3142:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_enuSetPinValue>
}
    3146:	cf 91       	pop	r28
    3148:	df 91       	pop	r29
    314a:	08 95       	ret

0000314c <buzzer_vON>:


/*turn on buzzer*/
void buzzer_vON(void)
{
    314c:	df 93       	push	r29
    314e:	cf 93       	push	r28
    3150:	cd b7       	in	r28, 0x3d	; 61
    3152:	de b7       	in	r29, 0x3e	; 62
	DIO_enuSetPinDirection(DIO_u8GROUP_D, DIO_u8PIN7, DIO_u8OUTPUT);
    3154:	83 e0       	ldi	r24, 0x03	; 3
    3156:	67 e0       	ldi	r22, 0x07	; 7
    3158:	41 e0       	ldi	r20, 0x01	; 1
    315a:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_enuSetPinDirection>
	DIO_enuSetPinValue(DIO_u8GROUP_D,DIO_u8PIN7,DIO_u8HIGH);
    315e:	83 e0       	ldi	r24, 0x03	; 3
    3160:	67 e0       	ldi	r22, 0x07	; 7
    3162:	41 e0       	ldi	r20, 0x01	; 1
    3164:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_enuSetPinValue>
}
    3168:	cf 91       	pop	r28
    316a:	df 91       	pop	r29
    316c:	08 95       	ret

0000316e <buzzer_vOFF>:


/*turn off buzzer*/
void buzzer_vOFF(void)
{
    316e:	df 93       	push	r29
    3170:	cf 93       	push	r28
    3172:	cd b7       	in	r28, 0x3d	; 61
    3174:	de b7       	in	r29, 0x3e	; 62
	DIO_enuSetPinDirection(DIO_u8GROUP_D, DIO_u8PIN7, DIO_u8OUTPUT);
    3176:	83 e0       	ldi	r24, 0x03	; 3
    3178:	67 e0       	ldi	r22, 0x07	; 7
    317a:	41 e0       	ldi	r20, 0x01	; 1
    317c:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_enuSetPinDirection>
	DIO_enuSetPinValue(DIO_u8GROUP_D,DIO_u8PIN7,DIO_u8LOW);
    3180:	83 e0       	ldi	r24, 0x03	; 3
    3182:	67 e0       	ldi	r22, 0x07	; 7
    3184:	40 e0       	ldi	r20, 0x00	; 0
    3186:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_enuSetPinValue>
}
    318a:	cf 91       	pop	r28
    318c:	df 91       	pop	r29
    318e:	08 95       	ret

00003190 <Remote_Init>:
#include "../MCAL/USART_Config.h"
#include "../MCAL/USART_Private.h"
#include "../MCAL/stdTypes.h"
#include "../MCAL/AVR_REG.h"
void Remote_Init()
{
    3190:	df 93       	push	r29
    3192:	cf 93       	push	r28
    3194:	cd b7       	in	r28, 0x3d	; 61
    3196:	de b7       	in	r29, 0x3e	; 62
	  USART_Init(Asynch_Noraml_Mode,DISABLE,1,8);
    3198:	81 e0       	ldi	r24, 0x01	; 1
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	60 e0       	ldi	r22, 0x00	; 0
    319e:	70 e0       	ldi	r23, 0x00	; 0
    31a0:	41 e0       	ldi	r20, 0x01	; 1
    31a2:	50 e0       	ldi	r21, 0x00	; 0
    31a4:	28 e0       	ldi	r18, 0x08	; 8
    31a6:	30 e0       	ldi	r19, 0x00	; 0
    31a8:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <USART_Init>
	  USART_Baud_Rate();
    31ac:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <USART_Baud_Rate>
	  USART_RX_Enabel();
    31b0:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <USART_RX_Enabel>
	  USART_TX_Enabel();
    31b4:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <USART_TX_Enabel>
	  USART_RX_IE();
    31b8:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <USART_RX_IE>
	  USART_Send_String("PRESS ANY KEY TO START\r\n");
    31bc:	80 e6       	ldi	r24, 0x60	; 96
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <USART_Send_String>


}
    31c4:	cf 91       	pop	r28
    31c6:	df 91       	pop	r29
    31c8:	08 95       	ret

000031ca <Remote_Typing>:
void Remote_Typing(u8 *User_ID,u8 Str_Size,u8 State)
{
    31ca:	df 93       	push	r29
    31cc:	cf 93       	push	r28
    31ce:	00 d0       	rcall	.+0      	; 0x31d0 <Remote_Typing+0x6>
    31d0:	00 d0       	rcall	.+0      	; 0x31d2 <Remote_Typing+0x8>
    31d2:	00 d0       	rcall	.+0      	; 0x31d4 <Remote_Typing+0xa>
    31d4:	cd b7       	in	r28, 0x3d	; 61
    31d6:	de b7       	in	r29, 0x3e	; 62
    31d8:	9c 83       	std	Y+4, r25	; 0x04
    31da:	8b 83       	std	Y+3, r24	; 0x03
    31dc:	6d 83       	std	Y+5, r22	; 0x05
    31de:	4e 83       	std	Y+6, r20	; 0x06
	u8 i,Writing;
	if(State==1)
    31e0:	8e 81       	ldd	r24, Y+6	; 0x06
    31e2:	81 30       	cpi	r24, 0x01	; 1
    31e4:	d9 f4       	brne	.+54     	; 0x321c <Remote_Typing+0x52>
	{
	for(i=0;i<Str_Size;i++)
    31e6:	1a 82       	std	Y+2, r1	; 0x02
    31e8:	14 c0       	rjmp	.+40     	; 0x3212 <Remote_Typing+0x48>
	{
		Writing=USART_Recive_Char();
    31ea:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <USART_Recive_Char>
    31ee:	89 83       	std	Y+1, r24	; 0x01
		USART_Send_Char('*');
    31f0:	8a e2       	ldi	r24, 0x2A	; 42
    31f2:	90 e0       	ldi	r25, 0x00	; 0
    31f4:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <USART_Send_Char>
		User_ID[i]=Writing;
    31f8:	8a 81       	ldd	r24, Y+2	; 0x02
    31fa:	28 2f       	mov	r18, r24
    31fc:	30 e0       	ldi	r19, 0x00	; 0
    31fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3200:	9c 81       	ldd	r25, Y+4	; 0x04
    3202:	fc 01       	movw	r30, r24
    3204:	e2 0f       	add	r30, r18
    3206:	f3 1f       	adc	r31, r19
    3208:	89 81       	ldd	r24, Y+1	; 0x01
    320a:	80 83       	st	Z, r24
void Remote_Typing(u8 *User_ID,u8 Str_Size,u8 State)
{
	u8 i,Writing;
	if(State==1)
	{
	for(i=0;i<Str_Size;i++)
    320c:	8a 81       	ldd	r24, Y+2	; 0x02
    320e:	8f 5f       	subi	r24, 0xFF	; 255
    3210:	8a 83       	std	Y+2, r24	; 0x02
    3212:	9a 81       	ldd	r25, Y+2	; 0x02
    3214:	8d 81       	ldd	r24, Y+5	; 0x05
    3216:	98 17       	cp	r25, r24
    3218:	40 f3       	brcs	.-48     	; 0x31ea <Remote_Typing+0x20>
    321a:	1e c0       	rjmp	.+60     	; 0x3258 <Remote_Typing+0x8e>
		Writing=USART_Recive_Char();
		USART_Send_Char('*');
		User_ID[i]=Writing;
	}
	}
	else if(State== 0)
    321c:	8e 81       	ldd	r24, Y+6	; 0x06
    321e:	88 23       	and	r24, r24
    3220:	d9 f4       	brne	.+54     	; 0x3258 <Remote_Typing+0x8e>
	{
		for(i=0;i<Str_Size;i++)
    3222:	1a 82       	std	Y+2, r1	; 0x02
    3224:	15 c0       	rjmp	.+42     	; 0x3250 <Remote_Typing+0x86>
		{
			Writing=USART_Recive_Char();
    3226:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <USART_Recive_Char>
    322a:	89 83       	std	Y+1, r24	; 0x01
			USART_Send_Char(Writing);
    322c:	89 81       	ldd	r24, Y+1	; 0x01
    322e:	88 2f       	mov	r24, r24
    3230:	90 e0       	ldi	r25, 0x00	; 0
    3232:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <USART_Send_Char>
			User_ID[i]=Writing;
    3236:	8a 81       	ldd	r24, Y+2	; 0x02
    3238:	28 2f       	mov	r18, r24
    323a:	30 e0       	ldi	r19, 0x00	; 0
    323c:	8b 81       	ldd	r24, Y+3	; 0x03
    323e:	9c 81       	ldd	r25, Y+4	; 0x04
    3240:	fc 01       	movw	r30, r24
    3242:	e2 0f       	add	r30, r18
    3244:	f3 1f       	adc	r31, r19
    3246:	89 81       	ldd	r24, Y+1	; 0x01
    3248:	80 83       	st	Z, r24
		User_ID[i]=Writing;
	}
	}
	else if(State== 0)
	{
		for(i=0;i<Str_Size;i++)
    324a:	8a 81       	ldd	r24, Y+2	; 0x02
    324c:	8f 5f       	subi	r24, 0xFF	; 255
    324e:	8a 83       	std	Y+2, r24	; 0x02
    3250:	9a 81       	ldd	r25, Y+2	; 0x02
    3252:	8d 81       	ldd	r24, Y+5	; 0x05
    3254:	98 17       	cp	r25, r24
    3256:	38 f3       	brcs	.-50     	; 0x3226 <Remote_Typing+0x5c>
			USART_Send_Char(Writing);
			User_ID[i]=Writing;
		}
	}

}
    3258:	26 96       	adiw	r28, 0x06	; 6
    325a:	0f b6       	in	r0, 0x3f	; 63
    325c:	f8 94       	cli
    325e:	de bf       	out	0x3e, r29	; 62
    3260:	0f be       	out	0x3f, r0	; 63
    3262:	cd bf       	out	0x3d, r28	; 61
    3264:	cf 91       	pop	r28
    3266:	df 91       	pop	r29
    3268:	08 95       	ret

0000326a <Remote_Send_String>:
void Remote_Send_String(char *T_Data)
{
    326a:	df 93       	push	r29
    326c:	cf 93       	push	r28
    326e:	00 d0       	rcall	.+0      	; 0x3270 <Remote_Send_String+0x6>
    3270:	cd b7       	in	r28, 0x3d	; 61
    3272:	de b7       	in	r29, 0x3e	; 62
    3274:	9a 83       	std	Y+2, r25	; 0x02
    3276:	89 83       	std	Y+1, r24	; 0x01
	USART_Send_String(T_Data);
    3278:	89 81       	ldd	r24, Y+1	; 0x01
    327a:	9a 81       	ldd	r25, Y+2	; 0x02
    327c:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <USART_Send_String>
}
    3280:	0f 90       	pop	r0
    3282:	0f 90       	pop	r0
    3284:	cf 91       	pop	r28
    3286:	df 91       	pop	r29
    3288:	08 95       	ret

0000328a <Remote_New_Line>:
void Remote_New_Line(u8 Num_Line)
{
    328a:	df 93       	push	r29
    328c:	cf 93       	push	r28
    328e:	00 d0       	rcall	.+0      	; 0x3290 <Remote_New_Line+0x6>
    3290:	cd b7       	in	r28, 0x3d	; 61
    3292:	de b7       	in	r29, 0x3e	; 62
    3294:	8a 83       	std	Y+2, r24	; 0x02
	u8 i;
	for(i=0;i<Num_Line;i++)
    3296:	19 82       	std	Y+1, r1	; 0x01
    3298:	07 c0       	rjmp	.+14     	; 0x32a8 <Remote_New_Line+0x1e>
	{
	USART_Send_String("    \r\n");
    329a:	89 e7       	ldi	r24, 0x79	; 121
    329c:	90 e0       	ldi	r25, 0x00	; 0
    329e:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <USART_Send_String>
	USART_Send_String(T_Data);
}
void Remote_New_Line(u8 Num_Line)
{
	u8 i;
	for(i=0;i<Num_Line;i++)
    32a2:	89 81       	ldd	r24, Y+1	; 0x01
    32a4:	8f 5f       	subi	r24, 0xFF	; 255
    32a6:	89 83       	std	Y+1, r24	; 0x01
    32a8:	99 81       	ldd	r25, Y+1	; 0x01
    32aa:	8a 81       	ldd	r24, Y+2	; 0x02
    32ac:	98 17       	cp	r25, r24
    32ae:	a8 f3       	brcs	.-22     	; 0x329a <Remote_New_Line+0x10>
	{
	USART_Send_String("    \r\n");
	}

}
    32b0:	0f 90       	pop	r0
    32b2:	0f 90       	pop	r0
    32b4:	cf 91       	pop	r28
    32b6:	df 91       	pop	r29
    32b8:	08 95       	ret

000032ba <Remote_Display>:
void Remote_Display(u8 *T_Data,u8 Str_Size)
{
    32ba:	df 93       	push	r29
    32bc:	cf 93       	push	r28
    32be:	00 d0       	rcall	.+0      	; 0x32c0 <Remote_Display+0x6>
    32c0:	00 d0       	rcall	.+0      	; 0x32c2 <Remote_Display+0x8>
    32c2:	cd b7       	in	r28, 0x3d	; 61
    32c4:	de b7       	in	r29, 0x3e	; 62
    32c6:	9b 83       	std	Y+3, r25	; 0x03
    32c8:	8a 83       	std	Y+2, r24	; 0x02
    32ca:	6c 83       	std	Y+4, r22	; 0x04
	u8 i;
	for(i=0 ;i<Str_Size;i++)
    32cc:	19 82       	std	Y+1, r1	; 0x01
    32ce:	1b c0       	rjmp	.+54     	; 0x3306 <Remote_Display+0x4c>
		{
			while(!((UCSRA>>5)&1)); /*UDR Empty Register Method*/
    32d0:	eb e2       	ldi	r30, 0x2B	; 43
    32d2:	f0 e0       	ldi	r31, 0x00	; 0
    32d4:	80 81       	ld	r24, Z
    32d6:	82 95       	swap	r24
    32d8:	86 95       	lsr	r24
    32da:	87 70       	andi	r24, 0x07	; 7
    32dc:	88 2f       	mov	r24, r24
    32de:	90 e0       	ldi	r25, 0x00	; 0
    32e0:	81 70       	andi	r24, 0x01	; 1
    32e2:	90 70       	andi	r25, 0x00	; 0
    32e4:	00 97       	sbiw	r24, 0x00	; 0
    32e6:	a1 f3       	breq	.-24     	; 0x32d0 <Remote_Display+0x16>
			UDR = T_Data[i];
    32e8:	ac e2       	ldi	r26, 0x2C	; 44
    32ea:	b0 e0       	ldi	r27, 0x00	; 0
    32ec:	89 81       	ldd	r24, Y+1	; 0x01
    32ee:	28 2f       	mov	r18, r24
    32f0:	30 e0       	ldi	r19, 0x00	; 0
    32f2:	8a 81       	ldd	r24, Y+2	; 0x02
    32f4:	9b 81       	ldd	r25, Y+3	; 0x03
    32f6:	fc 01       	movw	r30, r24
    32f8:	e2 0f       	add	r30, r18
    32fa:	f3 1f       	adc	r31, r19
    32fc:	80 81       	ld	r24, Z
    32fe:	8c 93       	st	X, r24

}
void Remote_Display(u8 *T_Data,u8 Str_Size)
{
	u8 i;
	for(i=0 ;i<Str_Size;i++)
    3300:	89 81       	ldd	r24, Y+1	; 0x01
    3302:	8f 5f       	subi	r24, 0xFF	; 255
    3304:	89 83       	std	Y+1, r24	; 0x01
    3306:	99 81       	ldd	r25, Y+1	; 0x01
    3308:	8c 81       	ldd	r24, Y+4	; 0x04
    330a:	98 17       	cp	r25, r24
    330c:	08 f3       	brcs	.-62     	; 0x32d0 <Remote_Display+0x16>
		{
			while(!((UCSRA>>5)&1)); /*UDR Empty Register Method*/
			UDR = T_Data[i];
		}
}
    330e:	0f 90       	pop	r0
    3310:	0f 90       	pop	r0
    3312:	0f 90       	pop	r0
    3314:	0f 90       	pop	r0
    3316:	cf 91       	pop	r28
    3318:	df 91       	pop	r29
    331a:	08 95       	ret

0000331c <Temp_Sens_Init>:
#include "../MCAL/ADC_Int.h"
#include "../MCAL/ADC_Config.h"
#include "AC_Int.h"
#include "LED_Buzzer_Int.h"
void Temp_Sens_Init()
{
    331c:	df 93       	push	r29
    331e:	cf 93       	push	r28
    3320:	cd b7       	in	r28, 0x3d	; 61
    3322:	de b7       	in	r29, 0x3e	; 62
	 Analog_Select_Channel(0);
    3324:	80 e0       	ldi	r24, 0x00	; 0
    3326:	0e 94 05 07 	call	0xe0a	; 0xe0a <Analog_Select_Channel>
	 AD_Init(AVCC,64);
    332a:	80 e0       	ldi	r24, 0x00	; 0
    332c:	60 e4       	ldi	r22, 0x40	; 64
    332e:	0e 94 a3 05 	call	0xb46	; 0xb46 <AD_Init>
}
    3332:	cf 91       	pop	r28
    3334:	df 91       	pop	r29
    3336:	08 95       	ret

00003338 <Temp_Sens_Read>:
u8 Temp_Sens_Read()
{
    3338:	df 93       	push	r29
    333a:	cf 93       	push	r28
    333c:	0f 92       	push	r0
    333e:	cd b7       	in	r28, 0x3d	; 61
    3340:	de b7       	in	r29, 0x3e	; 62
	u8 Read;
	AD_Start_Conversion();
    3342:	0e 94 c9 06 	call	0xd92	; 0xd92 <AD_Start_Conversion>
	ADC_Polling();
    3346:	0e 94 62 07 	call	0xec4	; 0xec4 <ADC_Polling>
	Read=(AD_Read_High(LEFT_READING))*2;
    334a:	80 e0       	ldi	r24, 0x00	; 0
    334c:	0e 94 21 07 	call	0xe42	; 0xe42 <AD_Read_High>
    3350:	88 2f       	mov	r24, r24
    3352:	90 e0       	ldi	r25, 0x00	; 0
    3354:	88 0f       	add	r24, r24
    3356:	99 1f       	adc	r25, r25
    3358:	89 83       	std	Y+1, r24	; 0x01
	return Read;
    335a:	89 81       	ldd	r24, Y+1	; 0x01
}
    335c:	0f 90       	pop	r0
    335e:	cf 91       	pop	r28
    3360:	df 91       	pop	r29
    3362:	08 95       	ret

00003364 <Temp_AC_Check>:
void Temp_AC_Check()
{
    3364:	df 93       	push	r29
    3366:	cf 93       	push	r28
    3368:	0f 92       	push	r0
    336a:	cd b7       	in	r28, 0x3d	; 61
    336c:	de b7       	in	r29, 0x3e	; 62

	u8  Temperature;
	Temperature =Temp_Sens_Read();
    336e:	0e 94 9c 19 	call	0x3338	; 0x3338 <Temp_Sens_Read>
    3372:	89 83       	std	Y+1, r24	; 0x01
	if (Temperature > 28)
    3374:	89 81       	ldd	r24, Y+1	; 0x01
    3376:	8d 31       	cpi	r24, 0x1D	; 29
    3378:	38 f0       	brcs	.+14     	; 0x3388 <Temp_AC_Check+0x24>
	{
	     AC_On();
    337a:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <AC_On>
	     LCD_enuSendString("AC_ON");
    337e:	80 e8       	ldi	r24, 0x80	; 128
    3380:	90 e0       	ldi	r25, 0x00	; 0
    3382:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <LCD_enuSendString>
    3386:	07 c0       	rjmp	.+14     	; 0x3396 <Temp_AC_Check+0x32>
	}
	else if (Temperature < 21)
    3388:	89 81       	ldd	r24, Y+1	; 0x01
    338a:	85 31       	cpi	r24, 0x15	; 21
    338c:	20 f4       	brcc	.+8      	; 0x3396 <Temp_AC_Check+0x32>
	{
		AC_Off();
    338e:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <AC_Off>
		LCD_ClearDisplay();
    3392:	0e 94 25 18 	call	0x304a	; 0x304a <LCD_ClearDisplay>
	}
	else;
}
    3396:	0f 90       	pop	r0
    3398:	cf 91       	pop	r28
    339a:	df 91       	pop	r29
    339c:	08 95       	ret

0000339e <main>:
void Peripherals_Init();
/****GLOBAL VARIABLES****/
static u8 Program_Check;
#if CODE == 0
int main ()
{
    339e:	8f 92       	push	r8
    33a0:	9f 92       	push	r9
    33a2:	af 92       	push	r10
    33a4:	bf 92       	push	r11
    33a6:	cf 92       	push	r12
    33a8:	df 92       	push	r13
    33aa:	ef 92       	push	r14
    33ac:	ff 92       	push	r15
    33ae:	0f 93       	push	r16
    33b0:	1f 93       	push	r17
    33b2:	df 93       	push	r29
    33b4:	cf 93       	push	r28
    33b6:	cd b7       	in	r28, 0x3d	; 61
    33b8:	de b7       	in	r29, 0x3e	; 62
    33ba:	c6 54       	subi	r28, 0x46	; 70
    33bc:	d0 40       	sbci	r29, 0x00	; 0
    33be:	0f b6       	in	r0, 0x3f	; 63
    33c0:	f8 94       	cli
    33c2:	de bf       	out	0x3e, r29	; 62
    33c4:	0f be       	out	0x3f, r0	; 63
    33c6:	cd bf       	out	0x3d, r28	; 61

	 /****************Variables Deceleration****************/
	u8 Temperature ;                     /*Temperature Sensor*/
	u8 Data;                             /*Remote Control*/
	u8 Key_Check=0;                      /*KeyPad*/
    33c8:	1e 8a       	std	Y+22, r1	; 0x16
	u8 User_Num=0;                       /*For Login and Sign Up System*/
    33ca:	1b 8a       	std	Y+19, r1	; 0x13
	u8 User_Check ;                      /*For Login and Sign Up System*/
	u8 Admin_Check=1;                    /*For Login and Sign Up System*/
    33cc:	81 e0       	ldi	r24, 0x01	; 1
    33ce:	89 8b       	std	Y+17, r24	; 0x11
	u8 Trial_Number=0;                   /*For Login and Sign Up System*/
    33d0:	18 8a       	std	Y+16, r1	; 0x10
	struct User_Info Sign_Up;            /*Remote Control*/
	struct User_Info Sign_In;
	struct User_Info Emergency;
	static struct User_Info Data_Memory[8];    /*For Storing data In the Memory*/
	/*Function Initialization Deceleration*/
	Peripherals_Init();
    33d2:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <Peripherals_Init>
   	while (1)
	{

   		   Temp_AC_Check();
    33d6:	0e 94 b2 19 	call	0x3364	; 0x3364 <Temp_AC_Check>
      /***************************REMOTE SYSTEM PROGRAM******************************/
			if (Program_Check == REMOTE)
    33da:	80 91 3c 04 	lds	r24, 0x043C
    33de:	81 30       	cpi	r24, 0x01	; 1
    33e0:	09 f0       	breq	.+2      	; 0x33e4 <main+0x46>
    33e2:	56 c2       	rjmp	.+1196   	; 0x3890 <main+0x4f2>
				{
			      USART_Send_String("****************HI****************\r\n");
    33e4:	86 e8       	ldi	r24, 0x86	; 134
    33e6:	90 e0       	ldi	r25, 0x00	; 0
    33e8:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <USART_Send_String>
				  USART_Send_String("Welcome to Controlling Your Home\r\n");
    33ec:	8b ea       	ldi	r24, 0xAB	; 171
    33ee:	90 e0       	ldi	r25, 0x00	; 0
    33f0:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <USART_Send_String>
				  Remote_New_Line(2);
    33f4:	82 e0       	ldi	r24, 0x02	; 2
    33f6:	90 e0       	ldi	r25, 0x00	; 0
    33f8:	0e 94 45 19 	call	0x328a	; 0x328a <Remote_New_Line>
			    	/******************* SIGN_UP OF ADMIN *******************/
			            if(User_Num==0)
    33fc:	8b 89       	ldd	r24, Y+19	; 0x13
    33fe:	88 23       	and	r24, r24
    3400:	09 f0       	breq	.+2      	; 0x3404 <main+0x66>
    3402:	c7 c0       	rjmp	.+398    	; 0x3592 <main+0x1f4>
			            {
			            	do{
			        		Remote_Send_String("Please Enter Admin UserName\r\n");
    3404:	8e ec       	ldi	r24, 0xCE	; 206
    3406:	90 e0       	ldi	r25, 0x00	; 0
    3408:	0e 94 35 19 	call	0x326a	; 0x326a <Remote_Send_String>
			        		Remote_Typing(Sign_Up.UserName,8,SHOWN);
    340c:	ce 01       	movw	r24, r28
    340e:	47 96       	adiw	r24, 0x17	; 23
    3410:	68 e0       	ldi	r22, 0x08	; 8
    3412:	70 e0       	ldi	r23, 0x00	; 0
    3414:	40 e0       	ldi	r20, 0x00	; 0
    3416:	50 e0       	ldi	r21, 0x00	; 0
    3418:	0e 94 e5 18 	call	0x31ca	; 0x31ca <Remote_Typing>
			        		Remote_New_Line(1);
    341c:	81 e0       	ldi	r24, 0x01	; 1
    341e:	90 e0       	ldi	r25, 0x00	; 0
    3420:	0e 94 45 19 	call	0x328a	; 0x328a <Remote_New_Line>
			        		Remote_Send_String("Please Enter Admin PassWord\r\n");
    3424:	8c ee       	ldi	r24, 0xEC	; 236
    3426:	90 e0       	ldi	r25, 0x00	; 0
    3428:	0e 94 35 19 	call	0x326a	; 0x326a <Remote_Send_String>
			        		Remote_Typing(Sign_Up.PassWord,8,SHOWN);
    342c:	ce 01       	movw	r24, r28
    342e:	47 96       	adiw	r24, 0x17	; 23
    3430:	08 96       	adiw	r24, 0x08	; 8
    3432:	68 e0       	ldi	r22, 0x08	; 8
    3434:	70 e0       	ldi	r23, 0x00	; 0
    3436:	40 e0       	ldi	r20, 0x00	; 0
    3438:	50 e0       	ldi	r21, 0x00	; 0
    343a:	0e 94 e5 18 	call	0x31ca	; 0x31ca <Remote_Typing>
			        		Remote_New_Line(2);
    343e:	82 e0       	ldi	r24, 0x02	; 2
    3440:	90 e0       	ldi	r25, 0x00	; 0
    3442:	0e 94 45 19 	call	0x328a	; 0x328a <Remote_New_Line>
			        		Remote_Send_String("Enter Your Admin 4_Digits Emergency PassWord\r\n");
    3446:	8a e0       	ldi	r24, 0x0A	; 10
    3448:	91 e0       	ldi	r25, 0x01	; 1
    344a:	0e 94 35 19 	call	0x326a	; 0x326a <Remote_Send_String>
			        		Remote_Typing(Emergency.PassWord,4,SHOWN);
    344e:	ce 01       	movw	r24, r28
    3450:	c7 96       	adiw	r24, 0x37	; 55
    3452:	08 96       	adiw	r24, 0x08	; 8
    3454:	64 e0       	ldi	r22, 0x04	; 4
    3456:	70 e0       	ldi	r23, 0x00	; 0
    3458:	40 e0       	ldi	r20, 0x00	; 0
    345a:	50 e0       	ldi	r21, 0x00	; 0
    345c:	0e 94 e5 18 	call	0x31ca	; 0x31ca <Remote_Typing>
			        		Remote_New_Line(2);
    3460:	82 e0       	ldi	r24, 0x02	; 2
    3462:	90 e0       	ldi	r25, 0x00	; 0
    3464:	0e 94 45 19 	call	0x328a	; 0x328a <Remote_New_Line>
				    		Remote_Send_String("Your UserName\r\n");
    3468:	89 e3       	ldi	r24, 0x39	; 57
    346a:	91 e0       	ldi	r25, 0x01	; 1
    346c:	0e 94 35 19 	call	0x326a	; 0x326a <Remote_Send_String>
				       		Remote_Display(Sign_Up.UserName,8);
    3470:	ce 01       	movw	r24, r28
    3472:	47 96       	adiw	r24, 0x17	; 23
    3474:	68 e0       	ldi	r22, 0x08	; 8
    3476:	0e 94 5d 19 	call	0x32ba	; 0x32ba <Remote_Display>
				       		Remote_New_Line(1);
    347a:	81 e0       	ldi	r24, 0x01	; 1
    347c:	90 e0       	ldi	r25, 0x00	; 0
    347e:	0e 94 45 19 	call	0x328a	; 0x328a <Remote_New_Line>
				       		Remote_Send_String("Your Password\r\n");
    3482:	89 e4       	ldi	r24, 0x49	; 73
    3484:	91 e0       	ldi	r25, 0x01	; 1
    3486:	0e 94 35 19 	call	0x326a	; 0x326a <Remote_Send_String>
				       		Remote_Display(Sign_Up.PassWord,8);
    348a:	ce 01       	movw	r24, r28
    348c:	47 96       	adiw	r24, 0x17	; 23
    348e:	08 96       	adiw	r24, 0x08	; 8
    3490:	68 e0       	ldi	r22, 0x08	; 8
    3492:	0e 94 5d 19 	call	0x32ba	; 0x32ba <Remote_Display>
				       		Remote_New_Line(1);
    3496:	81 e0       	ldi	r24, 0x01	; 1
    3498:	90 e0       	ldi	r25, 0x00	; 0
    349a:	0e 94 45 19 	call	0x328a	; 0x328a <Remote_New_Line>
				       		Remote_Send_String("Your Emergency PassWord\r\n");
    349e:	89 e5       	ldi	r24, 0x59	; 89
    34a0:	91 e0       	ldi	r25, 0x01	; 1
    34a2:	0e 94 35 19 	call	0x326a	; 0x326a <Remote_Send_String>
				       		Remote_Display(Emergency.PassWord,4);
    34a6:	ce 01       	movw	r24, r28
    34a8:	c7 96       	adiw	r24, 0x37	; 55
    34aa:	08 96       	adiw	r24, 0x08	; 8
    34ac:	64 e0       	ldi	r22, 0x04	; 4
    34ae:	0e 94 5d 19 	call	0x32ba	; 0x32ba <Remote_Display>
				       		Remote_New_Line(2);
    34b2:	82 e0       	ldi	r24, 0x02	; 2
    34b4:	90 e0       	ldi	r25, 0x00	; 0
    34b6:	0e 94 45 19 	call	0x328a	; 0x328a <Remote_New_Line>
				    	    Remote_Send_String("To Confirm Press 'C' **PROGRAM WILL EXIT** \r\n");
    34ba:	83 e7       	ldi	r24, 0x73	; 115
    34bc:	91 e0       	ldi	r25, 0x01	; 1
    34be:	0e 94 35 19 	call	0x326a	; 0x326a <Remote_Send_String>
				    	    Remote_Send_String("To Decline Press 'D' \r\n");
    34c2:	81 ea       	ldi	r24, 0xA1	; 161
    34c4:	91 e0       	ldi	r25, 0x01	; 1
    34c6:	0e 94 35 19 	call	0x326a	; 0x326a <Remote_Send_String>
				    		Remote_New_Line(2);
    34ca:	82 e0       	ldi	r24, 0x02	; 2
    34cc:	90 e0       	ldi	r25, 0x00	; 0
    34ce:	0e 94 45 19 	call	0x328a	; 0x328a <Remote_New_Line>
				    	    Data= USART_Recive_Char();
    34d2:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <USART_Recive_Char>
    34d6:	8c 8b       	std	Y+20, r24	; 0x14
				    	    if(Data == 'C'||Data=='c')
    34d8:	8c 89       	ldd	r24, Y+20	; 0x14
    34da:	83 34       	cpi	r24, 0x43	; 67
    34dc:	21 f0       	breq	.+8      	; 0x34e6 <main+0x148>
    34de:	8c 89       	ldd	r24, Y+20	; 0x14
    34e0:	83 36       	cpi	r24, 0x63	; 99
    34e2:	09 f0       	breq	.+2      	; 0x34e6 <main+0x148>
    34e4:	4f c0       	rjmp	.+158    	; 0x3584 <main+0x1e6>
				    	     {
				    	    	Temp_AC_Check();
    34e6:	0e 94 b2 19 	call	0x3364	; 0x3364 <Temp_AC_Check>
				    	    	USART_Send_String("IF U WISH TO RESTART THE PROGRAM PRESS ANY KEY \r\n");
    34ea:	89 eb       	ldi	r24, 0xB9	; 185
    34ec:	91 e0       	ldi	r25, 0x01	; 1
    34ee:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <USART_Send_String>
				    	    	Remote_Send_String(Data_Memory[0].UserName);
    34f2:	8c eb       	ldi	r24, 0xBC	; 188
    34f4:	93 e0       	ldi	r25, 0x03	; 3
    34f6:	0e 94 35 19 	call	0x326a	; 0x326a <Remote_Send_String>
				    	    	User_Num++;
    34fa:	8b 89       	ldd	r24, Y+19	; 0x13
    34fc:	8f 5f       	subi	r24, 0xFF	; 255
    34fe:	8b 8b       	std	Y+19, r24	; 0x13
				    	    	Program_Check=0;      /*PROGRAM RESTART*/
    3500:	10 92 3c 04 	sts	0x043C, r1
				    	    	USART_RX_IE();        /*PROGRAM RESTART*/
    3504:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <USART_RX_IE>
				    	       /* Increment the User_Num and set in the EEPROM*/
				    		   /*set informations in the EEPROM*/
                               Store_Info(Data_Memory,Sign_Up,USERNAME,User_Num);
    3508:	00 d0       	rcall	.+0      	; 0x350a <main+0x16c>
    350a:	ed b7       	in	r30, 0x3d	; 61
    350c:	fe b7       	in	r31, 0x3e	; 62
    350e:	31 96       	adiw	r30, 0x01	; 1
    3510:	2c eb       	ldi	r18, 0xBC	; 188
    3512:	33 e0       	ldi	r19, 0x03	; 3
    3514:	81 e0       	ldi	r24, 0x01	; 1
    3516:	80 83       	st	Z, r24
    3518:	8b 89       	ldd	r24, Y+19	; 0x13
    351a:	81 83       	std	Z+1, r24	; 0x01
    351c:	c9 01       	movw	r24, r18
    351e:	8f 88       	ldd	r8, Y+23	; 0x17
    3520:	98 8c       	ldd	r9, Y+24	; 0x18
    3522:	a9 8c       	ldd	r10, Y+25	; 0x19
    3524:	ba 8c       	ldd	r11, Y+26	; 0x1a
    3526:	cb 8c       	ldd	r12, Y+27	; 0x1b
    3528:	dc 8c       	ldd	r13, Y+28	; 0x1c
    352a:	ed 8c       	ldd	r14, Y+29	; 0x1d
    352c:	fe 8c       	ldd	r15, Y+30	; 0x1e
    352e:	0f 8d       	ldd	r16, Y+31	; 0x1f
    3530:	18 a1       	ldd	r17, Y+32	; 0x20
    3532:	29 a1       	ldd	r18, Y+33	; 0x21
    3534:	3a a1       	ldd	r19, Y+34	; 0x22
    3536:	4b a1       	ldd	r20, Y+35	; 0x23
    3538:	5c a1       	ldd	r21, Y+36	; 0x24
    353a:	6d a1       	ldd	r22, Y+37	; 0x25
    353c:	7e a1       	ldd	r23, Y+38	; 0x26
    353e:	0e 94 0a 0b 	call	0x1614	; 0x1614 <Store_Info>
    3542:	0f 90       	pop	r0
    3544:	0f 90       	pop	r0
                               Store_Info(Data_Memory,Sign_Up,PASSWORD,User_Num);
    3546:	00 d0       	rcall	.+0      	; 0x3548 <main+0x1aa>
    3548:	ed b7       	in	r30, 0x3d	; 61
    354a:	fe b7       	in	r31, 0x3e	; 62
    354c:	31 96       	adiw	r30, 0x01	; 1
    354e:	2c eb       	ldi	r18, 0xBC	; 188
    3550:	33 e0       	ldi	r19, 0x03	; 3
    3552:	10 82       	st	Z, r1
    3554:	8b 89       	ldd	r24, Y+19	; 0x13
    3556:	81 83       	std	Z+1, r24	; 0x01
    3558:	c9 01       	movw	r24, r18
    355a:	8f 88       	ldd	r8, Y+23	; 0x17
    355c:	98 8c       	ldd	r9, Y+24	; 0x18
    355e:	a9 8c       	ldd	r10, Y+25	; 0x19
    3560:	ba 8c       	ldd	r11, Y+26	; 0x1a
    3562:	cb 8c       	ldd	r12, Y+27	; 0x1b
    3564:	dc 8c       	ldd	r13, Y+28	; 0x1c
    3566:	ed 8c       	ldd	r14, Y+29	; 0x1d
    3568:	fe 8c       	ldd	r15, Y+30	; 0x1e
    356a:	0f 8d       	ldd	r16, Y+31	; 0x1f
    356c:	18 a1       	ldd	r17, Y+32	; 0x20
    356e:	29 a1       	ldd	r18, Y+33	; 0x21
    3570:	3a a1       	ldd	r19, Y+34	; 0x22
    3572:	4b a1       	ldd	r20, Y+35	; 0x23
    3574:	5c a1       	ldd	r21, Y+36	; 0x24
    3576:	6d a1       	ldd	r22, Y+37	; 0x25
    3578:	7e a1       	ldd	r23, Y+38	; 0x26
    357a:	0e 94 0a 0b 	call	0x1614	; 0x1614 <Store_Info>
    357e:	0f 90       	pop	r0
    3580:	0f 90       	pop	r0
    3582:	81 c1       	rjmp	.+770    	; 0x3886 <main+0x4e8>
                               break;
				    	     }
				    	    else
				    	     {
				    	 	   Data = 'A';
    3584:	81 e4       	ldi	r24, 0x41	; 65
    3586:	8c 8b       	std	Y+20, r24	; 0x14
				    	     }

			            	}while(Data =='A');
    3588:	8c 89       	ldd	r24, Y+20	; 0x14
    358a:	81 34       	cpi	r24, 0x41	; 65
    358c:	09 f4       	brne	.+2      	; 0x3590 <main+0x1f2>
    358e:	3a cf       	rjmp	.-396    	; 0x3404 <main+0x66>
    3590:	7a c1       	rjmp	.+756    	; 0x3886 <main+0x4e8>
			            }
			            else if(User_Num !=0)
    3592:	8b 89       	ldd	r24, Y+19	; 0x13
    3594:	88 23       	and	r24, r24
    3596:	09 f4       	brne	.+2      	; 0x359a <main+0x1fc>
    3598:	76 c1       	rjmp	.+748    	; 0x3886 <main+0x4e8>
			            {
			            	Temp_AC_Check();
    359a:	0e 94 b2 19 	call	0x3364	; 0x3364 <Temp_AC_Check>
			         		USART_Send_String("A) SIGN IN\r\n");
    359e:	8b ee       	ldi	r24, 0xEB	; 235
    35a0:	91 e0       	ldi	r25, 0x01	; 1
    35a2:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <USART_Send_String>
			            	USART_Send_String("B) ADD NEW USER\r\n");
    35a6:	88 ef       	ldi	r24, 0xF8	; 248
    35a8:	91 e0       	ldi	r25, 0x01	; 1
    35aa:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <USART_Send_String>
			            	Data = USART_Recive_Char();
    35ae:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <USART_Recive_Char>
    35b2:	8c 8b       	std	Y+20, r24	; 0x14
		/******************************************SIGN IN******************************************/
			            	if (Data=='A'||Data=='a')
    35b4:	8c 89       	ldd	r24, Y+20	; 0x14
    35b6:	81 34       	cpi	r24, 0x41	; 65
    35b8:	21 f0       	breq	.+8      	; 0x35c2 <main+0x224>
    35ba:	8c 89       	ldd	r24, Y+20	; 0x14
    35bc:	81 36       	cpi	r24, 0x61	; 97
    35be:	09 f0       	breq	.+2      	; 0x35c2 <main+0x224>
    35c0:	cd c0       	rjmp	.+410    	; 0x375c <main+0x3be>
			            	{
			            		do
			            		{
			            		Temp_AC_Check();
    35c2:	0e 94 b2 19 	call	0x3364	; 0x3364 <Temp_AC_Check>
			            		Remote_Send_String(Data_Memory[0].UserName);
    35c6:	8c eb       	ldi	r24, 0xBC	; 188
    35c8:	93 e0       	ldi	r25, 0x03	; 3
    35ca:	0e 94 35 19 	call	0x326a	; 0x326a <Remote_Send_String>
			   				    Remote_Send_String("Please Enter UserName\r\n");
    35ce:	8a e0       	ldi	r24, 0x0A	; 10
    35d0:	92 e0       	ldi	r25, 0x02	; 2
    35d2:	0e 94 35 19 	call	0x326a	; 0x326a <Remote_Send_String>
				        		Remote_Typing(Sign_In.UserName,8,SHOWN);
    35d6:	ce 01       	movw	r24, r28
    35d8:	87 96       	adiw	r24, 0x27	; 39
    35da:	68 e0       	ldi	r22, 0x08	; 8
    35dc:	70 e0       	ldi	r23, 0x00	; 0
    35de:	40 e0       	ldi	r20, 0x00	; 0
    35e0:	50 e0       	ldi	r21, 0x00	; 0
    35e2:	0e 94 e5 18 	call	0x31ca	; 0x31ca <Remote_Typing>
				        		Remote_New_Line(1);
    35e6:	81 e0       	ldi	r24, 0x01	; 1
    35e8:	90 e0       	ldi	r25, 0x00	; 0
    35ea:	0e 94 45 19 	call	0x328a	; 0x328a <Remote_New_Line>
				        		Remote_Send_String("Please Enter PassWord\r\n");
    35ee:	82 e2       	ldi	r24, 0x22	; 34
    35f0:	92 e0       	ldi	r25, 0x02	; 2
    35f2:	0e 94 35 19 	call	0x326a	; 0x326a <Remote_Send_String>
				        		Remote_Typing(Sign_In.PassWord,8,STAR);
    35f6:	ce 01       	movw	r24, r28
    35f8:	87 96       	adiw	r24, 0x27	; 39
    35fa:	08 96       	adiw	r24, 0x08	; 8
    35fc:	68 e0       	ldi	r22, 0x08	; 8
    35fe:	70 e0       	ldi	r23, 0x00	; 0
    3600:	41 e0       	ldi	r20, 0x01	; 1
    3602:	50 e0       	ldi	r21, 0x00	; 0
    3604:	0e 94 e5 18 	call	0x31ca	; 0x31ca <Remote_Typing>
				        		Remote_New_Line(2);
    3608:	82 e0       	ldi	r24, 0x02	; 2
    360a:	90 e0       	ldi	r25, 0x00	; 0
    360c:	0e 94 45 19 	call	0x328a	; 0x328a <Remote_New_Line>
				        		Data=USART_Recive_Char();
    3610:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <USART_Recive_Char>
    3614:	8c 8b       	std	Y+20, r24	; 0x14
				        			}
				        			else
				        			{

				        				/*Condition if user signed in is the Admin*/
				        				Admin_Check=1;
    3616:	81 e0       	ldi	r24, 0x01	; 1
    3618:	89 8b       	std	Y+17, r24	; 0x11
				        				/*Condition if user signed in is not the Admin*/
				        				//Admin_Check=0;
				        				User_Check=1;
    361a:	81 e0       	ldi	r24, 0x01	; 1
    361c:	8a 8b       	std	Y+18, r24	; 0x12
				        			}

			            		}while(User_Check==0);
    361e:	8a 89       	ldd	r24, Y+18	; 0x12
    3620:	88 23       	and	r24, r24
    3622:	79 f2       	breq	.-98     	; 0x35c2 <main+0x224>

			            	 if(Admin_Check == ADMIN)
    3624:	89 89       	ldd	r24, Y+17	; 0x11
    3626:	81 30       	cpi	r24, 0x01	; 1
    3628:	09 f0       	breq	.+2      	; 0x362c <main+0x28e>
    362a:	5b c0       	rjmp	.+182    	; 0x36e2 <main+0x344>
			            	 {
			            		     Temp_AC_Check();
    362c:	0e 94 b2 19 	call	0x3364	; 0x3364 <Temp_AC_Check>
					            	 USART_Send_String("To Open Door Press 'O' \r\n");
    3630:	8a e3       	ldi	r24, 0x3A	; 58
    3632:	92 e0       	ldi	r25, 0x02	; 2
    3634:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <USART_Send_String>
					            	 USART_Send_String("To Close Door Press 'S' \r\n");
    3638:	84 e5       	ldi	r24, 0x54	; 84
    363a:	92 e0       	ldi	r25, 0x02	; 2
    363c:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <USART_Send_String>
									 USART_Send_String("To Open Light  Press 'L' \r\n");
    3640:	8f e6       	ldi	r24, 0x6F	; 111
    3642:	92 e0       	ldi	r25, 0x02	; 2
    3644:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <USART_Send_String>
									 USART_Send_String("To Close Light  Press 'C' \r\n");
    3648:	8b e8       	ldi	r24, 0x8B	; 139
    364a:	92 e0       	ldi	r25, 0x02	; 2
    364c:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <USART_Send_String>
									 USART_Send_String("To Exit The Program Press 'E'  \r\n ");
    3650:	88 ea       	ldi	r24, 0xA8	; 168
    3652:	92 e0       	ldi	r25, 0x02	; 2
    3654:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <USART_Send_String>
									 do {
										 Data=USART_Recive_Char();
    3658:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <USART_Recive_Char>
    365c:	8c 8b       	std	Y+20, r24	; 0x14
										 if(Data=='O'||Data=='o')
    365e:	8c 89       	ldd	r24, Y+20	; 0x14
    3660:	8f 34       	cpi	r24, 0x4F	; 79
    3662:	19 f0       	breq	.+6      	; 0x366a <main+0x2cc>
    3664:	8c 89       	ldd	r24, Y+20	; 0x14
    3666:	8f 36       	cpi	r24, 0x6F	; 111
    3668:	49 f4       	brne	.+18     	; 0x367c <main+0x2de>
										 {
											Door_Open();
    366a:	0e 94 77 0f 	call	0x1eee	; 0x1eee <Door_Open>
											LCD_ClearDisplay();
    366e:	0e 94 25 18 	call	0x304a	; 0x304a <LCD_ClearDisplay>
											LCD_enuSendString("DOOR OPEN");
    3672:	8b ec       	ldi	r24, 0xCB	; 203
    3674:	92 e0       	ldi	r25, 0x02	; 2
    3676:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <LCD_enuSendString>
    367a:	24 c0       	rjmp	.+72     	; 0x36c4 <main+0x326>
	 									 }
										 else if(Data == 'S'|| Data=='s')
    367c:	8c 89       	ldd	r24, Y+20	; 0x14
    367e:	83 35       	cpi	r24, 0x53	; 83
    3680:	19 f0       	breq	.+6      	; 0x3688 <main+0x2ea>
    3682:	8c 89       	ldd	r24, Y+20	; 0x14
    3684:	83 37       	cpi	r24, 0x73	; 115
    3686:	29 f4       	brne	.+10     	; 0x3692 <main+0x2f4>
										 {
											 Door_Close();
    3688:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <Door_Close>
											 LCD_ClearDisplay();
    368c:	0e 94 25 18 	call	0x304a	; 0x304a <LCD_ClearDisplay>
    3690:	19 c0       	rjmp	.+50     	; 0x36c4 <main+0x326>
										 }
										 else if (Data =='L' || Data=='l')
    3692:	8c 89       	ldd	r24, Y+20	; 0x14
    3694:	8c 34       	cpi	r24, 0x4C	; 76
    3696:	19 f0       	breq	.+6      	; 0x369e <main+0x300>
    3698:	8c 89       	ldd	r24, Y+20	; 0x14
    369a:	8c 36       	cpi	r24, 0x6C	; 108
    369c:	49 f4       	brne	.+18     	; 0x36b0 <main+0x312>
										 {
											 leds_vON();
    369e:	0e 94 34 18 	call	0x3068	; 0x3068 <leds_vON>
											 LCD_ClearDisplay();
    36a2:	0e 94 25 18 	call	0x304a	; 0x304a <LCD_ClearDisplay>
											 LCD_enuSendString("LIGHT ON");
    36a6:	85 ed       	ldi	r24, 0xD5	; 213
    36a8:	92 e0       	ldi	r25, 0x02	; 2
    36aa:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <LCD_enuSendString>
    36ae:	0a c0       	rjmp	.+20     	; 0x36c4 <main+0x326>
										 }
										 else if (Data =='C'||Data=='c')
    36b0:	8c 89       	ldd	r24, Y+20	; 0x14
    36b2:	83 34       	cpi	r24, 0x43	; 67
    36b4:	19 f0       	breq	.+6      	; 0x36bc <main+0x31e>
    36b6:	8c 89       	ldd	r24, Y+20	; 0x14
    36b8:	83 36       	cpi	r24, 0x63	; 99
    36ba:	21 f4       	brne	.+8      	; 0x36c4 <main+0x326>
										 {
											 leds_vOFF();
    36bc:	0e 94 6d 18 	call	0x30da	; 0x30da <leds_vOFF>
											 LCD_ClearDisplay();
    36c0:	0e 94 25 18 	call	0x304a	; 0x304a <LCD_ClearDisplay>
										 }

									 }while (Data!='E'&& Data!= 'e');
    36c4:	8c 89       	ldd	r24, Y+20	; 0x14
    36c6:	85 34       	cpi	r24, 0x45	; 69
    36c8:	19 f0       	breq	.+6      	; 0x36d0 <main+0x332>
    36ca:	8c 89       	ldd	r24, Y+20	; 0x14
    36cc:	85 36       	cpi	r24, 0x65	; 101
    36ce:	21 f6       	brne	.-120    	; 0x3658 <main+0x2ba>
							  Remote_New_Line(1);
    36d0:	81 e0       	ldi	r24, 0x01	; 1
    36d2:	90 e0       	ldi	r25, 0x00	; 0
    36d4:	0e 94 45 19 	call	0x328a	; 0x328a <Remote_New_Line>
							  USART_Send_String("IF U WISH TO RESTART THE PROGRAM PRESS ANY KEY \r\n");
    36d8:	89 eb       	ldi	r24, 0xB9	; 185
    36da:	91 e0       	ldi	r25, 0x01	; 1
    36dc:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <USART_Send_String>
    36e0:	d2 c0       	rjmp	.+420    	; 0x3886 <main+0x4e8>
			            	 }

			            	 else if(Admin_Check == USER)
    36e2:	89 89       	ldd	r24, Y+17	; 0x11
    36e4:	88 23       	and	r24, r24
    36e6:	09 f0       	breq	.+2      	; 0x36ea <main+0x34c>
    36e8:	ce c0       	rjmp	.+412    	; 0x3886 <main+0x4e8>
			            	 {
			            		     Temp_AC_Check();
    36ea:	0e 94 b2 19 	call	0x3364	; 0x3364 <Temp_AC_Check>
									 USART_Send_String("To Open Light  press 'L' \r\n");
    36ee:	8e ed       	ldi	r24, 0xDE	; 222
    36f0:	92 e0       	ldi	r25, 0x02	; 2
    36f2:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <USART_Send_String>
									 USART_Send_String("To Close Light  press 'C' \r\n");
    36f6:	8a ef       	ldi	r24, 0xFA	; 250
    36f8:	92 e0       	ldi	r25, 0x02	; 2
    36fa:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <USART_Send_String>
									 USART_Send_String("To Exit The Program Press 'E' \r\n ");
    36fe:	87 e1       	ldi	r24, 0x17	; 23
    3700:	93 e0       	ldi	r25, 0x03	; 3
    3702:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <USART_Send_String>
									 do {
										 Data=USART_Recive_Char();
    3706:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <USART_Recive_Char>
    370a:	8c 8b       	std	Y+20, r24	; 0x14
										 if (Data =='L' || Data=='l')
    370c:	8c 89       	ldd	r24, Y+20	; 0x14
    370e:	8c 34       	cpi	r24, 0x4C	; 76
    3710:	19 f0       	breq	.+6      	; 0x3718 <main+0x37a>
    3712:	8c 89       	ldd	r24, Y+20	; 0x14
    3714:	8c 36       	cpi	r24, 0x6C	; 108
    3716:	49 f4       	brne	.+18     	; 0x372a <main+0x38c>
										 {
											 leds_vON();
    3718:	0e 94 34 18 	call	0x3068	; 0x3068 <leds_vON>
											 LCD_ClearDisplay();
    371c:	0e 94 25 18 	call	0x304a	; 0x304a <LCD_ClearDisplay>
											 LCD_enuSendString("LIGHT_ON");
    3720:	89 e3       	ldi	r24, 0x39	; 57
    3722:	93 e0       	ldi	r25, 0x03	; 3
    3724:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <LCD_enuSendString>
    3728:	0a c0       	rjmp	.+20     	; 0x373e <main+0x3a0>
										 }
										 else if (Data =='C'|| Data=='c')
    372a:	8c 89       	ldd	r24, Y+20	; 0x14
    372c:	83 34       	cpi	r24, 0x43	; 67
    372e:	19 f0       	breq	.+6      	; 0x3736 <main+0x398>
    3730:	8c 89       	ldd	r24, Y+20	; 0x14
    3732:	83 36       	cpi	r24, 0x63	; 99
    3734:	21 f4       	brne	.+8      	; 0x373e <main+0x3a0>
										 {
											 leds_vOFF();
    3736:	0e 94 6d 18 	call	0x30da	; 0x30da <leds_vOFF>
											 LCD_ClearDisplay();
    373a:	0e 94 25 18 	call	0x304a	; 0x304a <LCD_ClearDisplay>
										 }
									    }while(Data!='E'&& Data!= 'e');
    373e:	8c 89       	ldd	r24, Y+20	; 0x14
    3740:	85 34       	cpi	r24, 0x45	; 69
    3742:	19 f0       	breq	.+6      	; 0x374a <main+0x3ac>
    3744:	8c 89       	ldd	r24, Y+20	; 0x14
    3746:	85 36       	cpi	r24, 0x65	; 101
    3748:	f1 f6       	brne	.-68     	; 0x3706 <main+0x368>
								Remote_New_Line(1);
    374a:	81 e0       	ldi	r24, 0x01	; 1
    374c:	90 e0       	ldi	r25, 0x00	; 0
    374e:	0e 94 45 19 	call	0x328a	; 0x328a <Remote_New_Line>
								USART_Send_String("IF U WISH TO RESTART THE PROGRAM PRESS ANY KEY \r\n");
    3752:	89 eb       	ldi	r24, 0xB9	; 185
    3754:	91 e0       	ldi	r25, 0x01	; 1
    3756:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <USART_Send_String>
    375a:	95 c0       	rjmp	.+298    	; 0x3886 <main+0x4e8>
			            	      }
			            	 }
			    /*****************************ADD NEW USER******************************/
			            	else if (Data == 'B'||Data =='b')
    375c:	8c 89       	ldd	r24, Y+20	; 0x14
    375e:	82 34       	cpi	r24, 0x42	; 66
    3760:	21 f0       	breq	.+8      	; 0x376a <main+0x3cc>
    3762:	8c 89       	ldd	r24, Y+20	; 0x14
    3764:	82 36       	cpi	r24, 0x62	; 98
    3766:	09 f0       	breq	.+2      	; 0x376a <main+0x3cc>
    3768:	8e c0       	rjmp	.+284    	; 0x3886 <main+0x4e8>
							{
			            		do
			            		{
			            			Temp_AC_Check();
    376a:	0e 94 b2 19 	call	0x3364	; 0x3364 <Temp_AC_Check>
									Remote_Send_String("Please Enter Admin UserName\r\n");
    376e:	8e ec       	ldi	r24, 0xCE	; 206
    3770:	90 e0       	ldi	r25, 0x00	; 0
    3772:	0e 94 35 19 	call	0x326a	; 0x326a <Remote_Send_String>
									Remote_Typing(Sign_Up.UserName,8,SHOWN);
    3776:	ce 01       	movw	r24, r28
    3778:	47 96       	adiw	r24, 0x17	; 23
    377a:	68 e0       	ldi	r22, 0x08	; 8
    377c:	70 e0       	ldi	r23, 0x00	; 0
    377e:	40 e0       	ldi	r20, 0x00	; 0
    3780:	50 e0       	ldi	r21, 0x00	; 0
    3782:	0e 94 e5 18 	call	0x31ca	; 0x31ca <Remote_Typing>
									Remote_New_Line(1);
    3786:	81 e0       	ldi	r24, 0x01	; 1
    3788:	90 e0       	ldi	r25, 0x00	; 0
    378a:	0e 94 45 19 	call	0x328a	; 0x328a <Remote_New_Line>
									Remote_Send_String("Please Enter Admin PassWord\r\n");
    378e:	8c ee       	ldi	r24, 0xEC	; 236
    3790:	90 e0       	ldi	r25, 0x00	; 0
    3792:	0e 94 35 19 	call	0x326a	; 0x326a <Remote_Send_String>
									Remote_Typing(Sign_Up.PassWord,8,STAR);
    3796:	ce 01       	movw	r24, r28
    3798:	47 96       	adiw	r24, 0x17	; 23
    379a:	08 96       	adiw	r24, 0x08	; 8
    379c:	68 e0       	ldi	r22, 0x08	; 8
    379e:	70 e0       	ldi	r23, 0x00	; 0
    37a0:	41 e0       	ldi	r20, 0x01	; 1
    37a2:	50 e0       	ldi	r21, 0x00	; 0
    37a4:	0e 94 e5 18 	call	0x31ca	; 0x31ca <Remote_Typing>
									Remote_New_Line(2);
    37a8:	82 e0       	ldi	r24, 0x02	; 2
    37aa:	90 e0       	ldi	r25, 0x00	; 0
    37ac:	0e 94 45 19 	call	0x328a	; 0x328a <Remote_New_Line>

									/*search algorithm*/

									Data =USART_Recive_Char();
    37b0:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <USART_Recive_Char>
    37b4:	8c 8b       	std	Y+20, r24	; 0x14
									if(Data=='L')
    37b6:	8c 89       	ldd	r24, Y+20	; 0x14
    37b8:	8c 34       	cpi	r24, 0x4C	; 76
    37ba:	51 f4       	brne	.+20     	; 0x37d0 <main+0x432>
									{
										USART_Send_String("User Not Found");
    37bc:	82 e4       	ldi	r24, 0x42	; 66
    37be:	93 e0       	ldi	r25, 0x03	; 3
    37c0:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <USART_Send_String>
										Remote_New_Line(1);
    37c4:	81 e0       	ldi	r24, 0x01	; 1
    37c6:	90 e0       	ldi	r25, 0x00	; 0
    37c8:	0e 94 45 19 	call	0x328a	; 0x328a <Remote_New_Line>
										User_Check=0;
    37cc:	1a 8a       	std	Y+18, r1	; 0x12
    37ce:	57 c0       	rjmp	.+174    	; 0x387e <main+0x4e0>
									}
									else
									{
										do{
										//Temp_AC_Check();
										Remote_Send_String("Please Enter UserName\r\n");
    37d0:	8a e0       	ldi	r24, 0x0A	; 10
    37d2:	92 e0       	ldi	r25, 0x02	; 2
    37d4:	0e 94 35 19 	call	0x326a	; 0x326a <Remote_Send_String>
										Remote_Typing(Sign_Up.UserName,8,SHOWN);
    37d8:	ce 01       	movw	r24, r28
    37da:	47 96       	adiw	r24, 0x17	; 23
    37dc:	68 e0       	ldi	r22, 0x08	; 8
    37de:	70 e0       	ldi	r23, 0x00	; 0
    37e0:	40 e0       	ldi	r20, 0x00	; 0
    37e2:	50 e0       	ldi	r21, 0x00	; 0
    37e4:	0e 94 e5 18 	call	0x31ca	; 0x31ca <Remote_Typing>
										Remote_New_Line(1);
    37e8:	81 e0       	ldi	r24, 0x01	; 1
    37ea:	90 e0       	ldi	r25, 0x00	; 0
    37ec:	0e 94 45 19 	call	0x328a	; 0x328a <Remote_New_Line>
										Remote_Send_String("Please Enter PassWord\r\n");
    37f0:	82 e2       	ldi	r24, 0x22	; 34
    37f2:	92 e0       	ldi	r25, 0x02	; 2
    37f4:	0e 94 35 19 	call	0x326a	; 0x326a <Remote_Send_String>
										Remote_Typing(Sign_Up.PassWord,8,SHOWN);
    37f8:	ce 01       	movw	r24, r28
    37fa:	47 96       	adiw	r24, 0x17	; 23
    37fc:	08 96       	adiw	r24, 0x08	; 8
    37fe:	68 e0       	ldi	r22, 0x08	; 8
    3800:	70 e0       	ldi	r23, 0x00	; 0
    3802:	40 e0       	ldi	r20, 0x00	; 0
    3804:	50 e0       	ldi	r21, 0x00	; 0
    3806:	0e 94 e5 18 	call	0x31ca	; 0x31ca <Remote_Typing>
										Remote_New_Line(2);
    380a:	82 e0       	ldi	r24, 0x02	; 2
    380c:	90 e0       	ldi	r25, 0x00	; 0
    380e:	0e 94 45 19 	call	0x328a	; 0x328a <Remote_New_Line>
										Remote_Send_String("Your UserName\r\n");
    3812:	89 e3       	ldi	r24, 0x39	; 57
    3814:	91 e0       	ldi	r25, 0x01	; 1
    3816:	0e 94 35 19 	call	0x326a	; 0x326a <Remote_Send_String>
										Remote_Display(Sign_Up.UserName,8);
    381a:	ce 01       	movw	r24, r28
    381c:	47 96       	adiw	r24, 0x17	; 23
    381e:	68 e0       	ldi	r22, 0x08	; 8
    3820:	0e 94 5d 19 	call	0x32ba	; 0x32ba <Remote_Display>
										Remote_New_Line(1);
    3824:	81 e0       	ldi	r24, 0x01	; 1
    3826:	90 e0       	ldi	r25, 0x00	; 0
    3828:	0e 94 45 19 	call	0x328a	; 0x328a <Remote_New_Line>
										Remote_Send_String("Your Password\r\n");
    382c:	89 e4       	ldi	r24, 0x49	; 73
    382e:	91 e0       	ldi	r25, 0x01	; 1
    3830:	0e 94 35 19 	call	0x326a	; 0x326a <Remote_Send_String>
										Remote_Display(Sign_Up.PassWord,8);
    3834:	ce 01       	movw	r24, r28
    3836:	47 96       	adiw	r24, 0x17	; 23
    3838:	08 96       	adiw	r24, 0x08	; 8
    383a:	68 e0       	ldi	r22, 0x08	; 8
    383c:	0e 94 5d 19 	call	0x32ba	; 0x32ba <Remote_Display>
										Remote_New_Line(1);
    3840:	81 e0       	ldi	r24, 0x01	; 1
    3842:	90 e0       	ldi	r25, 0x00	; 0
    3844:	0e 94 45 19 	call	0x328a	; 0x328a <Remote_New_Line>
										Remote_Send_String("To Confirm Press 'C' **PROGRAM WILL EXIT** \r\n");
    3848:	83 e7       	ldi	r24, 0x73	; 115
    384a:	91 e0       	ldi	r25, 0x01	; 1
    384c:	0e 94 35 19 	call	0x326a	; 0x326a <Remote_Send_String>
										Remote_Send_String("To Decline Press 'D' \r\n");
    3850:	81 ea       	ldi	r24, 0xA1	; 161
    3852:	91 e0       	ldi	r25, 0x01	; 1
    3854:	0e 94 35 19 	call	0x326a	; 0x326a <Remote_Send_String>
										Data= USART_Recive_Char();
    3858:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <USART_Recive_Char>
    385c:	8c 8b       	std	Y+20, r24	; 0x14
											if(Data == 'C')
    385e:	8c 89       	ldd	r24, Y+20	; 0x14
    3860:	83 34       	cpi	r24, 0x43	; 67
    3862:	39 f4       	brne	.+14     	; 0x3872 <main+0x4d4>
												{
												    USART_Send_String("IF U WISH TO RESTART THE PROGRAM PRESS ANY KEY \r\n");
    3864:	89 eb       	ldi	r24, 0xB9	; 185
    3866:	91 e0       	ldi	r25, 0x01	; 1
    3868:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <USART_Send_String>
						    	                    /* Increment the User_Num and set in the EEPROM*/
						    		                /*set informations in the EEPROM*/
												    User_Check=1;
    386c:	81 e0       	ldi	r24, 0x01	; 1
    386e:	8a 8b       	std	Y+18, r24	; 0x12
    3870:	06 c0       	rjmp	.+12     	; 0x387e <main+0x4e0>
												    break;
												}
											else
												 {
												   Data = 'A';
    3872:	81 e4       	ldi	r24, 0x41	; 65
    3874:	8c 8b       	std	Y+20, r24	; 0x14

												 }

					            	}while(Data =='A');
    3876:	8c 89       	ldd	r24, Y+20	; 0x14
    3878:	81 34       	cpi	r24, 0x41	; 65
    387a:	09 f4       	brne	.+2      	; 0x387e <main+0x4e0>
    387c:	a9 cf       	rjmp	.-174    	; 0x37d0 <main+0x432>

				        		}

				        	}while(User_Check ==0);
    387e:	8a 89       	ldd	r24, Y+18	; 0x12
    3880:	88 23       	and	r24, r24
    3882:	09 f4       	brne	.+2      	; 0x3886 <main+0x4e8>
    3884:	72 cf       	rjmp	.-284    	; 0x376a <main+0x3cc>
						}

			       }
		    Program_Check=0;      /*PROGRAM RESTART*/
    3886:	10 92 3c 04 	sts	0x043C, r1
		    USART_RX_IE();        /*PROGRAM RESTART*/
    388a:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <USART_RX_IE>
    388e:	a3 cd       	rjmp	.-1210   	; 0x33d6 <main+0x38>
		    //Temp_AC_Check();
	     }
							/*LCD&KEYPAD PROGRAM*/
		else if (KeyPad_Press_Check()!= KEYPAD_NOT_PRESSED)
    3890:	0e 94 82 11 	call	0x2304	; 0x2304 <KeyPad_Press_Check>
    3894:	8f 3f       	cpi	r24, 0xFF	; 255
    3896:	91 05       	cpc	r25, r1
    3898:	09 f4       	brne	.+2      	; 0x389c <main+0x4fe>
    389a:	9d cd       	rjmp	.-1222   	; 0x33d6 <main+0x38>
		{

		do{
			do{				LCD_ClearDisplay();
    389c:	0e 94 25 18 	call	0x304a	; 0x304a <LCD_ClearDisplay>
							LCD_enuSendString("ENTER_USER_NAME");
    38a0:	81 e5       	ldi	r24, 0x51	; 81
    38a2:	93 e0       	ldi	r25, 0x03	; 3
    38a4:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <LCD_enuSendString>
							//keyPad_Typing(Emergency.UserName,SHOWN);
							LCD_ClearDisplay();
    38a8:	0e 94 25 18 	call	0x304a	; 0x304a <LCD_ClearDisplay>
							LCD_enuSendString("ENTER_PASSWORD");
    38ac:	81 e6       	ldi	r24, 0x61	; 97
    38ae:	93 e0       	ldi	r25, 0x03	; 3
    38b0:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <LCD_enuSendString>
							//keyPad_Typing(Emergency.PassWord,STAR);
							//search algorithm
							Keypad_enuGetPressedKey(&Key_Check);
    38b4:	ce 01       	movw	r24, r28
    38b6:	46 96       	adiw	r24, 0x16	; 22
    38b8:	0e 94 00 10 	call	0x2000	; 0x2000 <Keypad_enuGetPressedKey>
							if(Key_Check == 1)
    38bc:	8e 89       	ldd	r24, Y+22	; 0x16
    38be:	81 30       	cpi	r24, 0x01	; 1
    38c0:	09 f4       	brne	.+2      	; 0x38c4 <main+0x526>
    38c2:	a7 c0       	rjmp	.+334    	; 0x3a12 <main+0x674>
							}
							else
							{

								do{
											LCD_ClearDisplay();
    38c4:	0e 94 25 18 	call	0x304a	; 0x304a <LCD_ClearDisplay>
											LCD_enuSendString("WRONG_INFO");
    38c8:	80 e7       	ldi	r24, 0x70	; 112
    38ca:	93 e0       	ldi	r25, 0x03	; 3
    38cc:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <LCD_enuSendString>
    38d0:	80 e0       	ldi	r24, 0x00	; 0
    38d2:	90 e0       	ldi	r25, 0x00	; 0
    38d4:	aa ef       	ldi	r26, 0xFA	; 250
    38d6:	b4 e4       	ldi	r27, 0x44	; 68
    38d8:	8b 87       	std	Y+11, r24	; 0x0b
    38da:	9c 87       	std	Y+12, r25	; 0x0c
    38dc:	ad 87       	std	Y+13, r26	; 0x0d
    38de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    38e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    38e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    38e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    38e8:	20 e0       	ldi	r18, 0x00	; 0
    38ea:	30 e0       	ldi	r19, 0x00	; 0
    38ec:	4a e7       	ldi	r20, 0x7A	; 122
    38ee:	55 e4       	ldi	r21, 0x45	; 69
    38f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38f4:	dc 01       	movw	r26, r24
    38f6:	cb 01       	movw	r24, r22
    38f8:	8f 83       	std	Y+7, r24	; 0x07
    38fa:	98 87       	std	Y+8, r25	; 0x08
    38fc:	a9 87       	std	Y+9, r26	; 0x09
    38fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3900:	6f 81       	ldd	r22, Y+7	; 0x07
    3902:	78 85       	ldd	r23, Y+8	; 0x08
    3904:	89 85       	ldd	r24, Y+9	; 0x09
    3906:	9a 85       	ldd	r25, Y+10	; 0x0a
    3908:	20 e0       	ldi	r18, 0x00	; 0
    390a:	30 e0       	ldi	r19, 0x00	; 0
    390c:	40 e8       	ldi	r20, 0x80	; 128
    390e:	5f e3       	ldi	r21, 0x3F	; 63
    3910:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3914:	88 23       	and	r24, r24
    3916:	2c f4       	brge	.+10     	; 0x3922 <main+0x584>
		__ticks = 1;
    3918:	81 e0       	ldi	r24, 0x01	; 1
    391a:	90 e0       	ldi	r25, 0x00	; 0
    391c:	9e 83       	std	Y+6, r25	; 0x06
    391e:	8d 83       	std	Y+5, r24	; 0x05
    3920:	3f c0       	rjmp	.+126    	; 0x39a0 <main+0x602>
	else if (__tmp > 65535)
    3922:	6f 81       	ldd	r22, Y+7	; 0x07
    3924:	78 85       	ldd	r23, Y+8	; 0x08
    3926:	89 85       	ldd	r24, Y+9	; 0x09
    3928:	9a 85       	ldd	r25, Y+10	; 0x0a
    392a:	20 e0       	ldi	r18, 0x00	; 0
    392c:	3f ef       	ldi	r19, 0xFF	; 255
    392e:	4f e7       	ldi	r20, 0x7F	; 127
    3930:	57 e4       	ldi	r21, 0x47	; 71
    3932:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3936:	18 16       	cp	r1, r24
    3938:	4c f5       	brge	.+82     	; 0x398c <main+0x5ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    393a:	6b 85       	ldd	r22, Y+11	; 0x0b
    393c:	7c 85       	ldd	r23, Y+12	; 0x0c
    393e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3940:	9e 85       	ldd	r25, Y+14	; 0x0e
    3942:	20 e0       	ldi	r18, 0x00	; 0
    3944:	30 e0       	ldi	r19, 0x00	; 0
    3946:	40 e2       	ldi	r20, 0x20	; 32
    3948:	51 e4       	ldi	r21, 0x41	; 65
    394a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    394e:	dc 01       	movw	r26, r24
    3950:	cb 01       	movw	r24, r22
    3952:	bc 01       	movw	r22, r24
    3954:	cd 01       	movw	r24, r26
    3956:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    395a:	dc 01       	movw	r26, r24
    395c:	cb 01       	movw	r24, r22
    395e:	9e 83       	std	Y+6, r25	; 0x06
    3960:	8d 83       	std	Y+5, r24	; 0x05
    3962:	0f c0       	rjmp	.+30     	; 0x3982 <main+0x5e4>
    3964:	80 e9       	ldi	r24, 0x90	; 144
    3966:	91 e0       	ldi	r25, 0x01	; 1
    3968:	9c 83       	std	Y+4, r25	; 0x04
    396a:	8b 83       	std	Y+3, r24	; 0x03
    396c:	8b 81       	ldd	r24, Y+3	; 0x03
    396e:	9c 81       	ldd	r25, Y+4	; 0x04
    3970:	01 97       	sbiw	r24, 0x01	; 1
    3972:	f1 f7       	brne	.-4      	; 0x3970 <main+0x5d2>
    3974:	9c 83       	std	Y+4, r25	; 0x04
    3976:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3978:	8d 81       	ldd	r24, Y+5	; 0x05
    397a:	9e 81       	ldd	r25, Y+6	; 0x06
    397c:	01 97       	sbiw	r24, 0x01	; 1
    397e:	9e 83       	std	Y+6, r25	; 0x06
    3980:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3982:	8d 81       	ldd	r24, Y+5	; 0x05
    3984:	9e 81       	ldd	r25, Y+6	; 0x06
    3986:	00 97       	sbiw	r24, 0x00	; 0
    3988:	69 f7       	brne	.-38     	; 0x3964 <main+0x5c6>
    398a:	14 c0       	rjmp	.+40     	; 0x39b4 <main+0x616>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    398c:	6f 81       	ldd	r22, Y+7	; 0x07
    398e:	78 85       	ldd	r23, Y+8	; 0x08
    3990:	89 85       	ldd	r24, Y+9	; 0x09
    3992:	9a 85       	ldd	r25, Y+10	; 0x0a
    3994:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3998:	dc 01       	movw	r26, r24
    399a:	cb 01       	movw	r24, r22
    399c:	9e 83       	std	Y+6, r25	; 0x06
    399e:	8d 83       	std	Y+5, r24	; 0x05
    39a0:	8d 81       	ldd	r24, Y+5	; 0x05
    39a2:	9e 81       	ldd	r25, Y+6	; 0x06
    39a4:	9a 83       	std	Y+2, r25	; 0x02
    39a6:	89 83       	std	Y+1, r24	; 0x01
    39a8:	89 81       	ldd	r24, Y+1	; 0x01
    39aa:	9a 81       	ldd	r25, Y+2	; 0x02
    39ac:	01 97       	sbiw	r24, 0x01	; 1
    39ae:	f1 f7       	brne	.-4      	; 0x39ac <main+0x60e>
    39b0:	9a 83       	std	Y+2, r25	; 0x02
    39b2:	89 83       	std	Y+1, r24	; 0x01
											_delay_ms(2000);
											LCD_ClearDisplay();
    39b4:	0e 94 25 18 	call	0x304a	; 0x304a <LCD_ClearDisplay>
											LCD_enuSendString("ENTER_USER_NAME");
    39b8:	81 e5       	ldi	r24, 0x51	; 81
    39ba:	93 e0       	ldi	r25, 0x03	; 3
    39bc:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <LCD_enuSendString>
											//keyPad_Typing(Emergency.UserName,SHOWN);
											LCD_ClearDisplay();
    39c0:	0e 94 25 18 	call	0x304a	; 0x304a <LCD_ClearDisplay>
											LCD_enuSendString("ENTER_PASSWORD");
    39c4:	81 e6       	ldi	r24, 0x61	; 97
    39c6:	93 e0       	ldi	r25, 0x03	; 3
    39c8:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <LCD_enuSendString>
											//keyPad_Typing(Emergency.PassWord,STAR);
											//search algorithm
											Keypad_enuGetPressedKey(&Key_Check);
    39cc:	ce 01       	movw	r24, r28
    39ce:	46 96       	adiw	r24, 0x16	; 22
    39d0:	0e 94 00 10 	call	0x2000	; 0x2000 <Keypad_enuGetPressedKey>
											if(Key_Check==2)
    39d4:	8e 89       	ldd	r24, Y+22	; 0x16
    39d6:	82 30       	cpi	r24, 0x02	; 2
    39d8:	c1 f0       	breq	.+48     	; 0x3a0a <main+0x66c>
											{

												break;
											}
											else if(Key_Check==3)
    39da:	8e 89       	ldd	r24, Y+22	; 0x16
    39dc:	83 30       	cpi	r24, 0x03	; 3
    39de:	89 f4       	brne	.+34     	; 0x3a02 <main+0x664>
											{
												Trial_Number++;
    39e0:	88 89       	ldd	r24, Y+16	; 0x10
    39e2:	8f 5f       	subi	r24, 0xFF	; 255
    39e4:	88 8b       	std	Y+16, r24	; 0x10
												Data=1;
    39e6:	81 e0       	ldi	r24, 0x01	; 1
    39e8:	8c 8b       	std	Y+20, r24	; 0x14
												if(Trial_Number==3)
    39ea:	88 89       	ldd	r24, Y+16	; 0x10
    39ec:	83 30       	cpi	r24, 0x03	; 3
    39ee:	49 f4       	brne	.+18     	; 0x3a02 <main+0x664>
												{
													while(1)
													{
														LCD_ClearDisplay();
    39f0:	0e 94 25 18 	call	0x304a	; 0x304a <LCD_ClearDisplay>
														LCD_enuSendString("ERORR");
    39f4:	8b e7       	ldi	r24, 0x7B	; 123
    39f6:	93 e0       	ldi	r25, 0x03	; 3
    39f8:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <LCD_enuSendString>
														buzzer_vON();
    39fc:	0e 94 a6 18 	call	0x314c	; 0x314c <buzzer_vON>
    3a00:	f7 cf       	rjmp	.-18     	; 0x39f0 <main+0x652>
												}
											else;
											}
											else;

								}while(Data==1);
    3a02:	8c 89       	ldd	r24, Y+20	; 0x14
    3a04:	81 30       	cpi	r24, 0x01	; 1
    3a06:	09 f4       	brne	.+2      	; 0x3a0a <main+0x66c>
    3a08:	5d cf       	rjmp	.-326    	; 0x38c4 <main+0x526>
							}

			             }while(Data==2);
    3a0a:	8c 89       	ldd	r24, Y+20	; 0x14
    3a0c:	82 30       	cpi	r24, 0x02	; 2
    3a0e:	09 f4       	brne	.+2      	; 0x3a12 <main+0x674>
    3a10:	45 cf       	rjmp	.-374    	; 0x389c <main+0x4fe>
			   LCD_enuSendString("1)LIGHT ON  ");
    3a12:	81 e8       	ldi	r24, 0x81	; 129
    3a14:	93 e0       	ldi	r25, 0x03	; 3
    3a16:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <LCD_enuSendString>
			   LCD_enuSendString("2)LIGHT OFF");
    3a1a:	8e e8       	ldi	r24, 0x8E	; 142
    3a1c:	93 e0       	ldi	r25, 0x03	; 3
    3a1e:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <LCD_enuSendString>
			   LCD_enuSendString("3) END");
    3a22:	8a e9       	ldi	r24, 0x9A	; 154
    3a24:	93 e0       	ldi	r25, 0x03	; 3
    3a26:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <LCD_enuSendString>
			   Keypad_enuGetPressedKey(&Key_Check);
    3a2a:	ce 01       	movw	r24, r28
    3a2c:	46 96       	adiw	r24, 0x16	; 22
    3a2e:	0e 94 00 10 	call	0x2000	; 0x2000 <Keypad_enuGetPressedKey>
			   if(Key_Check ==1)
    3a32:	8e 89       	ldd	r24, Y+22	; 0x16
    3a34:	81 30       	cpi	r24, 0x01	; 1
    3a36:	29 f4       	brne	.+10     	; 0x3a42 <main+0x6a4>
			   {
				   leds_vON();
    3a38:	0e 94 34 18 	call	0x3068	; 0x3068 <leds_vON>
				   Data=3;
    3a3c:	83 e0       	ldi	r24, 0x03	; 3
    3a3e:	8c 8b       	std	Y+20, r24	; 0x14
    3a40:	0c c0       	rjmp	.+24     	; 0x3a5a <main+0x6bc>
			   }
			   else if (Key_Check==2)
    3a42:	8e 89       	ldd	r24, Y+22	; 0x16
    3a44:	82 30       	cpi	r24, 0x02	; 2
    3a46:	29 f4       	brne	.+10     	; 0x3a52 <main+0x6b4>
			   {
				   leds_vOFF();
    3a48:	0e 94 6d 18 	call	0x30da	; 0x30da <leds_vOFF>
				   Data=3;
    3a4c:	83 e0       	ldi	r24, 0x03	; 3
    3a4e:	8c 8b       	std	Y+20, r24	; 0x14
    3a50:	04 c0       	rjmp	.+8      	; 0x3a5a <main+0x6bc>
			   }
			   else if (Key_Check==3)
    3a52:	8e 89       	ldd	r24, Y+22	; 0x16
    3a54:	83 30       	cpi	r24, 0x03	; 3
    3a56:	09 f4       	brne	.+2      	; 0x3a5a <main+0x6bc>
    3a58:	be cc       	rjmp	.-1668   	; 0x33d6 <main+0x38>
			   {
				   break;
			   }
			}while(Data==3);
    3a5a:	8c 89       	ldd	r24, Y+20	; 0x14
    3a5c:	83 30       	cpi	r24, 0x03	; 3
    3a5e:	09 f4       	brne	.+2      	; 0x3a62 <main+0x6c4>
    3a60:	1d cf       	rjmp	.-454    	; 0x389c <main+0x4fe>
    3a62:	b9 cc       	rjmp	.-1678   	; 0x33d6 <main+0x38>

00003a64 <Peripherals_Init>:
	}
}

#endif
void Peripherals_Init()
{
    3a64:	df 93       	push	r29
    3a66:	cf 93       	push	r28
    3a68:	cd b7       	in	r28, 0x3d	; 61
    3a6a:	de b7       	in	r29, 0x3e	; 62
	 Call_Back_Fun(Program_Check_Fun);
    3a6c:	8b e4       	ldi	r24, 0x4B	; 75
    3a6e:	9d e1       	ldi	r25, 0x1D	; 29
    3a70:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <Call_Back_Fun>
	 AC_Init();
    3a74:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <AC_Init>
	 Door_Ini();
    3a78:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <Door_Ini>
	 Temp_Sens_Init();
    3a7c:	0e 94 8e 19 	call	0x331c	; 0x331c <Temp_Sens_Init>
     LCD_enuInit();
    3a80:	0e 94 99 11 	call	0x2332	; 0x2332 <LCD_enuInit>
	 Keypad_enuInit();
    3a84:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <Keypad_enuInit>
	 Remote_Init();
    3a88:	0e 94 c8 18 	call	0x3190	; 0x3190 <Remote_Init>
	 GIE_Enable();
    3a8c:	0e 94 a5 0a 	call	0x154a	; 0x154a <GIE_Enable>
}
    3a90:	cf 91       	pop	r28
    3a92:	df 91       	pop	r29
    3a94:	08 95       	ret

00003a96 <Program_Check_Fun>:
void Program_Check_Fun()
{
    3a96:	df 93       	push	r29
    3a98:	cf 93       	push	r28
    3a9a:	cd b7       	in	r28, 0x3d	; 61
    3a9c:	de b7       	in	r29, 0x3e	; 62
	Program_Check=1;
    3a9e:	81 e0       	ldi	r24, 0x01	; 1
    3aa0:	80 93 3c 04 	sts	0x043C, r24
	USART_Recive_Char();
    3aa4:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <USART_Recive_Char>
    USART_RX_ID();
    3aa8:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <USART_RX_ID>
}
    3aac:	cf 91       	pop	r28
    3aae:	df 91       	pop	r29
    3ab0:	08 95       	ret

00003ab2 <__prologue_saves__>:
    3ab2:	2f 92       	push	r2
    3ab4:	3f 92       	push	r3
    3ab6:	4f 92       	push	r4
    3ab8:	5f 92       	push	r5
    3aba:	6f 92       	push	r6
    3abc:	7f 92       	push	r7
    3abe:	8f 92       	push	r8
    3ac0:	9f 92       	push	r9
    3ac2:	af 92       	push	r10
    3ac4:	bf 92       	push	r11
    3ac6:	cf 92       	push	r12
    3ac8:	df 92       	push	r13
    3aca:	ef 92       	push	r14
    3acc:	ff 92       	push	r15
    3ace:	0f 93       	push	r16
    3ad0:	1f 93       	push	r17
    3ad2:	cf 93       	push	r28
    3ad4:	df 93       	push	r29
    3ad6:	cd b7       	in	r28, 0x3d	; 61
    3ad8:	de b7       	in	r29, 0x3e	; 62
    3ada:	ca 1b       	sub	r28, r26
    3adc:	db 0b       	sbc	r29, r27
    3ade:	0f b6       	in	r0, 0x3f	; 63
    3ae0:	f8 94       	cli
    3ae2:	de bf       	out	0x3e, r29	; 62
    3ae4:	0f be       	out	0x3f, r0	; 63
    3ae6:	cd bf       	out	0x3d, r28	; 61
    3ae8:	09 94       	ijmp

00003aea <__epilogue_restores__>:
    3aea:	2a 88       	ldd	r2, Y+18	; 0x12
    3aec:	39 88       	ldd	r3, Y+17	; 0x11
    3aee:	48 88       	ldd	r4, Y+16	; 0x10
    3af0:	5f 84       	ldd	r5, Y+15	; 0x0f
    3af2:	6e 84       	ldd	r6, Y+14	; 0x0e
    3af4:	7d 84       	ldd	r7, Y+13	; 0x0d
    3af6:	8c 84       	ldd	r8, Y+12	; 0x0c
    3af8:	9b 84       	ldd	r9, Y+11	; 0x0b
    3afa:	aa 84       	ldd	r10, Y+10	; 0x0a
    3afc:	b9 84       	ldd	r11, Y+9	; 0x09
    3afe:	c8 84       	ldd	r12, Y+8	; 0x08
    3b00:	df 80       	ldd	r13, Y+7	; 0x07
    3b02:	ee 80       	ldd	r14, Y+6	; 0x06
    3b04:	fd 80       	ldd	r15, Y+5	; 0x05
    3b06:	0c 81       	ldd	r16, Y+4	; 0x04
    3b08:	1b 81       	ldd	r17, Y+3	; 0x03
    3b0a:	aa 81       	ldd	r26, Y+2	; 0x02
    3b0c:	b9 81       	ldd	r27, Y+1	; 0x01
    3b0e:	ce 0f       	add	r28, r30
    3b10:	d1 1d       	adc	r29, r1
    3b12:	0f b6       	in	r0, 0x3f	; 63
    3b14:	f8 94       	cli
    3b16:	de bf       	out	0x3e, r29	; 62
    3b18:	0f be       	out	0x3f, r0	; 63
    3b1a:	cd bf       	out	0x3d, r28	; 61
    3b1c:	ed 01       	movw	r28, r26
    3b1e:	08 95       	ret

00003b20 <strcmp>:
    3b20:	fb 01       	movw	r30, r22
    3b22:	dc 01       	movw	r26, r24
    3b24:	8d 91       	ld	r24, X+
    3b26:	01 90       	ld	r0, Z+
    3b28:	80 19       	sub	r24, r0
    3b2a:	01 10       	cpse	r0, r1
    3b2c:	d9 f3       	breq	.-10     	; 0x3b24 <strcmp+0x4>
    3b2e:	99 0b       	sbc	r25, r25
    3b30:	08 95       	ret

00003b32 <strcpy>:
    3b32:	fb 01       	movw	r30, r22
    3b34:	dc 01       	movw	r26, r24
    3b36:	01 90       	ld	r0, Z+
    3b38:	0d 92       	st	X+, r0
    3b3a:	00 20       	and	r0, r0
    3b3c:	e1 f7       	brne	.-8      	; 0x3b36 <strcpy+0x4>
    3b3e:	08 95       	ret

00003b40 <_exit>:
    3b40:	f8 94       	cli

00003b42 <__stop_program>:
    3b42:	ff cf       	rjmp	.-2      	; 0x3b42 <__stop_program>
